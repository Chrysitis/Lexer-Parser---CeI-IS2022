// Misc declarations and user code.
package cup;
import java_cup.runtime.*;
import jflex.*;
/* Parser code to change the way the parser reports errors (include
  line and column number of the error). */

parser code {:
    Scanner s;
    //parser(Scanner s){ this.s=s; }
    public boolean syntaxErrors;

    public void syntax_error(Symbol current_token) {
      report_error (
        "There seems to be a syntax error at line " + (current_token.left+1) + ", column " + current_token.right, null
      );
    }
:}
/* define how to connect to the scanner! */
init with {: s.init(); :};
scan with {: return s.next_token(); :};


// Symbol list (terminals and non terminals)
// Keyword terminals
terminal    INT, FLOAT;
terminal    BOOL;
terminal    CHAR, STRING, ARRAY;
terminal    BEGIN, END;
terminal    IF, THEN, ELSE;
terminal    FOR, BREAK, WHILE;
terminal    SWITCH, CASE;
terminal    RETURN;

// Boolean.
terminal    TRUE, FALSE;

// Separator
terminal    HASH, EQ, EQEQ;
terminal    LPAREN, RPAREN;
terminal    LCURLY, RCURLY;
terminal    LSQUARE, RSQUARE;
terminal    DOT;
terminal    COMMA;

// Operators.
terminal    ADD, SUBS, MULT, DIV;
terminal    AND, OR, NOT;    

// Number literals.
terminal INTLIT, FLOATLIT;
terminal CHARLIT, STRINGLIT;

terminal ID;


/* Non terminals */
non terminal            expr_list;
non terminal Integer    expr;      // used to store evaluated subexpressions
non terminal ini;

// Precedence and associativity declarations

// The grammar.
start with ini;
ini ::= expr_list HASH
  ;
