
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

package cup;

import java_cup.runtime.*;
import jflex.*;
import java.io.FileReader;
import java.io.BufferedReader;
import fileManager.*;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class parser extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return sym.class;
}

  /** Default constructor. */
  @Deprecated
  public parser() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\223\000\002\002\004\000\002\002\003\000\002\002" +
    "\003\000\002\002\004\000\002\002\004\000\002\003\010" +
    "\000\002\003\011\000\002\042\004\000\002\042\004\000" +
    "\002\042\004\000\002\042\004\000\002\004\012\000\002" +
    "\004\012\000\002\004\012\000\002\004\013\000\002\004" +
    "\013\000\002\004\013\000\002\005\004\000\002\005\005" +
    "\000\002\015\004\000\002\015\004\000\002\015\004\000" +
    "\002\015\004\000\002\015\004\000\002\015\006\000\002" +
    "\015\006\000\002\015\006\000\002\015\006\000\002\015" +
    "\006\000\002\016\003\000\002\016\003\000\002\016\003" +
    "\000\002\016\003\000\002\016\003\000\002\016\003\000" +
    "\002\016\003\000\002\016\005\000\002\016\005\000\002" +
    "\016\005\000\002\016\005\000\002\016\005\000\002\016" +
    "\005\000\002\016\005\000\002\006\003\000\002\006\003" +
    "\000\002\006\004\000\002\043\003\000\002\043\003\000" +
    "\002\043\003\000\002\043\003\000\002\043\003\000\002" +
    "\043\006\000\002\043\010\000\002\043\006\000\002\043" +
    "\010\000\002\051\004\000\002\051\006\000\002\052\004" +
    "\000\002\052\006\000\002\050\004\000\002\050\006\000" +
    "\002\050\006\000\002\053\004\000\002\053\006\000\002" +
    "\054\004\000\002\054\006\000\002\054\006\000\002\007" +
    "\005\000\002\040\006\000\002\040\006\000\002\041\010" +
    "\000\002\041\010\000\002\010\006\000\002\010\006\000" +
    "\002\010\006\000\002\010\006\000\002\010\006\000\002" +
    "\011\003\000\002\012\004\000\002\012\004\000\002\012" +
    "\004\000\002\012\004\000\002\012\004\000\002\012\004" +
    "\000\002\012\003\000\002\012\003\000\002\012\003\000" +
    "\002\012\004\000\002\057\003\000\002\057\003\000\002" +
    "\014\004\000\002\014\004\000\002\014\004\000\002\014" +
    "\004\000\002\014\004\000\002\014\004\000\002\044\003" +
    "\000\002\044\003\000\002\046\005\000\002\046\005\000" +
    "\002\046\003\000\002\061\005\000\002\061\005\000\002" +
    "\061\003\000\002\060\003\000\002\047\005\000\002\047" +
    "\005\000\002\047\003\000\002\063\005\000\002\063\005" +
    "\000\002\063\003\000\002\062\003\000\002\013\003\000" +
    "\002\013\003\000\002\024\005\000\002\022\005\000\002" +
    "\023\003\000\002\023\005\000\002\045\003\000\002\045" +
    "\003\000\002\055\003\000\002\056\003\000\002\025\003" +
    "\000\002\025\005\000\002\026\003\000\002\026\003\000" +
    "\002\026\003\000\002\026\005\000\002\027\003\000\002" +
    "\027\003\000\002\027\003\000\002\027\003\000\002\027" +
    "\003\000\002\027\003\000\002\030\003\000\002\030\003" +
    "\000\002\030\003\000\002\030\003\000\002\031\003\000" +
    "\002\031\003\000\002\031\003\000\002\031\003\000\002" +
    "\032\012\000\002\032\016\000\002\033\011\000\002\034" +
    "\020\000\002\037\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\u012c\000\010\004\011\005\010\007\007\001\002\000" +
    "\012\002\000\004\011\005\010\007\007\001\002\000\012" +
    "\002\uffff\004\011\005\010\007\007\001\002\000\004\002" +
    "\u012c\001\002\000\004\031\u011e\001\002\000\004\031\u0110" +
    "\001\002\000\006\030\013\031\012\001\002\000\016\004" +
    "\364\006\362\007\363\010\357\011\365\041\360\001\002" +
    "\000\004\042\014\001\002\000\056\003\046\004\025\005" +
    "\064\006\035\007\020\010\070\012\053\013\016\016\037" +
    "\021\032\023\061\027\043\031\057\032\060\033\074\034" +
    "\023\040\024\070\045\071\072\072\034\073\050\077\040" +
    "\001\002\000\010\035\uff91\041\uff91\047\uff91\001\002\000" +
    "\004\072\352\001\002\000\004\035\351\001\002\000\004" +
    "\077\345\001\002\000\004\035\uffd3\001\002\000\020\035" +
    "\uff83\037\uff83\041\uff83\047\uff83\065\uff83\066\uff83\067\uff83" +
    "\001\002\000\006\027\uffd5\043\uffd5\001\002\000\010\040" +
    "\202\072\343\073\344\001\002\000\004\077\340\001\002" +
    "\000\004\035\uffd0\001\002\000\020\035\uff84\037\uff84\041" +
    "\uff84\047\uff84\065\uff84\066\uff84\067\uff84\001\002\000\012" +
    "\037\333\065\330\066\332\067\331\001\002\000\004\027" +
    "\043\001\002\000\004\040\275\001\002\000\020\035\uff87" +
    "\041\uff87\047\uff87\061\uff87\062\uff87\063\uff87\064\uff87\001" +
    "\002\000\020\035\uff89\041\uff89\047\uff89\061\uff89\062\uff89" +
    "\063\uff89\064\uff89\001\002\000\004\077\266\001\002\000" +
    "\010\035\uff90\041\uff90\047\uff90\001\002\000\004\040\253" +
    "\001\002\000\016\036\241\037\uff85\044\240\065\uff85\066" +
    "\uff85\067\uff85\001\002\000\060\003\046\004\025\005\064" +
    "\006\035\007\020\010\070\012\053\013\016\016\037\021" +
    "\032\023\061\027\uffd6\031\057\032\060\033\074\034\023" +
    "\040\024\043\uffd6\070\045\071\072\072\034\073\050\077" +
    "\040\001\002\000\020\035\uff8b\041\uff8b\047\uff8b\061\uff8b" +
    "\062\uff8b\063\uff8b\064\uff8b\001\002\000\012\072\234\073" +
    "\235\074\236\077\233\001\002\000\004\035\uffd2\001\002" +
    "\000\020\035\uffa9\037\uffa9\041\uffa9\047\uffa9\065\uffa9\066" +
    "\uffa9\067\uffa9\001\002\000\004\035\232\001\002\000\004" +
    "\035\231\001\002\000\020\035\uff88\041\uff88\047\uff88\061" +
    "\uff88\062\uff88\063\uff88\064\uff88\001\002\000\060\003\uffac" +
    "\004\uffac\005\uffac\006\uffac\007\uffac\010\uffac\012\uffac\013" +
    "\uffac\016\uffac\021\uffac\023\uffac\027\uffac\031\uffac\032\uffac" +
    "\033\uffac\034\uffac\040\uffac\043\uffac\070\uffac\071\uffac\072" +
    "\uffac\073\uffac\077\uffac\001\002\000\060\003\uffad\004\uffad" +
    "\005\uffad\006\uffad\007\uffad\010\uffad\012\uffad\013\uffad\016" +
    "\uffad\021\uffad\023\uffad\027\uffad\031\uffad\032\uffad\033\uffad" +
    "\034\uffad\040\uffad\043\uffad\070\uffad\071\uffad\072\uffad\073" +
    "\uffad\077\uffad\001\002\000\004\072\224\001\002\000\004" +
    "\035\223\001\002\000\004\035\222\001\002\000\012\061" +
    "\174\062\176\063\177\064\175\001\002\000\024\031\057" +
    "\041\150\070\045\071\072\072\144\073\152\074\151\075" +
    "\154\077\147\001\002\000\004\035\uffb4\001\002\000\004" +
    "\040\135\001\002\000\060\003\uffab\004\uffab\005\uffab\006" +
    "\uffab\007\uffab\010\uffab\012\uffab\013\uffab\016\uffab\021\uffab" +
    "\023\uffab\027\uffab\031\uffab\032\uffab\033\uffab\034\uffab\040" +
    "\uffab\043\uffab\070\uffab\071\uffab\072\uffab\073\uffab\077\uffab" +
    "\001\002\000\004\035\134\001\002\000\004\077\116\001" +
    "\002\000\004\035\115\001\002\000\020\035\uff8a\041\uff8a" +
    "\047\uff8a\061\uff8a\062\uff8a\063\uff8a\064\uff8a\001\002\000" +
    "\004\035\uffcf\001\002\000\004\077\112\001\002\000\004" +
    "\035\110\001\002\000\020\035\uffa8\037\uffa8\041\uffa8\047" +
    "\uffa8\065\uffa8\066\uffa8\067\uffa8\001\002\000\004\035\uffd1" +
    "\001\002\000\004\040\075\001\002\000\014\072\077\073" +
    "\100\074\102\075\101\077\076\001\002\000\004\041\107" +
    "\001\002\000\004\041\106\001\002\000\004\041\105\001" +
    "\002\000\004\041\104\001\002\000\004\041\103\001\002" +
    "\000\004\035\uffb7\001\002\000\004\035\uffb6\001\002\000" +
    "\004\035\uffb8\001\002\000\004\035\uffb9\001\002\000\004" +
    "\035\uffb5\001\002\000\004\043\111\001\002\000\012\002" +
    "\ufffc\004\ufffc\005\ufffc\007\ufffc\001\002\000\006\035\uffc3" +
    "\036\113\001\002\000\004\075\114\001\002\000\004\035" +
    "\uffc2\001\002\000\060\003\uffb1\004\uffb1\005\uffb1\006\uffb1" +
    "\007\uffb1\010\uffb1\012\uffb1\013\uffb1\016\uffb1\021\uffb1\023" +
    "\uffb1\027\uffb1\031\uffb1\032\uffb1\033\uffb1\034\uffb1\040\uffb1" +
    "\043\uffb1\070\uffb1\071\uffb1\072\uffb1\073\uffb1\077\uffb1\001" +
    "\002\000\006\035\uffc8\036\117\001\002\000\004\073\122" +
    "\001\002\000\016\035\uff93\041\uff93\051\uff93\052\uff93\053" +
    "\uff93\054\uff93\001\002\000\010\035\uffc7\051\130\052\131" +
    "\001\002\000\016\035\uff92\041\uff92\051\uff92\052\uff92\053" +
    "\uff92\054\uff92\001\002\000\016\035\uff96\041\uff96\051\uff96" +
    "\052\uff96\053\124\054\125\001\002\000\004\073\122\001" +
    "\002\000\004\073\122\001\002\000\016\035\uff94\041\uff94" +
    "\051\uff94\052\uff94\053\uff94\054\uff94\001\002\000\016\035" +
    "\uff95\041\uff95\051\uff95\052\uff95\053\uff95\054\uff95\001\002" +
    "\000\004\073\122\001\002\000\004\073\122\001\002\000" +
    "\016\035\uff97\041\uff97\051\uff97\052\uff97\053\124\054\125" +
    "\001\002\000\016\035\uff98\041\uff98\051\uff98\052\uff98\053" +
    "\124\054\125\001\002\000\060\003\uffaf\004\uffaf\005\uffaf" +
    "\006\uffaf\007\uffaf\010\uffaf\012\uffaf\013\uffaf\016\uffaf\021" +
    "\uffaf\023\uffaf\027\uffaf\031\uffaf\032\uffaf\033\uffaf\034\uffaf" +
    "\040\uffaf\043\uffaf\070\uffaf\071\uffaf\072\uffaf\073\uffaf\077" +
    "\uffaf\001\002\000\020\031\057\040\024\070\045\071\072" +
    "\072\034\073\050\077\137\001\002\000\004\041\140\001" +
    "\002\000\020\035\uff85\037\uff85\041\uff85\047\uff85\065\uff85" +
    "\066\uff85\067\uff85\001\002\000\004\042\141\001\002\000" +
    "\054\003\046\004\025\005\064\006\035\007\020\010\070" +
    "\012\053\013\016\016\037\021\032\023\061\031\057\032" +
    "\060\033\074\034\023\040\024\070\045\071\072\072\034" +
    "\073\050\077\040\001\002\000\004\043\143\001\002\000" +
    "\060\003\uff71\004\uff71\005\uff71\006\uff71\007\uff71\010\uff71" +
    "\012\uff71\013\uff71\016\uff71\021\uff71\023\uff71\027\uff71\031" +
    "\uff71\032\uff71\033\uff71\034\uff71\040\uff71\043\uff71\070\uff71" +
    "\071\uff71\072\uff71\073\uff71\077\uff71\001\002\000\006\041" +
    "\uffe4\047\172\001\002\000\006\041\uffe0\047\170\001\002" +
    "\000\006\041\uffde\047\166\001\002\000\006\041\uffdf\047" +
    "\164\001\002\000\020\035\ufff0\037\ufff0\041\ufff0\047\ufff0" +
    "\065\ufff0\066\ufff0\067\ufff0\001\002\000\006\041\uffe2\047" +
    "\162\001\002\000\006\041\uffe3\047\160\001\002\000\004" +
    "\041\157\001\002\000\006\041\uffe1\047\155\001\002\000" +
    "\022\031\057\070\045\071\072\072\144\073\152\074\151" +
    "\075\154\077\147\001\002\000\004\041\uffda\001\002\000" +
    "\020\035\uffef\037\uffef\041\uffef\047\uffef\065\uffef\066\uffef" +
    "\067\uffef\001\002\000\022\031\057\070\045\071\072\072" +
    "\144\073\152\074\151\075\154\077\147\001\002\000\004" +
    "\041\uffdc\001\002\000\022\031\057\070\045\071\072\072" +
    "\144\073\152\074\151\075\154\077\147\001\002\000\004" +
    "\041\uffdb\001\002\000\022\031\057\070\045\071\072\072" +
    "\144\073\152\074\151\075\154\077\147\001\002\000\004" +
    "\041\uffd8\001\002\000\022\031\057\070\045\071\072\072" +
    "\144\073\152\074\151\075\154\077\147\001\002\000\004" +
    "\041\uffd7\001\002\000\022\031\057\070\045\071\072\072" +
    "\144\073\152\074\151\075\154\077\147\001\002\000\004" +
    "\041\uffd9\001\002\000\022\031\057\070\045\071\072\072" +
    "\144\073\152\074\151\075\154\077\147\001\002\000\004" +
    "\041\uffdd\001\002\000\010\040\uff7b\072\uff7b\073\uff7b\001" +
    "\002\000\010\040\uff78\072\uff78\073\uff78\001\002\000\010" +
    "\040\uff7a\072\uff7a\073\uff7a\001\002\000\010\040\uff79\072" +
    "\uff79\073\uff79\001\002\000\010\040\202\072\034\073\050" +
    "\001\002\000\010\035\uff8f\041\uff8f\047\uff8f\001\002\000" +
    "\006\072\206\073\122\001\002\000\012\035\uffa1\041\uffa1" +
    "\051\216\052\217\001\002\000\016\035\uff9a\041\uff9a\051" +
    "\uff9a\052\uff9a\053\uff9a\054\uff9a\001\002\000\012\035\uffa0" +
    "\041\uffa0\051\130\052\131\001\002\000\016\035\uff99\041" +
    "\uff99\051\uff99\052\uff99\053\uff99\054\uff99\001\002\000\016" +
    "\035\uff9d\041\uff9d\051\uff9d\052\uff9d\053\212\054\213\001" +
    "\002\000\004\041\211\001\002\000\020\035\uff86\041\uff86" +
    "\047\uff86\061\uff86\062\uff86\063\uff86\064\uff86\001\002\000" +
    "\004\072\206\001\002\000\004\072\206\001\002\000\016" +
    "\035\uff9b\041\uff9b\051\uff9b\052\uff9b\053\uff9b\054\uff9b\001" +
    "\002\000\016\035\uff9c\041\uff9c\051\uff9c\052\uff9c\053\uff9c" +
    "\054\uff9c\001\002\000\004\072\206\001\002\000\004\072" +
    "\206\001\002\000\016\035\uff9e\041\uff9e\051\uff9e\052\uff9e" +
    "\053\212\054\213\001\002\000\016\035\uff9f\041\uff9f\051" +
    "\uff9f\052\uff9f\053\212\054\213\001\002\000\060\003\uffb2" +
    "\004\uffb2\005\uffb2\006\uffb2\007\uffb2\010\uffb2\012\uffb2\013" +
    "\uffb2\016\uffb2\021\uffb2\023\uffb2\027\uffb2\031\uffb2\032\uffb2" +
    "\033\uffb2\034\uffb2\040\uffb2\043\uffb2\070\uffb2\071\uffb2\072" +
    "\uffb2\073\uffb2\077\uffb2\001\002\000\060\003\uffb3\004\uffb3" +
    "\005\uffb3\006\uffb3\007\uffb3\010\uffb3\012\uffb3\013\uffb3\016" +
    "\uffb3\021\uffb3\023\uffb3\027\uffb3\031\uffb3\032\uffb3\033\uffb3" +
    "\034\uffb3\040\uffb3\043\uffb3\070\uffb3\071\uffb3\072\uffb3\073" +
    "\uffb3\077\uffb3\001\002\000\004\045\225\001\002\000\004" +
    "\077\226\001\002\000\006\035\uffce\036\227\001\002\000" +
    "\004\076\230\001\002\000\004\035\uffcd\001\002\000\060" +
    "\003\uffb0\004\uffb0\005\uffb0\006\uffb0\007\uffb0\010\uffb0\012" +
    "\uffb0\013\uffb0\016\uffb0\021\uffb0\023\uffb0\027\uffb0\031\uffb0" +
    "\032\uffb0\033\uffb0\034\uffb0\040\uffb0\043\uffb0\070\uffb0\071" +
    "\uffb0\072\uffb0\073\uffb0\077\uffb0\001\002\000\060\003\uffaa" +
    "\004\uffaa\005\uffaa\006\uffaa\007\uffaa\010\uffaa\012\uffaa\013" +
    "\uffaa\016\uffaa\021\uffaa\023\uffaa\027\uffaa\031\uffaa\032\uffaa" +
    "\033\uffaa\034\uffaa\040\uffaa\043\uffaa\070\uffaa\071\uffaa\072" +
    "\uffaa\073\uffaa\077\uffaa\001\002\000\004\035\ufffa\001\002" +
    "\000\004\035\ufff9\001\002\000\004\035\ufff8\001\002\000" +
    "\004\035\ufff7\001\002\000\006\027\uffd4\043\uffd4\001\002" +
    "\000\006\072\244\077\243\001\002\000\006\072\206\073" +
    "\122\001\002\000\004\035\uffbe\001\002\000\004\045\250" +
    "\001\002\000\004\045\245\001\002\000\004\036\246\001" +
    "\002\000\006\072\206\073\122\001\002\000\004\035\uffbb" +
    "\001\002\000\004\036\251\001\002\000\006\072\206\073" +
    "\122\001\002\000\004\035\uffba\001\002\000\020\031\057" +
    "\040\024\070\045\071\072\072\034\073\050\077\137\001" +
    "\002\000\004\041\255\001\002\000\004\017\256\001\002" +
    "\000\004\042\257\001\002\000\054\003\046\004\025\005" +
    "\064\006\035\007\020\010\070\012\053\013\016\016\037" +
    "\021\032\023\061\031\057\032\060\033\074\034\023\040" +
    "\024\070\045\071\072\072\034\073\050\077\040\001\002" +
    "\000\004\043\261\001\002\000\062\003\uff73\004\uff73\005" +
    "\uff73\006\uff73\007\uff73\010\uff73\012\uff73\013\uff73\016\uff73" +
    "\020\262\021\uff73\023\uff73\027\uff73\031\uff73\032\uff73\033" +
    "\uff73\034\uff73\040\uff73\043\uff73\070\uff73\071\uff73\072\uff73" +
    "\073\uff73\077\uff73\001\002\000\004\042\263\001\002\000" +
    "\054\003\046\004\025\005\064\006\035\007\020\010\070" +
    "\012\053\013\016\016\037\021\032\023\061\031\057\032" +
    "\060\033\074\034\023\040\024\070\045\071\072\072\034" +
    "\073\050\077\040\001\002\000\004\043\265\001\002\000" +
    "\060\003\uff72\004\uff72\005\uff72\006\uff72\007\uff72\010\uff72" +
    "\012\uff72\013\uff72\016\uff72\021\uff72\023\uff72\027\uff72\031" +
    "\uff72\032\uff72\033\uff72\034\uff72\040\uff72\043\uff72\070\uff72" +
    "\071\uff72\072\uff72\073\uff72\077\uff72\001\002\000\006\035" +
    "\uffc1\036\267\001\002\000\014\031\057\040\272\070\045" +
    "\071\072\077\137\001\002\000\004\035\uffbf\001\002\000" +
    "\014\035\uffc0\037\uff84\065\uff84\066\uff84\067\uff84\001\002" +
    "\000\010\040\202\072\034\073\050\001\002\000\004\041" +
    "\274\001\002\000\020\035\uff82\037\uff82\041\uff82\047\uff82" +
    "\065\uff82\066\uff82\067\uff82\001\002\000\004\004\276\001" +
    "\002\000\004\077\277\001\002\000\004\036\300\001\002" +
    "\000\004\072\301\001\002\000\004\047\uff6f\001\002\000" +
    "\004\047\303\001\002\000\020\031\057\040\024\070\045" +
    "\071\072\072\034\073\050\077\137\001\002\000\004\047" +
    "\305\001\002\000\010\072\310\073\311\077\307\001\002" +
    "\000\004\041\320\001\002\000\006\057\317\060\316\001" +
    "\002\000\006\057\315\060\314\001\002\000\006\057\313" +
    "\060\312\001\002\000\004\041\uffa2\001\002\000\004\041" +
    "\uffa3\001\002\000\004\041\uffa4\001\002\000\004\041\uffa5" +
    "\001\002\000\004\041\uffa6\001\002\000\004\041\uffa7\001" +
    "\002\000\004\042\321\001\002\000\054\003\046\004\025" +
    "\005\064\006\035\007\020\010\070\012\053\013\016\016" +
    "\037\021\032\023\061\031\057\032\060\033\074\034\023" +
    "\040\024\070\045\071\072\072\034\073\050\077\040\001" +
    "\002\000\004\043\323\001\002\000\060\003\uff70\004\uff70" +
    "\005\uff70\006\uff70\007\uff70\010\uff70\012\uff70\013\uff70\016" +
    "\uff70\021\uff70\023\uff70\027\uff70\031\uff70\032\uff70\033\uff70" +
    "\034\uff70\040\uff70\043\uff70\070\uff70\071\uff70\072\uff70\073" +
    "\uff70\077\uff70\001\002\000\004\035\325\001\002\000\004" +
    "\043\326\001\002\000\012\002\ufffb\004\ufffb\005\ufffb\007" +
    "\ufffb\001\002\000\014\031\057\040\272\070\045\071\072" +
    "\077\137\001\002\000\014\031\uff77\040\uff77\070\uff77\071" +
    "\uff77\077\uff77\001\002\000\014\031\uff74\040\uff74\070\uff74" +
    "\071\uff74\077\uff74\001\002\000\014\031\uff76\040\uff76\070" +
    "\uff76\071\uff76\077\uff76\001\002\000\014\031\uff75\040\uff75" +
    "\070\uff75\071\uff75\077\uff75\001\002\000\020\035\uff8d\037" +
    "\333\041\uff8d\047\uff8d\065\330\066\332\067\331\001\002" +
    "\000\010\035\uff8e\041\uff8e\047\uff8e\001\002\000\014\031" +
    "\057\040\272\070\045\071\072\077\137\001\002\000\010" +
    "\035\uff8c\041\uff8c\047\uff8c\001\002\000\006\035\uffca\036" +
    "\341\001\002\000\004\072\206\001\002\000\010\035\uffc9" +
    "\051\216\052\217\001\002\000\024\041\uff99\051\uff99\052" +
    "\uff99\053\uff99\054\uff99\061\uff89\062\uff89\063\uff89\064\uff89" +
    "\001\002\000\024\041\uff92\051\uff92\052\uff92\053\uff92\054" +
    "\uff92\061\uff88\062\uff88\063\uff88\064\uff88\001\002\000\006" +
    "\035\uffc6\036\346\001\002\000\006\031\057\074\350\001" +
    "\002\000\004\035\uffc4\001\002\000\004\035\uffc5\001\002" +
    "\000\060\003\uffae\004\uffae\005\uffae\006\uffae\007\uffae\010" +
    "\uffae\012\uffae\013\uffae\016\uffae\021\uffae\023\uffae\027\uffae" +
    "\031\uffae\032\uffae\033\uffae\034\uffae\040\uffae\043\uffae\070" +
    "\uffae\071\uffae\072\uffae\073\uffae\077\uffae\001\002\000\004" +
    "\045\353\001\002\000\004\077\354\001\002\000\006\035" +
    "\uffcc\036\355\001\002\000\004\076\356\001\002\000\004" +
    "\035\uffcb\001\002\000\004\077\u010d\001\002\000\004\042" +
    "\u0108\001\002\000\004\041\u0102\001\002\000\004\077\377" +
    "\001\002\000\004\077\374\001\002\000\004\077\371\001" +
    "\002\000\004\077\366\001\002\000\006\041\uffeb\047\367" +
    "\001\002\000\014\004\364\006\362\007\363\010\357\011" +
    "\365\001\002\000\004\041\uffe6\001\002\000\006\041\uffee" +
    "\047\372\001\002\000\014\004\364\006\362\007\363\010" +
    "\357\011\365\001\002\000\004\041\uffe9\001\002\000\006" +
    "\041\uffed\047\375\001\002\000\014\004\364\006\362\007" +
    "\363\010\357\011\365\001\002\000\004\041\uffe8\001\002" +
    "\000\006\041\uffec\047\u0100\001\002\000\014\004\364\006" +
    "\362\007\363\010\357\011\365\001\002\000\004\041\uffe7" +
    "\001\002\000\004\042\u0103\001\002\000\054\003\046\004" +
    "\025\005\064\006\035\007\020\010\070\012\053\013\016" +
    "\016\037\021\032\023\061\031\057\032\060\033\074\034" +
    "\023\040\024\070\045\071\072\072\034\073\050\077\040" +
    "\001\002\000\004\027\043\001\002\000\004\035\u0106\001" +
    "\002\000\004\043\u0107\001\002\000\012\002\ufff3\004\ufff3" +
    "\005\ufff3\007\ufff3\001\002\000\054\003\046\004\025\005" +
    "\064\006\035\007\020\010\070\012\053\013\016\016\037" +
    "\021\032\023\061\031\057\032\060\033\074\034\023\040" +
    "\024\070\045\071\072\072\034\073\050\077\040\001\002" +
    "\000\004\027\043\001\002\000\004\035\u010b\001\002\000" +
    "\004\043\u010c\001\002\000\012\002\ufff6\004\ufff6\005\ufff6" +
    "\007\ufff6\001\002\000\006\041\uffea\047\u010e\001\002\000" +
    "\014\004\364\006\362\007\363\010\357\011\365\001\002" +
    "\000\004\041\uffe5\001\002\000\016\004\364\006\362\007" +
    "\363\010\357\011\365\041\u0111\001\002\000\004\042\u0119" +
    "\001\002\000\004\041\u0113\001\002\000\004\042\u0114\001" +
    "\002\000\054\003\046\004\025\005\064\006\035\007\020" +
    "\010\070\012\053\013\016\016\037\021\032\023\061\031" +
    "\057\032\060\033\074\034\023\040\024\070\045\071\072" +
    "\072\034\073\050\077\040\001\002\000\004\027\043\001" +
    "\002\000\004\035\u0117\001\002\000\004\043\u0118\001\002" +
    "\000\012\002\ufff1\004\ufff1\005\ufff1\007\ufff1\001\002\000" +
    "\054\003\046\004\025\005\064\006\035\007\020\010\070" +
    "\012\053\013\016\016\037\021\032\023\061\031\057\032" +
    "\060\033\074\034\023\040\024\070\045\071\072\072\034" +
    "\073\050\077\040\001\002\000\004\027\043\001\002\000" +
    "\004\035\u011c\001\002\000\004\043\u011d\001\002\000\012" +
    "\002\ufff4\004\ufff4\005\ufff4\007\ufff4\001\002\000\016\004" +
    "\364\006\362\007\363\010\357\011\365\041\u011f\001\002" +
    "\000\004\042\u0127\001\002\000\004\041\u0121\001\002\000" +
    "\004\042\u0122\001\002\000\054\003\046\004\025\005\064" +
    "\006\035\007\020\010\070\012\053\013\016\016\037\021" +
    "\032\023\061\031\057\032\060\033\074\034\023\040\024" +
    "\070\045\071\072\072\034\073\050\077\040\001\002\000" +
    "\004\027\043\001\002\000\004\035\u0125\001\002\000\004" +
    "\043\u0126\001\002\000\012\002\ufff2\004\ufff2\005\ufff2\007" +
    "\ufff2\001\002\000\054\003\046\004\025\005\064\006\035" +
    "\007\020\010\070\012\053\013\016\016\037\021\032\023" +
    "\061\031\057\032\060\033\074\034\023\040\024\070\045" +
    "\071\072\072\034\073\050\077\040\001\002\000\004\027" +
    "\043\001\002\000\004\035\u012a\001\002\000\004\043\u012b" +
    "\001\002\000\012\002\ufff5\004\ufff5\005\ufff5\007\ufff5\001" +
    "\002\000\004\002\001\001\002\000\004\002\ufffd\001\002" +
    "\000\004\002\ufffe\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\u012c\000\010\002\005\003\003\004\004\001\001\000" +
    "\010\002\u012d\003\003\004\004\001\001\000\010\002\u012c" +
    "\003\003\004\004\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\015\360" +
    "\001\001\000\002\001\001\000\066\005\021\006\030\007" +
    "\064\010\046\011\062\012\040\013\053\022\014\024\035" +
    "\025\055\026\027\032\051\033\050\034\061\041\016\042" +
    "\070\043\054\045\032\050\072\051\020\052\043\053\025" +
    "\054\066\055\041\056\065\057\026\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\032\024\272\025\055\044\207\045\032\046\202\047\204" +
    "\055\041\056\065\060\203\061\206\062\117\063\122\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\031\326\001\001\000\004\042\323\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\064\005\021\006\236\007\064\010\046\011\062" +
    "\012\040\013\053\022\014\024\035\025\055\026\027\032" +
    "\051\033\050\034\061\041\016\043\054\045\032\050\072" +
    "\051\020\052\043\053\025\054\066\055\041\056\065\057" +
    "\026\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\030\177\001\001\000\010\005\145\016\152\057\144" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\010\047\120" +
    "\062\117\063\122\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\062\126" +
    "\001\001\000\004\062\125\001\001\000\002\001\001\000" +
    "\002\001\001\000\006\062\117\063\132\001\001\000\006" +
    "\062\117\063\131\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\026\005\021\013\135\022\014" +
    "\024\035\025\055\026\027\045\032\055\041\056\065\057" +
    "\026\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\064\005\021\006\141\007\064\010\046\011" +
    "\062\012\040\013\053\022\014\024\035\025\055\026\027" +
    "\032\051\033\050\034\061\041\016\043\054\045\032\050" +
    "\072\051\020\052\043\053\025\054\066\055\041\056\065" +
    "\057\026\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\010\005\145" +
    "\016\155\057\144\001\001\000\002\001\001\000\002\001" +
    "\001\000\010\005\145\016\160\057\144\001\001\000\002" +
    "\001\001\000\010\005\145\016\162\057\144\001\001\000" +
    "\002\001\001\000\010\005\145\016\164\057\144\001\001" +
    "\000\002\001\001\000\010\005\145\016\166\057\144\001" +
    "\001\000\002\001\001\000\010\005\145\016\170\057\144" +
    "\001\001\000\002\001\001\000\010\005\145\016\172\057" +
    "\144\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\012\025" +
    "\200\045\032\055\041\056\065\001\001\000\002\001\001" +
    "\000\020\044\207\046\202\047\204\060\203\061\206\062" +
    "\117\063\122\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\060\214\001\001" +
    "\000\004\060\213\001\001\000\002\001\001\000\002\001" +
    "\001\000\006\060\203\061\220\001\001\000\006\060\203" +
    "\061\217\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\020\044\241\046\202" +
    "\047\204\060\203\061\206\062\117\063\122\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\020\044\246\046\202\047\204\060\203\061" +
    "\206\062\117\063\122\001\001\000\002\001\001\000\002" +
    "\001\001\000\020\044\251\046\202\047\204\060\203\061" +
    "\206\062\117\063\122\001\001\000\002\001\001\000\026" +
    "\005\021\013\253\022\014\024\035\025\055\026\027\045" +
    "\032\055\041\056\065\057\026\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\064\005\021\006" +
    "\257\007\064\010\046\011\062\012\040\013\053\022\014" +
    "\024\035\025\055\026\027\032\051\033\050\034\061\041" +
    "\016\043\054\045\032\050\072\051\020\052\043\053\025" +
    "\054\066\055\041\056\065\057\026\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\064\005\021" +
    "\006\263\007\064\010\046\011\062\012\040\013\053\022" +
    "\014\024\035\025\055\026\027\032\051\033\050\034\061" +
    "\041\016\043\054\045\032\050\072\051\020\052\043\053" +
    "\025\054\066\055\041\056\065\057\026\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\012\005" +
    "\021\022\267\026\027\057\270\001\001\000\002\001\001" +
    "\000\002\001\001\000\014\024\272\025\055\045\032\055" +
    "\041\056\065\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\037\301\001\001\000\002\001\001\000\002\001\001" +
    "\000\026\005\021\013\303\022\014\024\035\025\055\026" +
    "\027\045\032\055\041\056\065\057\026\001\001\000\002" +
    "\001\001\000\004\014\305\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\064\005\021\006\321\007\064\010\046\011\062\012" +
    "\040\013\053\022\014\024\035\025\055\026\027\032\051" +
    "\033\050\034\061\041\016\043\054\045\032\050\072\051" +
    "\020\052\043\053\025\054\066\055\041\056\065\057\026" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\012\005\021" +
    "\023\334\026\333\057\026\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\031\335\001\001\000\002\001\001\000\012\005\021\023" +
    "\336\026\333\057\026\001\001\000\002\001\001\000\002" +
    "\001\001\000\010\046\341\060\203\061\206\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\005\346\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\015\367\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\015\372\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\015\375" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\015" +
    "\u0100\001\001\000\002\001\001\000\002\001\001\000\064" +
    "\005\021\006\u0103\007\064\010\046\011\062\012\040\013" +
    "\053\022\014\024\035\025\055\026\027\032\051\033\050" +
    "\034\061\041\016\043\054\045\032\050\072\051\020\052" +
    "\043\053\025\054\066\055\041\056\065\057\026\001\001" +
    "\000\004\042\u0104\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\064\005\021\006\u0108\007\064" +
    "\010\046\011\062\012\040\013\053\022\014\024\035\025" +
    "\055\026\027\032\051\033\050\034\061\041\016\043\054" +
    "\045\032\050\072\051\020\052\043\053\025\054\066\055" +
    "\041\056\065\057\026\001\001\000\004\042\u0109\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\015\u010e\001\001\000\002\001\001" +
    "\000\004\015\u0111\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\064\005\021\006\u0114\007\064" +
    "\010\046\011\062\012\040\013\053\022\014\024\035\025" +
    "\055\026\027\032\051\033\050\034\061\041\016\043\054" +
    "\045\032\050\072\051\020\052\043\053\025\054\066\055" +
    "\041\056\065\057\026\001\001\000\004\042\u0115\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\064\005\021\006\u0119\007\064\010\046\011\062\012\040" +
    "\013\053\022\014\024\035\025\055\026\027\032\051\033" +
    "\050\034\061\041\016\043\054\045\032\050\072\051\020" +
    "\052\043\053\025\054\066\055\041\056\065\057\026\001" +
    "\001\000\004\042\u011a\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\015\u011f\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\064" +
    "\005\021\006\u0122\007\064\010\046\011\062\012\040\013" +
    "\053\022\014\024\035\025\055\026\027\032\051\033\050" +
    "\034\061\041\016\043\054\045\032\050\072\051\020\052" +
    "\043\053\025\054\066\055\041\056\065\057\026\001\001" +
    "\000\004\042\u0123\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\064\005\021\006\u0127\007\064" +
    "\010\046\011\062\012\040\013\053\022\014\024\035\025" +
    "\055\026\027\032\051\033\050\034\061\041\016\043\054" +
    "\045\032\050\072\051\020\052\043\053\025\054\066\055" +
    "\041\056\065\057\026\001\001\000\004\042\u0128\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}


  /** Scan to get the next Symbol. */
  public java_cup.runtime.Symbol scan()
    throws java.lang.Exception
    {
 return s.next_token(); 
    }


    Scanner s;
    public parser(int t, Scanner s){ this.s=s; }
    public boolean syntaxErrors;
    public int syntaxErrs = 0;

    @Override
    public void syntax_error(Symbol current_token) {
      String errInfo = "SYNTAX ERROR AT LINE " + (current_token.left) + " COLUMN " 
        + (current_token.right) + " VALUE: " + current_token.value + " - ";
      System.out.println(errInfo); 
      reportErrToFile(errInfo);
      this.syntaxErrs += 1;
    }    

    private void reportErrToFile(String info){
      FileManager fileManager = new FileManager("C:/Users/chris/Documents/NetBeansProjects/CeI-PYI/src/main/java/symbolTable/Tokens.txt");
      fileManager.writeToFile(info);
    }

    private Integer convertToInteger(Object val){
      return Integer.parseInt(val.toString());
    }
    private Float convertToFloat(Object val){
      return Float.parseFloat(val.toString());
    }
    public void initParser(){
        //Object result;
        try {
            //BufferedReader br = new BufferedReader(new FileReader(file));
            parser codeParser = new parser(0,
                    s);
            Object result = codeParser.parse().value;
            //result = codeParser.parse().value;
            System.out.println("THE PARSER RESULT IS: " + result);
            String res = this.syntaxErrs > 0? "THERE WERE " + syntaxErrs + 
              "ERRORS. THE CODE CANNOT BE GENERATED." : "THE CODE CAN BE GENERATED.";
            System.out.println(res);
        } catch (Exception ex) {
            //System.err.println("AT THIS TIME RESULT IS: " + result);
            System.err.println("AN ERROR HAS BEEN FOUND. PROCEEDING WITH THE REST OF THE FILE.");
            ex.printStackTrace();
        }
    }



/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$parser$actions {
  private final parser parser;

  /** Constructor */
  CUP$parser$actions(parser parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$parser$do_action_part00000000(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$parser$result;

      /* select the action based on the action number */
      switch (CUP$parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= ini EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = start_val;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$parser$parser.done_parsing();
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // ini ::= main 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("ini",0, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // ini ::= function 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("ini",0, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // ini ::= main ini 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("ini",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // ini ::= function ini 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("ini",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // main ::= INT MAIN LCURLY return HASH RCURLY 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("main",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // main ::= INT MAIN LCURLY codeBlock return HASH RCURLY 
            {
              Object RESULT =null;
		int mleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int mright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		Object m = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		System.out.println("ESTE ES EL MAIN: " + m);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("main",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // return ::= RETURN ID 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("return",32, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // return ::= RETURN INTLIT 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("return",32, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // return ::= RETURN FLOATLIT 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("return",32, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // return ::= RETURN CHARLIT 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("return",32, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // function ::= INT FUNC RPAREN LCURLY codeBlock return HASH RCURLY 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("function",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // function ::= CHAR FUNC RPAREN LCURLY codeBlock return HASH RCURLY 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("function",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // function ::= FLOAT FUNC RPAREN LCURLY codeBlock return HASH RCURLY 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("function",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // function ::= INT FUNC parameters RPAREN LCURLY codeBlock return HASH RCURLY 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("function",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // function ::= CHAR FUNC parameters RPAREN LCURLY codeBlock return HASH RCURLY 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("function",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // function ::= FLOAT FUNC parameters RPAREN LCURLY codeBlock return HASH RCURLY 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("function",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // functionInv ::= FUNC RPAREN 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("functionInv",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // functionInv ::= FUNC parametersInv RPAREN 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("functionInv",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // parameters ::= INT ID 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 System.out.println("PARAM ES: " + id); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("parameters",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // parameters ::= CHAR ID 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("parameters",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // parameters ::= BOOL ID 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("parameters",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // parameters ::= ARRAY ID 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("parameters",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // parameters ::= STRING ID 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("parameters",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // parameters ::= INT ID COMMA parameters 
            {
              Object RESULT =null;
		int paramleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int paramright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String param = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("parameters",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // parameters ::= CHAR ID COMMA parameters 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("parameters",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // parameters ::= BOOL ID COMMA parameters 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("parameters",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // parameters ::= ARRAY ID COMMA parameters 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("parameters",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // parameters ::= STRING ID COMMA parameters 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("parameters",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // parametersInv ::= INTLIT 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("parametersInv",12, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // parametersInv ::= FLOATLIT 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("parametersInv",12, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // parametersInv ::= CHARLIT 
            {
              Object RESULT =null;
		 System.out.println("PARAM ES: "); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("parametersInv",12, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // parametersInv ::= STRINGLIT 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("parametersInv",12, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // parametersInv ::= boolLit 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("parametersInv",12, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // parametersInv ::= ID 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("parametersInv",12, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // parametersInv ::= functionInv 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("parametersInv",12, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // parametersInv ::= INTLIT COMMA parametersInv 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("parametersInv",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // parametersInv ::= FLOATLIT COMMA parametersInv 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("parametersInv",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // parametersInv ::= CHARLIT COMMA parametersInv 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("parametersInv",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // parametersInv ::= STRINGLIT COMMA parametersInv 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("parametersInv",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // parametersInv ::= boolLit COMMA parametersInv 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("parametersInv",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // parametersInv ::= ID COMMA parametersInv 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("parametersInv",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // parametersInv ::= functionInv COMMA parametersInv 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("parametersInv",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // codeBlock ::= expression 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("codeBlock",4, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // codeBlock ::= COMMENT 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("codeBlock",4, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // codeBlock ::= expression codeBlock 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("codeBlock",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // varCreationAsign ::= intCreationAssign 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("varCreationAsign",33, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // varCreationAsign ::= floatCreationAssign 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("varCreationAsign",33, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // varCreationAsign ::= charCreationAssign 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("varCreationAsign",33, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // varCreationAsign ::= stringCreationAssign 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("varCreationAsign",33, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // varCreationAsign ::= boolCreationAssign 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("varCreationAsign",33, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // varCreationAsign ::= INTARR INTLIT RSQUARE ID 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("varCreationAsign",33, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // varCreationAsign ::= INTARR INTLIT RSQUARE ID EQ ARRAYLIT 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("varCreationAsign",33, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // varCreationAsign ::= CHARARR INTLIT RSQUARE ID 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("varCreationAsign",33, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // varCreationAsign ::= CHARARR INTLIT RSQUARE ID EQ ARRAYLIT 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("varCreationAsign",33, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // intCreationAssign ::= INT ID 
            {
              Integer RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("intCreationAssign",39, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // intCreationAssign ::= INT ID EQ intMathExpression 
            {
              Integer RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Integer val = (Integer)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
              System.out.println("EL ID DE INT ES: " + id);
              System.out.println(" --> EL VALOR DE " + id + " ES: " + val);
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("intCreationAssign",39, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // floatCreationAssign ::= FLOAT ID 
            {
              Float RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
              System.out.println("EL ID DE FLOAT ES: " + id);
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("floatCreationAssign",40, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // floatCreationAssign ::= FLOAT ID EQ floatMathExpression 
            {
              Float RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Float val = (Float)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
              System.out.println("EL ID DE FLOAT ES: " + id);
              System.out.println(" --> EL VALOR DE " + id + " ES: " + val);
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("floatCreationAssign",40, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // charCreationAssign ::= CHAR ID 
            {
              Character RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
              RESULT = null;
              System.out.println("EL ID DE CHARLIT ES: " + id);
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("charCreationAssign",38, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // charCreationAssign ::= CHAR ID EQ CHARLIT 
            {
              Character RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object val = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
              RESULT = Character.valueOf(val.toString().charAt(0));
              System.out.println("EL ID DE CHARLIT ES: " + id);
              System.out.println(" --> EL VALOR DE " + id + " ES: " + val); 
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("charCreationAssign",38, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // charCreationAssign ::= CHAR ID EQ functionInv 
            {
              Character RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object val = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("charCreationAssign",38, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // stringCreationAssign ::= STRING ID 
            {
              String RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
              System.out.println("EL ID DE STRING ES: " + id);
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("stringCreationAssign",41, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // stringCreationAssign ::= STRING ID EQ STRINGLIT 
            {
              String RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String val = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
              System.out.println("EL ID DE STRING ES: " + id);
              System.out.println(" --> EL VALOR DE " + id + " ES: " + val);
              RESULT = val;
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("stringCreationAssign",41, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // boolCreationAssign ::= BOOL ID 
            {
              Boolean RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
              System.out.println("EL ID DE BOOL ES: " + id);
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("boolCreationAssign",42, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // boolCreationAssign ::= BOOL ID EQ boolLit 
            {
              Boolean RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Boolean val = (Boolean)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
              System.out.println("EL ID DE BOOL ES: " + id);
              System.out.println(" --> EL VALOR DE " + id + " ES: " + val);
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("boolCreationAssign",42, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // boolCreationAssign ::= BOOL ID EQ logicalExpression 
            {
              Boolean RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("boolCreationAssign",42, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // varAsign ::= ID EQ mathExpression 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("varAsign",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // arrayAccess ::= ID LSQUARE INTLIT RSQUARE 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("arrayAccess",30, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // arrayAccess ::= ID LSQUARE ID RSQUARE 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("arrayAccess",30, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // arrayValModification ::= ID LSQUARE INTLIT RSQUARE EQ mathExpression 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("arrayValModification",31, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // arrayValModification ::= ID LSQUARE ID RSQUARE EQ mathExpression 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("arrayValModification",31, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // printFunction ::= PRINT LPAREN INTLIT RPAREN 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("printFunction",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // printFunction ::= PRINT LPAREN FLOATLIT RPAREN 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("printFunction",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // printFunction ::= PRINT LPAREN CHARLIT RPAREN 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("printFunction",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // printFunction ::= PRINT LPAREN STRINGLIT RPAREN 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("printFunction",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // printFunction ::= PRINT LPAREN ID RPAREN 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("printFunction",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // readFunction ::= READ 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("readFunction",7, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // expression ::= logRelExpression HASH 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("expression",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // expression ::= varCreationAsign HASH 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("expression",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // expression ::= varAsign HASH 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("expression",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // expression ::= printFunction HASH 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("expression",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // expression ::= readFunction HASH 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("expression",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // expression ::= arrayValModification HASH 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("expression",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // expression ::= if 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("expression",8, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // expression ::= while 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("expression",8, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // expression ::= for 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("expression",8, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // expression ::= error HASH 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("expression",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // boolLit ::= TRUE 
            {
              Boolean RESULT =null;
		 RESULT = true; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("boolLit",45, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // boolLit ::= FALSE 
            {
              Boolean RESULT =null;
		 RESULT = false; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("boolLit",45, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // unaryExpression ::= ID PADD 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("unaryExpression",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // unaryExpression ::= ID PSUBS 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("unaryExpression",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // unaryExpression ::= INTLIT PADD 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("unaryExpression",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // unaryExpression ::= INTLIT PSUBS 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("unaryExpression",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // unaryExpression ::= FLOATLIT PADD 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("unaryExpression",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // unaryExpression ::= FLOATLIT PSUBS 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("unaryExpression",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 96: // mathExpression ::= intMathExpression 
            {
              Object RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Integer val = (Integer)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
              System.out.println("EL RESULTADO FINAL ES: " + val);
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("mathExpression",34, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 97: // mathExpression ::= floatMathExpression 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("mathExpression",34, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 98: // intMathExpression ::= intMathExpression ADD intFactor 
            {
              Integer RESULT =null;
		int op1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int op1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Integer op1 = (Integer)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int op2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int op2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Integer op2 = (Integer)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
              //System.out.println("HAY OPERACION: " + op1 + " + " + op2 + " = " + (op1 + op2));
              RESULT = op1 + op2;
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("intMathExpression",36, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 99: // intMathExpression ::= intMathExpression SUBS intFactor 
            {
              Integer RESULT =null;
		int op1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int op1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Integer op1 = (Integer)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int op2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int op2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Integer op2 = (Integer)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
              System.out.println("HAY OPERACION: " + op1 + " + " + op2 + " = " + (op1 + op2));
              RESULT = op1 - op2;
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("intMathExpression",36, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 100: // intMathExpression ::= intFactor 
            {
              Integer RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Integer val = (Integer)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
              RESULT = convertToInteger(val);
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("intMathExpression",36, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 101: // intFactor ::= intFactor MULT intTerm 
            {
              Integer RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int fright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Integer f = (Integer)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Integer t = (Integer)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 
              RESULT = convertToInteger(f) * convertToInteger(t); 
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("intFactor",47, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 102: // intFactor ::= intFactor DIV intTerm 
            {
              Integer RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int fright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Integer f = (Integer)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Integer t = (Integer)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 
              RESULT = convertToInteger(f) / convertToInteger(t); 
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("intFactor",47, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 103: // intFactor ::= intTerm 
            {
              Integer RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Integer t = (Integer)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 
              RESULT = convertToInteger(t); 
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("intFactor",47, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 104: // intTerm ::= INTLIT 
            {
              Integer RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object n = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 
              RESULT = convertToInteger(n); 
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("intTerm",46, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 105: // floatMathExpression ::= floatMathExpression ADD floatFactor 
            {
              Float RESULT =null;
		int op1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int op1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Float op1 = (Float)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int op2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int op2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Float op2 = (Float)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
              //System.out.println("HAY OPERACION: " + op1 + " + " + op2 + " = " + (op1 + op2));
              RESULT = op1 + op2;
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("floatMathExpression",37, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 106: // floatMathExpression ::= floatMathExpression SUBS floatFactor 
            {
              Float RESULT =null;
		int op1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int op1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Float op1 = (Float)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int op2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int op2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Float op2 = (Float)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
              System.out.println("HAY OPERACION: " + op1 + " + " + op2 + " = " + (op1 + op2));
              RESULT = op1 - op2;
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("floatMathExpression",37, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 107: // floatMathExpression ::= floatFactor 
            {
              Float RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Float val = (Float)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
              RESULT = convertToFloat(val);
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("floatMathExpression",37, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 108: // floatFactor ::= floatFactor MULT floatTerm 
            {
              Float RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int fright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Float f = (Float)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Float t = (Float)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 
              RESULT = convertToFloat(f) * convertToFloat(t); 
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("floatFactor",49, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 109: // floatFactor ::= floatFactor DIV floatTerm 
            {
              Float RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int fright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Float f = (Float)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Float t = (Float)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 
              RESULT = convertToFloat(f) / convertToFloat(t); 
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("floatFactor",49, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 110: // floatFactor ::= floatTerm 
            {
              Float RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Float t = (Float)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 
              RESULT = convertToFloat(t); 
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("floatFactor",49, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 111: // floatTerm ::= FLOATLIT 
            {
              Float RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object n = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 
              RESULT = convertToFloat(n); 
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("floatTerm",48, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 112: // logRelExpression ::= logicalExpression 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("logRelExpression",9, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 113: // logRelExpression ::= relationalExpression 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("logRelExpression",9, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 114: // relationalExpression ::= relationalOperand relationalOperator relationalOperand 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("relationalExpression",18, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 115: // logicalExpression ::= logicalOperand logicalOperator logicalExpr 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("logicalExpression",16, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 116: // logicalExpr ::= logicalOperand 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("logicalExpr",17, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 117: // logicalExpr ::= logicalOperand logicalOperator logicalExpr 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("logicalExpr",17, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 118: // mathOperand ::= intMathOperand 
            {
              Object RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Integer val = (Integer)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = val; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("mathOperand",35, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 119: // mathOperand ::= floatMathOperand 
            {
              Object RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Float val = (Float)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = val; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("mathOperand",35, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 120: // intMathOperand ::= INTLIT 
            {
              Integer RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object val = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = convertToInteger(val); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("intMathOperand",43, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 121: // floatMathOperand ::= FLOATLIT 
            {
              Float RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object val = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = convertToFloat(val); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("floatMathOperand",44, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 122: // relationalOperand ::= mathOperand 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("relationalOperand",19, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 123: // relationalOperand ::= LPAREN mathExpression RPAREN 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("relationalOperand",19, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 124: // logicalOperand ::= ID 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("logicalOperand",20, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 125: // logicalOperand ::= boolLit 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("logicalOperand",20, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 126: // logicalOperand ::= functionInv 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("logicalOperand",20, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 127: // logicalOperand ::= LPAREN relationalExpression RPAREN 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("logicalOperand",20, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 128: // mathOperator ::= ADD 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("mathOperator",21, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 129: // mathOperator ::= SUBS 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("mathOperator",21, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 130: // mathOperator ::= DIV 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("mathOperator",21, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 131: // mathOperator ::= MULT 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("mathOperator",21, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 132: // mathOperator ::= EXP 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("mathOperator",21, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 133: // mathOperator ::= MOD 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("mathOperator",21, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 134: // relationalOperator ::= GTE 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("relationalOperator",22, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 135: // relationalOperator ::= GT 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("relationalOperator",22, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 136: // relationalOperator ::= LTE 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("relationalOperator",22, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 137: // relationalOperator ::= LT 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("relationalOperator",22, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 138: // logicalOperator ::= AND 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("logicalOperator",23, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 139: // logicalOperator ::= OR 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("logicalOperator",23, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 140: // logicalOperator ::= EQEQ 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("logicalOperator",23, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 141: // logicalOperator ::= NOT 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("logicalOperator",23, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 142: // if ::= IF LPAREN logRelExpression RPAREN THEN LCURLY codeBlock RCURLY 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("if",24, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 143: // if ::= IF LPAREN logRelExpression RPAREN THEN LCURLY codeBlock RCURLY ELSE LCURLY codeBlock RCURLY 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("if",24, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-11)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 144: // while ::= WHILE LPAREN logRelExpression RPAREN LCURLY codeBlock RCURLY 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("while",25, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 145: // for ::= FOR LPAREN INT ID EQ zero COMMA logRelExpression COMMA unaryExpression RPAREN LCURLY codeBlock RCURLY 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("for",26, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-13)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 146: // zero ::= INTLIT 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("zero",29, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$parser$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$parser$do_action(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
              return CUP$parser$do_action_part00000000(
                               CUP$parser$act_num,
                               CUP$parser$parser,
                               CUP$parser$stack,
                               CUP$parser$top);
    }
}

}
