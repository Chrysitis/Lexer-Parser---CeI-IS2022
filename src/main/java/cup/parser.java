
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

package cup;

import java_cup.runtime.*;
import jflex.*;
import java.io.FileReader;
import java.io.BufferedReader;
import fileManager.*;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class parser extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return sym.class;
}

  /** Default constructor. */
  @Deprecated
  public parser() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\217\000\002\002\004\000\002\002\003\000\002\002" +
    "\003\000\002\002\004\000\002\002\004\000\002\003\010" +
    "\000\002\003\011\000\002\046\004\000\002\046\004\000" +
    "\002\046\004\000\002\046\004\000\002\004\012\000\002" +
    "\004\012\000\002\004\012\000\002\004\013\000\002\004" +
    "\013\000\002\004\013\000\002\005\004\000\002\005\005" +
    "\000\002\017\004\000\002\017\004\000\002\017\004\000" +
    "\002\017\004\000\002\017\004\000\002\017\006\000\002" +
    "\017\006\000\002\017\006\000\002\017\006\000\002\017" +
    "\006\000\002\020\003\000\002\020\003\000\002\020\003" +
    "\000\002\020\003\000\002\020\003\000\002\020\003\000" +
    "\002\020\003\000\002\020\005\000\002\020\005\000\002" +
    "\020\005\000\002\020\005\000\002\020\005\000\002\020" +
    "\005\000\002\020\005\000\002\006\003\000\002\006\003" +
    "\000\002\006\004\000\002\007\004\000\002\007\006\000" +
    "\002\007\004\000\002\007\006\000\002\007\004\000\002" +
    "\007\006\000\002\007\006\000\002\007\004\000\002\007" +
    "\006\000\002\007\006\000\002\007\006\000\002\007\010" +
    "\000\002\007\006\000\002\007\010\000\002\007\004\000" +
    "\002\007\006\000\002\010\005\000\002\044\006\000\002" +
    "\044\006\000\002\045\010\000\002\045\010\000\002\011" +
    "\006\000\002\011\006\000\002\011\006\000\002\011\006" +
    "\000\002\011\006\000\002\012\003\000\002\013\003\000" +
    "\002\013\004\000\002\013\004\000\002\013\004\000\002" +
    "\013\004\000\002\013\004\000\002\013\004\000\002\013" +
    "\004\000\002\013\004\000\002\013\004\000\002\013\003" +
    "\000\002\013\003\000\002\013\003\000\002\013\004\000" +
    "\002\021\003\000\002\021\003\000\002\021\003\000\002" +
    "\022\003\000\002\022\003\000\002\023\003\000\002\023" +
    "\003\000\002\024\003\000\002\024\003\000\002\016\004" +
    "\000\002\016\004\000\002\016\004\000\002\016\004\000" +
    "\002\016\004\000\002\016\004\000\002\014\003\000\002" +
    "\014\005\000\002\015\003\000\002\015\003\000\002\027" +
    "\005\000\002\025\005\000\002\026\003\000\002\026\005" +
    "\000\002\030\003\000\002\030\003\000\002\030\003\000" +
    "\002\030\003\000\002\030\003\000\002\031\003\000\002" +
    "\031\005\000\002\032\003\000\002\032\003\000\002\032" +
    "\003\000\002\032\005\000\002\033\003\000\002\033\003" +
    "\000\002\033\003\000\002\033\003\000\002\033\003\000" +
    "\002\033\003\000\002\034\003\000\002\034\003\000\002" +
    "\034\003\000\002\034\003\000\002\035\003\000\002\035" +
    "\003\000\002\035\003\000\002\035\003\000\002\036\012" +
    "\000\002\036\016\000\002\037\011\000\002\040\020\000" +
    "\002\041\011\000\002\042\006\000\002\042\007\000\002" +
    "\043\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\u012e\000\010\004\011\005\010\007\007\001\002\000" +
    "\012\002\000\004\011\005\010\007\007\001\002\000\012" +
    "\002\uffff\004\011\005\010\007\007\001\002\000\004\002" +
    "\u012e\001\002\000\004\031\u0120\001\002\000\004\031\u0112" +
    "\001\002\000\006\030\013\031\012\001\002\000\016\004" +
    "\366\006\364\007\365\010\361\011\367\050\362\001\002" +
    "\000\004\051\014\001\002\000\062\003\050\004\027\005" +
    "\067\006\040\007\020\010\071\012\055\013\016\016\043" +
    "\021\033\023\065\027\046\031\062\032\063\033\075\034" +
    "\023\035\047\036\074\037\037\040\052\041\060\042\021" +
    "\047\025\077\044\001\002\000\010\044\uff99\050\uff99\056" +
    "\uff99\001\002\000\004\037\354\001\002\000\004\044\353" +
    "\001\002\000\004\077\347\001\002\000\116\003\uffa4\004" +
    "\uffa4\005\uffa4\006\uffa4\007\uffa4\010\uffa4\012\uffa4\013\uffa4" +
    "\016\uffa4\021\uffa4\023\uffa4\027\uffa4\031\uffa4\032\uffa4\033" +
    "\uffa4\034\uffa4\035\uffa4\036\uffa4\037\uffa4\040\uffa4\041\uffa4" +
    "\042\uffa4\044\uffa4\047\uffa4\050\uffa4\052\uffa4\056\uffa4\060" +
    "\uffa4\061\uffa4\062\uffa4\063\uffa4\064\uffa4\065\uffa4\070\uffa4" +
    "\071\uffa4\072\uffa4\073\uffa4\077\uffa4\001\002\000\122\003" +
    "\uff92\004\uff92\005\uff92\006\uff92\007\uff92\010\uff92\012\uff92" +
    "\013\uff92\016\uff92\021\uff92\023\uff92\027\uff92\031\uff92\032" +
    "\uff92\033\uff92\034\uff92\035\uff92\036\uff92\037\uff92\040\uff92" +
    "\041\uff92\042\uff92\044\346\046\uff8a\047\uff92\052\uff92\060" +
    "\uff92\061\uff92\062\uff92\063\uff92\064\uff92\065\uff92\070\uff92" +
    "\071\uff92\072\uff92\073\uff92\074\uff8a\075\uff8a\076\uff8a\077" +
    "\uff92\001\002\000\006\027\uffd5\052\uffd5\001\002\000\112" +
    "\003\uff90\004\uff90\005\uff90\006\uff90\007\uff90\010\uff90\012" +
    "\uff90\013\uff90\016\uff90\021\uff90\023\uff90\027\uff90\031\uff90" +
    "\032\uff90\033\uff90\034\uff90\035\uff90\036\uff90\037\uff90\040" +
    "\uff90\041\uff90\042\uff90\044\345\047\uff90\052\uff90\060\uff90" +
    "\061\uff90\062\uff90\063\uff90\064\uff90\065\uff90\070\uff90\071" +
    "\uff90\072\uff90\073\uff90\077\uff90\001\002\000\024\031\062" +
    "\035\047\036\074\037\037\040\052\041\060\042\021\047" +
    "\220\077\127\001\002\000\116\003\uff93\004\uff93\005\uff93" +
    "\006\uff93\007\uff93\010\uff93\012\uff93\013\uff93\016\uff93\021" +
    "\uff93\023\uff93\027\uff93\031\uff93\032\uff93\033\uff93\034\uff93" +
    "\035\uff93\036\uff93\037\uff93\040\uff93\041\uff93\042\uff93\044" +
    "\uff93\047\uff93\050\uff93\052\uff93\056\uff93\060\uff93\061\uff93" +
    "\062\uff93\063\uff93\064\uff93\065\uff93\070\uff93\071\uff93\072" +
    "\uff93\073\uff93\077\uff93\001\002\000\004\077\342\001\002" +
    "\000\120\003\uffa8\004\uffa8\005\uffa8\006\uffa8\007\uffa8\010" +
    "\uffa8\012\uffa8\013\uffa8\016\uffa8\021\uffa8\023\uffa8\027\uffa8" +
    "\031\uffa8\032\uffa8\033\uffa8\034\uffa8\035\uffa8\036\uffa8\037" +
    "\uffa8\040\uffa8\041\uffa8\042\uffa8\046\uff8b\047\uffa8\052\uffa8" +
    "\060\uffa8\061\uffa8\062\uffa8\063\uffa8\064\uffa8\065\uffa8\070" +
    "\uffa8\071\uffa8\072\uffa8\073\uffa8\074\uff8b\075\uff8b\076\uff8b" +
    "\077\uffa8\001\002\000\004\027\046\001\002\000\012\046" +
    "\331\074\326\075\330\076\327\001\002\000\004\047\304" +
    "\001\002\000\064\003\uffb8\004\uffb8\005\uffb8\006\uffb8\007" +
    "\uffb8\010\uffb8\012\uffb8\013\uffb8\016\uffb8\021\uffb8\023\uffb8" +
    "\027\uffb8\031\uffb8\032\uffb8\033\uffb8\034\uffb8\035\uffb8\036" +
    "\uffb8\037\uffb8\040\uffb8\041\uffb8\042\uffb8\047\uffb8\052\uffb8" +
    "\077\uffb8\001\002\000\112\003\uff9b\004\uff9b\005\uff9b\006" +
    "\uff9b\007\uff9b\010\uff9b\012\uff9b\013\uff9b\016\uff9b\021\uff9b" +
    "\023\uff9b\027\uff9b\031\uff9b\032\uff9b\033\uff9b\034\uff9b\035" +
    "\uff9b\036\uff9b\037\uff9b\040\uff9b\041\uff9b\042\uff9b\047\uff9b" +
    "\050\uff9b\052\uff9b\060\133\061\137\062\132\063\135\064" +
    "\131\065\134\070\uff8e\071\uff8e\072\uff8e\073\uff8e\077\uff9b" +
    "\001\002\000\116\003\uffaa\004\uffaa\005\uffaa\006\uffaa\007" +
    "\uffaa\010\uffaa\012\uffaa\013\uffaa\016\uffaa\021\uffaa\023\uffaa" +
    "\027\uffaa\031\uffaa\032\uffaa\033\uffaa\034\uffaa\035\uffaa\036" +
    "\uffaa\037\uffaa\040\uffaa\041\uffaa\042\uffaa\044\uffaa\047\uffaa" +
    "\050\uffaa\052\uffaa\056\uffaa\060\uffaa\061\uffaa\062\uffaa\063" +
    "\uffaa\064\uffaa\065\uffaa\070\uffaa\071\uffaa\072\uffaa\073\uffaa" +
    "\077\uffaa\001\002\000\122\003\uffa7\004\uffa7\005\uffa7\006" +
    "\uffa7\007\uffa7\010\uffa7\012\uffa7\013\uffa7\016\uffa7\021\uffa7" +
    "\023\uffa7\027\uffa7\031\uffa7\032\uffa7\033\uffa7\034\uffa7\035" +
    "\uffa7\036\uffa7\037\uffa7\040\uffa7\041\uffa7\042\uffa7\044\uffa7" +
    "\047\uffa7\050\uffa7\052\uffa7\056\uffa7\060\uffa7\061\uffa7\062" +
    "\uffa7\063\uffa7\064\uffa7\065\uffa7\066\303\067\302\070\uffa7" +
    "\071\uffa7\072\uffa7\073\uffa7\077\uffa7\001\002\000\004\077" +
    "\271\001\002\000\116\003\uffa9\004\uffa9\005\uffa9\006\uffa9" +
    "\007\uffa9\010\uffa9\012\uffa9\013\uffa9\016\uffa9\021\uffa9\023" +
    "\uffa9\027\uffa9\031\uffa9\032\uffa9\033\uffa9\034\uffa9\035\uffa9" +
    "\036\uffa9\037\uffa9\040\uffa9\041\uffa9\042\uffa9\044\uffa9\047" +
    "\uffa9\050\uffa9\052\uffa9\056\uffa9\060\uffa9\061\uffa9\062\uffa9" +
    "\063\uffa9\064\uffa9\065\uffa9\070\uffa9\071\uffa9\072\uffa9\073" +
    "\uffa9\077\uffa9\001\002\000\010\044\uff98\050\uff98\056\uff98" +
    "\001\002\000\004\047\256\001\002\000\130\003\uff91\004" +
    "\uff91\005\uff91\006\uff91\007\uff91\010\uff91\012\uff91\013\uff91" +
    "\016\uff91\021\uff91\023\uff91\027\uff91\031\uff91\032\uff91\033" +
    "\uff91\034\uff91\035\uff91\036\uff91\037\uff91\040\uff91\041\uff91" +
    "\042\uff91\045\244\046\uff8c\047\uff91\052\uff91\053\243\060" +
    "\uff91\061\uff91\062\uff91\063\uff91\064\uff91\065\uff91\066\143" +
    "\067\142\070\uff91\071\uff91\072\uff91\073\uff91\074\uff8c\075" +
    "\uff8c\076\uff8c\077\uff91\001\002\000\064\003\050\004\027" +
    "\005\067\006\040\007\020\010\071\012\055\013\016\016" +
    "\043\021\033\023\065\027\uffd6\031\062\032\063\033\075" +
    "\034\023\035\047\036\074\037\037\040\052\041\060\042" +
    "\021\047\025\052\uffd6\077\044\001\002\000\012\037\237" +
    "\040\240\041\241\077\236\001\002\000\126\003\uffa3\004" +
    "\uffa3\005\uffa3\006\uffa3\007\uffa3\010\uffa3\012\uffa3\013\uffa3" +
    "\016\uffa3\021\uffa3\023\uffa3\027\uffa3\031\uffa3\032\uffa3\033" +
    "\uffa3\034\uffa3\035\uffa3\036\uffa3\037\uffa3\040\uffa3\041\uffa3" +
    "\042\uffa3\044\uffa3\046\uffa3\047\uffa3\050\uffa3\052\uffa3\056" +
    "\uffa3\060\uffa3\061\uffa3\062\uffa3\063\uffa3\064\uffa3\065\uffa3" +
    "\070\uffa3\071\uffa3\072\uffa3\073\uffa3\074\uffa3\075\uffa3\076" +
    "\uffa3\077\uffa3\001\002\000\004\044\235\001\002\000\004" +
    "\044\234\001\002\000\122\003\uffa6\004\uffa6\005\uffa6\006" +
    "\uffa6\007\uffa6\010\uffa6\012\uffa6\013\uffa6\016\uffa6\021\uffa6" +
    "\023\uffa6\027\uffa6\031\uffa6\032\uffa6\033\uffa6\034\uffa6\035" +
    "\uffa6\036\uffa6\037\uffa6\040\uffa6\041\uffa6\042\uffa6\044\uffa6" +
    "\047\uffa6\050\uffa6\052\uffa6\056\uffa6\060\uffa6\061\uffa6\062" +
    "\uffa6\063\uffa6\064\uffa6\065\uffa6\066\233\067\232\070\uffa6" +
    "\071\uffa6\072\uffa6\073\uffa6\077\uffa6\001\002\000\064\003" +
    "\uffad\004\uffad\005\uffad\006\uffad\007\uffad\010\uffad\012\uffad" +
    "\013\uffad\016\uffad\021\uffad\023\uffad\027\uffad\031\uffad\032" +
    "\uffad\033\uffad\034\uffad\035\uffad\036\uffad\037\uffad\040\uffad" +
    "\041\uffad\042\uffad\047\uffad\052\uffad\077\uffad\001\002\000" +
    "\064\003\uffae\004\uffae\005\uffae\006\uffae\007\uffae\010\uffae" +
    "\012\uffae\013\uffae\016\uffae\021\uffae\023\uffae\027\uffae\031" +
    "\uffae\032\uffae\033\uffae\034\uffae\035\uffae\036\uffae\037\uffae" +
    "\040\uffae\041\uffae\042\uffae\047\uffae\052\uffae\077\uffae\001" +
    "\002\000\004\037\225\001\002\000\004\044\224\001\002" +
    "\000\004\044\223\001\002\000\116\003\uffa5\004\uffa5\005" +
    "\uffa5\006\uffa5\007\uffa5\010\uffa5\012\uffa5\013\uffa5\016\uffa5" +
    "\021\uffa5\023\uffa5\027\uffa5\031\uffa5\032\uffa5\033\uffa5\034" +
    "\uffa5\035\uffa5\036\uffa5\037\uffa5\040\uffa5\041\uffa5\042\uffa5" +
    "\044\uffa5\047\uffa5\050\uffa5\052\uffa5\056\uffa5\060\uffa5\061" +
    "\uffa5\062\uffa5\063\uffa5\064\uffa5\065\uffa5\070\uffa5\071\uffa5" +
    "\072\uffa5\073\uffa5\077\uffa5\001\002\000\012\070\212\071" +
    "\214\072\215\073\213\001\002\000\024\031\062\035\047" +
    "\036\074\037\162\040\170\041\167\042\172\050\166\077" +
    "\165\001\002\000\004\044\uffb9\001\002\000\064\003\uffac" +
    "\004\uffac\005\uffac\006\uffac\007\uffac\010\uffac\012\uffac\013" +
    "\uffac\016\uffac\021\uffac\023\uffac\027\uffac\031\uffac\032\uffac" +
    "\033\uffac\034\uffac\035\uffac\036\uffac\037\uffac\040\uffac\041" +
    "\uffac\042\uffac\047\uffac\052\uffac\077\uffac\001\002\000\004" +
    "\047\151\001\002\000\004\044\150\001\002\000\004\077" +
    "\120\001\002\000\004\044\117\001\002\000\004\077\114" +
    "\001\002\000\112\003\uff8f\004\uff8f\005\uff8f\006\uff8f\007" +
    "\uff8f\010\uff8f\012\uff8f\013\uff8f\016\uff8f\021\uff8f\023\uff8f" +
    "\027\uff8f\031\uff8f\032\uff8f\033\uff8f\034\uff8f\035\uff8f\036" +
    "\uff8f\037\uff8f\040\uff8f\041\uff8f\042\uff8f\044\113\047\uff8f" +
    "\052\uff8f\060\uff8f\061\uff8f\062\uff8f\063\uff8f\064\uff8f\065" +
    "\uff8f\070\uff8f\071\uff8f\072\uff8f\073\uff8f\077\uff8f\001\002" +
    "\000\004\044\111\001\002\000\126\003\uffa2\004\uffa2\005" +
    "\uffa2\006\uffa2\007\uffa2\010\uffa2\012\uffa2\013\uffa2\016\uffa2" +
    "\021\uffa2\023\uffa2\027\uffa2\031\uffa2\032\uffa2\033\uffa2\034" +
    "\uffa2\035\uffa2\036\uffa2\037\uffa2\040\uffa2\041\uffa2\042\uffa2" +
    "\044\uffa2\046\uffa2\047\uffa2\050\uffa2\052\uffa2\056\uffa2\060" +
    "\uffa2\061\uffa2\062\uffa2\063\uffa2\064\uffa2\065\uffa2\070\uffa2" +
    "\071\uffa2\072\uffa2\073\uffa2\074\uffa2\075\uffa2\076\uffa2\077" +
    "\uffa2\001\002\000\004\047\076\001\002\000\014\037\100" +
    "\040\101\041\103\042\102\077\077\001\002\000\004\050" +
    "\110\001\002\000\004\050\107\001\002\000\004\050\106" +
    "\001\002\000\004\050\105\001\002\000\004\050\104\001" +
    "\002\000\004\044\uffbc\001\002\000\004\044\uffbb\001\002" +
    "\000\004\044\uffbd\001\002\000\004\044\uffbe\001\002\000" +
    "\004\044\uffba\001\002\000\004\052\112\001\002\000\012" +
    "\002\ufffc\004\ufffc\005\ufffc\007\ufffc\001\002\000\064\003" +
    "\uffb7\004\uffb7\005\uffb7\006\uffb7\007\uffb7\010\uffb7\012\uffb7" +
    "\013\uffb7\016\uffb7\021\uffb7\023\uffb7\027\uffb7\031\uffb7\032" +
    "\uffb7\033\uffb7\034\uffb7\035\uffb7\036\uffb7\037\uffb7\040\uffb7" +
    "\041\uffb7\042\uffb7\047\uffb7\052\uffb7\077\uffb7\001\002\000" +
    "\006\044\uffc5\045\115\001\002\000\004\042\116\001\002" +
    "\000\004\044\uffc4\001\002\000\064\003\uffb4\004\uffb4\005" +
    "\uffb4\006\uffb4\007\uffb4\010\uffb4\012\uffb4\013\uffb4\016\uffb4" +
    "\021\uffb4\023\uffb4\027\uffb4\031\uffb4\032\uffb4\033\uffb4\034" +
    "\uffb4\035\uffb4\036\uffb4\037\uffb4\040\uffb4\041\uffb4\042\uffb4" +
    "\047\uffb4\052\uffb4\077\uffb4\001\002\000\006\044\uffd1\045" +
    "\121\001\002\000\022\031\062\035\047\036\074\037\037" +
    "\040\052\041\060\042\021\077\127\001\002\000\116\003" +
    "\uffa8\004\uffa8\005\uffa8\006\uffa8\007\uffa8\010\uffa8\012\uffa8" +
    "\013\uffa8\016\uffa8\021\uffa8\023\uffa8\027\uffa8\031\uffa8\032" +
    "\uffa8\033\uffa8\034\uffa8\035\uffa8\036\uffa8\037\uffa8\040\uffa8" +
    "\041\uffa8\042\uffa8\044\uffa8\047\uffa8\050\uffa8\052\uffa8\056" +
    "\uffa8\060\uffa8\061\uffa8\062\uffa8\063\uffa8\064\uffa8\065\uffa8" +
    "\070\uffa8\071\uffa8\072\uffa8\073\uffa8\077\uffa8\001\002\000" +
    "\004\044\uffd0\001\002\000\116\003\uff90\004\uff90\005\uff90" +
    "\006\uff90\007\uff90\010\uff90\012\uff90\013\uff90\016\uff90\021" +
    "\uff90\023\uff90\027\uff90\031\uff90\032\uff90\033\uff90\034\uff90" +
    "\035\uff90\036\uff90\037\uff90\040\uff90\041\uff90\042\uff90\044" +
    "\uff90\047\uff90\050\uff90\052\uff90\056\uff90\060\uff90\061\uff90" +
    "\062\uff90\063\uff90\064\uff90\065\uff90\070\uff90\071\uff90\072" +
    "\uff90\073\uff90\077\uff90\001\002\000\116\003\uff92\004\uff92" +
    "\005\uff92\006\uff92\007\uff92\010\uff92\012\uff92\013\uff92\016" +
    "\uff92\021\uff92\023\uff92\027\uff92\031\uff92\032\uff92\033\uff92" +
    "\034\uff92\035\uff92\036\uff92\037\uff92\040\uff92\041\uff92\042" +
    "\uff92\044\uff92\047\uff92\050\uff92\052\uff92\056\uff92\060\uff92" +
    "\061\uff92\062\uff92\063\uff92\064\uff92\065\uff92\070\uff92\071" +
    "\uff92\072\uff92\073\uff92\077\uff92\001\002\000\116\003\uff8f" +
    "\004\uff8f\005\uff8f\006\uff8f\007\uff8f\010\uff8f\012\uff8f\013" +
    "\uff8f\016\uff8f\021\uff8f\023\uff8f\027\uff8f\031\uff8f\032\uff8f" +
    "\033\uff8f\034\uff8f\035\uff8f\036\uff8f\037\uff8f\040\uff8f\041" +
    "\uff8f\042\uff8f\044\uff8f\047\uff8f\050\uff8f\052\uff8f\056\uff8f" +
    "\060\uff8f\061\uff8f\062\uff8f\063\uff8f\064\uff8f\065\uff8f\070" +
    "\uff8f\071\uff8f\072\uff8f\073\uff8f\077\uff8f\001\002\000\124" +
    "\003\uff91\004\uff91\005\uff91\006\uff91\007\uff91\010\uff91\012" +
    "\uff91\013\uff91\016\uff91\021\uff91\023\uff91\027\uff91\031\uff91" +
    "\032\uff91\033\uff91\034\uff91\035\uff91\036\uff91\037\uff91\040" +
    "\uff91\041\uff91\042\uff91\044\uff91\047\uff91\050\uff91\052\uff91" +
    "\053\141\056\uff91\060\uff91\061\uff91\062\uff91\063\uff91\064" +
    "\uff91\065\uff91\066\143\067\142\070\uff91\071\uff91\072\uff91" +
    "\073\uff91\077\uff91\001\002\000\104\003\uff9b\004\uff9b\005" +
    "\uff9b\006\uff9b\007\uff9b\010\uff9b\012\uff9b\013\uff9b\016\uff9b" +
    "\021\uff9b\023\uff9b\027\uff9b\031\uff9b\032\uff9b\033\uff9b\034" +
    "\uff9b\035\uff9b\036\uff9b\037\uff9b\040\uff9b\041\uff9b\042\uff9b" +
    "\044\uff9b\047\uff9b\050\uff9b\052\uff9b\060\133\061\137\062" +
    "\132\063\135\064\131\065\134\077\uff9b\001\002\000\022" +
    "\031\uff83\035\uff83\036\uff83\037\uff83\040\uff83\041\uff83\042" +
    "\uff83\077\uff83\001\002\000\022\031\uff85\035\uff85\036\uff85" +
    "\037\uff85\040\uff85\041\uff85\042\uff85\077\uff85\001\002\000" +
    "\022\031\uff88\035\uff88\036\uff88\037\uff88\040\uff88\041\uff88" +
    "\042\uff88\077\uff88\001\002\000\022\031\uff84\035\uff84\036" +
    "\uff84\037\uff84\040\uff84\041\uff84\042\uff84\077\uff84\001\002" +
    "\000\022\031\uff86\035\uff86\036\uff86\037\uff86\040\uff86\041" +
    "\uff86\042\uff86\077\uff86\001\002\000\022\031\062\035\047" +
    "\036\074\037\037\040\052\041\060\042\021\077\127\001" +
    "\002\000\022\031\uff87\035\uff87\036\uff87\037\uff87\040\uff87" +
    "\041\uff87\042\uff87\077\uff87\001\002\000\070\003\uff9a\004" +
    "\uff9a\005\uff9a\006\uff9a\007\uff9a\010\uff9a\012\uff9a\013\uff9a" +
    "\016\uff9a\021\uff9a\023\uff9a\027\uff9a\031\uff9a\032\uff9a\033" +
    "\uff9a\034\uff9a\035\uff9a\036\uff9a\037\uff9a\040\uff9a\041\uff9a" +
    "\042\uff9a\044\uff9a\047\uff9a\050\uff9a\052\uff9a\077\uff9a\001" +
    "\002\000\006\037\145\077\144\001\002\000\116\003\uffa0" +
    "\004\uffa0\005\uffa0\006\uffa0\007\uffa0\010\uffa0\012\uffa0\013" +
    "\uffa0\016\uffa0\021\uffa0\023\uffa0\027\uffa0\031\uffa0\032\uffa0" +
    "\033\uffa0\034\uffa0\035\uffa0\036\uffa0\037\uffa0\040\uffa0\041" +
    "\uffa0\042\uffa0\044\uffa0\047\uffa0\050\uffa0\052\uffa0\056\uffa0" +
    "\060\uffa0\061\uffa0\062\uffa0\063\uffa0\064\uffa0\065\uffa0\070" +
    "\uffa0\071\uffa0\072\uffa0\073\uffa0\077\uffa0\001\002\000\116" +
    "\003\uffa1\004\uffa1\005\uffa1\006\uffa1\007\uffa1\010\uffa1\012" +
    "\uffa1\013\uffa1\016\uffa1\021\uffa1\023\uffa1\027\uffa1\031\uffa1" +
    "\032\uffa1\033\uffa1\034\uffa1\035\uffa1\036\uffa1\037\uffa1\040" +
    "\uffa1\041\uffa1\042\uffa1\044\uffa1\047\uffa1\050\uffa1\052\uffa1" +
    "\056\uffa1\060\uffa1\061\uffa1\062\uffa1\063\uffa1\064\uffa1\065" +
    "\uffa1\070\uffa1\071\uffa1\072\uffa1\073\uffa1\077\uffa1\001\002" +
    "\000\004\054\147\001\002\000\004\054\146\001\002\000" +
    "\116\003\uffc2\004\uffc2\005\uffc2\006\uffc2\007\uffc2\010\uffc2" +
    "\012\uffc2\013\uffc2\016\uffc2\021\uffc2\023\uffc2\027\uffc2\031" +
    "\uffc2\032\uffc2\033\uffc2\034\uffc2\035\uffc2\036\uffc2\037\uffc2" +
    "\040\uffc2\041\uffc2\042\uffc2\044\uffc2\047\uffc2\050\uffc2\052" +
    "\uffc2\056\uffc2\060\uffc2\061\uffc2\062\uffc2\063\uffc2\064\uffc2" +
    "\065\uffc2\070\uffc2\071\uffc2\072\uffc2\073\uffc2\077\uffc2\001" +
    "\002\000\116\003\uffc1\004\uffc1\005\uffc1\006\uffc1\007\uffc1" +
    "\010\uffc1\012\uffc1\013\uffc1\016\uffc1\021\uffc1\023\uffc1\027" +
    "\uffc1\031\uffc1\032\uffc1\033\uffc1\034\uffc1\035\uffc1\036\uffc1" +
    "\037\uffc1\040\uffc1\041\uffc1\042\uffc1\044\uffc1\047\uffc1\050" +
    "\uffc1\052\uffc1\056\uffc1\060\uffc1\061\uffc1\062\uffc1\063\uffc1" +
    "\064\uffc1\065\uffc1\070\uffc1\071\uffc1\072\uffc1\073\uffc1\077" +
    "\uffc1\001\002\000\064\003\uffb2\004\uffb2\005\uffb2\006\uffb2" +
    "\007\uffb2\010\uffb2\012\uffb2\013\uffb2\016\uffb2\021\uffb2\023" +
    "\uffb2\027\uffb2\031\uffb2\032\uffb2\033\uffb2\034\uffb2\035\uffb2" +
    "\036\uffb2\037\uffb2\040\uffb2\041\uffb2\042\uffb2\047\uffb2\052" +
    "\uffb2\077\uffb2\001\002\000\024\031\062\035\047\036\074" +
    "\037\037\040\052\041\060\042\021\047\025\077\154\001" +
    "\002\000\020\044\uff8e\050\uff8e\056\uff8e\070\uff8e\071\uff8e" +
    "\072\uff8e\073\uff8e\001\002\000\004\050\156\001\002\000" +
    "\030\046\uff8c\053\141\066\143\067\142\070\uff91\071\uff91" +
    "\072\uff91\073\uff91\074\uff8c\075\uff8c\076\uff8c\001\002\000" +
    "\022\046\uff8a\070\uff92\071\uff92\072\uff92\073\uff92\074\uff8a" +
    "\075\uff8a\076\uff8a\001\002\000\004\051\157\001\002\000" +
    "\060\003\050\004\027\005\067\006\040\007\020\010\071" +
    "\012\055\013\016\016\043\021\033\023\065\031\062\032" +
    "\063\033\075\034\023\035\047\036\074\037\037\040\052" +
    "\041\060\042\021\047\025\077\044\001\002\000\004\052" +
    "\161\001\002\000\064\003\uff78\004\uff78\005\uff78\006\uff78" +
    "\007\uff78\010\uff78\012\uff78\013\uff78\016\uff78\021\uff78\023" +
    "\uff78\027\uff78\031\uff78\032\uff78\033\uff78\034\uff78\035\uff78" +
    "\036\uff78\037\uff78\040\uff78\041\uff78\042\uff78\047\uff78\052" +
    "\uff78\077\uff78\001\002\000\006\050\uffe4\056\210\001\002" +
    "\000\006\050\uffe0\056\206\001\002\000\006\050\uffde\056" +
    "\204\001\002\000\006\050\uffdf\056\202\001\002\000\126" +
    "\003\ufff0\004\ufff0\005\ufff0\006\ufff0\007\ufff0\010\ufff0\012" +
    "\ufff0\013\ufff0\016\ufff0\021\ufff0\023\ufff0\027\ufff0\031\ufff0" +
    "\032\ufff0\033\ufff0\034\ufff0\035\ufff0\036\ufff0\037\ufff0\040" +
    "\ufff0\041\ufff0\042\ufff0\044\ufff0\046\ufff0\047\ufff0\050\ufff0" +
    "\052\ufff0\056\ufff0\060\ufff0\061\ufff0\062\ufff0\063\ufff0\064" +
    "\ufff0\065\ufff0\070\ufff0\071\ufff0\072\ufff0\073\ufff0\074\ufff0" +
    "\075\ufff0\076\ufff0\077\ufff0\001\002\000\006\050\uffe2\056" +
    "\200\001\002\000\006\050\uffe3\056\176\001\002\000\004" +
    "\050\175\001\002\000\006\050\uffe1\056\173\001\002\000" +
    "\022\031\062\035\047\036\074\037\162\040\170\041\167" +
    "\042\172\077\165\001\002\000\004\050\uffda\001\002\000" +
    "\126\003\uffef\004\uffef\005\uffef\006\uffef\007\uffef\010\uffef" +
    "\012\uffef\013\uffef\016\uffef\021\uffef\023\uffef\027\uffef\031" +
    "\uffef\032\uffef\033\uffef\034\uffef\035\uffef\036\uffef\037\uffef" +
    "\040\uffef\041\uffef\042\uffef\044\uffef\046\uffef\047\uffef\050" +
    "\uffef\052\uffef\056\uffef\060\uffef\061\uffef\062\uffef\063\uffef" +
    "\064\uffef\065\uffef\070\uffef\071\uffef\072\uffef\073\uffef\074" +
    "\uffef\075\uffef\076\uffef\077\uffef\001\002\000\022\031\062" +
    "\035\047\036\074\037\162\040\170\041\167\042\172\077" +
    "\165\001\002\000\004\050\uffdc\001\002\000\022\031\062" +
    "\035\047\036\074\037\162\040\170\041\167\042\172\077" +
    "\165\001\002\000\004\050\uffdb\001\002\000\022\031\062" +
    "\035\047\036\074\037\162\040\170\041\167\042\172\077" +
    "\165\001\002\000\004\050\uffd8\001\002\000\022\031\062" +
    "\035\047\036\074\037\162\040\170\041\167\042\172\077" +
    "\165\001\002\000\004\050\uffd7\001\002\000\022\031\062" +
    "\035\047\036\074\037\162\040\170\041\167\042\172\077" +
    "\165\001\002\000\004\050\uffd9\001\002\000\022\031\062" +
    "\035\047\036\074\037\162\040\170\041\167\042\172\077" +
    "\165\001\002\000\004\050\uffdd\001\002\000\024\031\uff82" +
    "\035\uff82\036\uff82\037\uff82\040\uff82\041\uff82\042\uff82\047" +
    "\uff82\077\uff82\001\002\000\024\031\uff7f\035\uff7f\036\uff7f" +
    "\037\uff7f\040\uff7f\041\uff7f\042\uff7f\047\uff7f\077\uff7f\001" +
    "\002\000\024\031\uff81\035\uff81\036\uff81\037\uff81\040\uff81" +
    "\041\uff81\042\uff81\047\uff81\077\uff81\001\002\000\024\031" +
    "\uff80\035\uff80\036\uff80\037\uff80\040\uff80\041\uff80\042\uff80" +
    "\047\uff80\077\uff80\001\002\000\024\031\062\035\047\036" +
    "\074\037\037\040\052\041\060\042\021\047\220\077\127" +
    "\001\002\000\010\044\uff97\050\uff97\056\uff97\001\002\000" +
    "\022\031\062\035\047\036\074\037\037\040\052\041\060" +
    "\042\021\077\127\001\002\000\004\050\222\001\002\000" +
    "\020\044\uff8d\050\uff8d\056\uff8d\070\uff8d\071\uff8d\072\uff8d" +
    "\073\uff8d\001\002\000\064\003\uffb6\004\uffb6\005\uffb6\006" +
    "\uffb6\007\uffb6\010\uffb6\012\uffb6\013\uffb6\016\uffb6\021\uffb6" +
    "\023\uffb6\027\uffb6\031\uffb6\032\uffb6\033\uffb6\034\uffb6\035" +
    "\uffb6\036\uffb6\037\uffb6\040\uffb6\041\uffb6\042\uffb6\047\uffb6" +
    "\052\uffb6\077\uffb6\001\002\000\064\003\uffb5\004\uffb5\005" +
    "\uffb5\006\uffb5\007\uffb5\010\uffb5\012\uffb5\013\uffb5\016\uffb5" +
    "\021\uffb5\023\uffb5\027\uffb5\031\uffb5\032\uffb5\033\uffb5\034" +
    "\uffb5\035\uffb5\036\uffb5\037\uffb5\040\uffb5\041\uffb5\042\uffb5" +
    "\047\uffb5\052\uffb5\077\uffb5\001\002\000\004\054\226\001" +
    "\002\000\004\077\227\001\002\000\006\044\uffc9\045\230" +
    "\001\002\000\004\043\231\001\002\000\004\044\uffc8\001" +
    "\002\000\116\003\uff9c\004\uff9c\005\uff9c\006\uff9c\007\uff9c" +
    "\010\uff9c\012\uff9c\013\uff9c\016\uff9c\021\uff9c\023\uff9c\027" +
    "\uff9c\031\uff9c\032\uff9c\033\uff9c\034\uff9c\035\uff9c\036\uff9c" +
    "\037\uff9c\040\uff9c\041\uff9c\042\uff9c\044\uff9c\047\uff9c\050" +
    "\uff9c\052\uff9c\056\uff9c\060\uff9c\061\uff9c\062\uff9c\063\uff9c" +
    "\064\uff9c\065\uff9c\070\uff9c\071\uff9c\072\uff9c\073\uff9c\077" +
    "\uff9c\001\002\000\116\003\uff9d\004\uff9d\005\uff9d\006\uff9d" +
    "\007\uff9d\010\uff9d\012\uff9d\013\uff9d\016\uff9d\021\uff9d\023" +
    "\uff9d\027\uff9d\031\uff9d\032\uff9d\033\uff9d\034\uff9d\035\uff9d" +
    "\036\uff9d\037\uff9d\040\uff9d\041\uff9d\042\uff9d\044\uff9d\047" +
    "\uff9d\050\uff9d\052\uff9d\056\uff9d\060\uff9d\061\uff9d\062\uff9d" +
    "\063\uff9d\064\uff9d\065\uff9d\070\uff9d\071\uff9d\072\uff9d\073" +
    "\uff9d\077\uff9d\001\002\000\064\003\uffb3\004\uffb3\005\uffb3" +
    "\006\uffb3\007\uffb3\010\uffb3\012\uffb3\013\uffb3\016\uffb3\021" +
    "\uffb3\023\uffb3\027\uffb3\031\uffb3\032\uffb3\033\uffb3\034\uffb3" +
    "\035\uffb3\036\uffb3\037\uffb3\040\uffb3\041\uffb3\042\uffb3\047" +
    "\uffb3\052\uffb3\077\uffb3\001\002\000\064\003\uffab\004\uffab" +
    "\005\uffab\006\uffab\007\uffab\010\uffab\012\uffab\013\uffab\016" +
    "\uffab\021\uffab\023\uffab\027\uffab\031\uffab\032\uffab\033\uffab" +
    "\034\uffab\035\uffab\036\uffab\037\uffab\040\uffab\041\uffab\042" +
    "\uffab\047\uffab\052\uffab\077\uffab\001\002\000\004\044\ufffa" +
    "\001\002\000\004\044\ufff9\001\002\000\004\044\ufff8\001" +
    "\002\000\004\044\ufff7\001\002\000\006\027\uffd4\052\uffd4" +
    "\001\002\000\006\037\247\077\246\001\002\000\022\031" +
    "\062\035\047\036\074\037\037\040\052\041\060\042\021" +
    "\077\127\001\002\000\004\044\uffc3\001\002\000\004\054" +
    "\253\001\002\000\004\054\250\001\002\000\114\003\uffc2" +
    "\004\uffc2\005\uffc2\006\uffc2\007\uffc2\010\uffc2\012\uffc2\013" +
    "\uffc2\016\uffc2\021\uffc2\023\uffc2\027\uffc2\031\uffc2\032\uffc2" +
    "\033\uffc2\034\uffc2\035\uffc2\036\uffc2\037\uffc2\040\uffc2\041" +
    "\uffc2\042\uffc2\044\uffc2\045\251\047\uffc2\052\uffc2\060\uffc2" +
    "\061\uffc2\062\uffc2\063\uffc2\064\uffc2\065\uffc2\070\uffc2\071" +
    "\uffc2\072\uffc2\073\uffc2\077\uffc2\001\002\000\022\031\062" +
    "\035\047\036\074\037\037\040\052\041\060\042\021\077" +
    "\127\001\002\000\004\044\uffc0\001\002\000\114\003\uffc1" +
    "\004\uffc1\005\uffc1\006\uffc1\007\uffc1\010\uffc1\012\uffc1\013" +
    "\uffc1\016\uffc1\021\uffc1\023\uffc1\027\uffc1\031\uffc1\032\uffc1" +
    "\033\uffc1\034\uffc1\035\uffc1\036\uffc1\037\uffc1\040\uffc1\041" +
    "\uffc1\042\uffc1\044\uffc1\045\254\047\uffc1\052\uffc1\060\uffc1" +
    "\061\uffc1\062\uffc1\063\uffc1\064\uffc1\065\uffc1\070\uffc1\071" +
    "\uffc1\072\uffc1\073\uffc1\077\uffc1\001\002\000\022\031\062" +
    "\035\047\036\074\037\037\040\052\041\060\042\021\077" +
    "\127\001\002\000\004\044\uffbf\001\002\000\024\031\062" +
    "\035\047\036\074\037\037\040\052\041\060\042\021\047" +
    "\025\077\154\001\002\000\004\050\260\001\002\000\004" +
    "\017\261\001\002\000\004\051\262\001\002\000\060\003" +
    "\050\004\027\005\067\006\040\007\020\010\071\012\055" +
    "\013\016\016\043\021\033\023\065\031\062\032\063\033" +
    "\075\034\023\035\047\036\074\037\037\040\052\041\060" +
    "\042\021\047\025\077\044\001\002\000\004\052\264\001" +
    "\002\000\066\003\uff7a\004\uff7a\005\uff7a\006\uff7a\007\uff7a" +
    "\010\uff7a\012\uff7a\013\uff7a\016\uff7a\020\265\021\uff7a\023" +
    "\uff7a\027\uff7a\031\uff7a\032\uff7a\033\uff7a\034\uff7a\035\uff7a" +
    "\036\uff7a\037\uff7a\040\uff7a\041\uff7a\042\uff7a\047\uff7a\052" +
    "\uff7a\077\uff7a\001\002\000\004\051\266\001\002\000\060" +
    "\003\050\004\027\005\067\006\040\007\020\010\071\012" +
    "\055\013\016\016\043\021\033\023\065\031\062\032\063" +
    "\033\075\034\023\035\047\036\074\037\037\040\052\041" +
    "\060\042\021\047\025\077\044\001\002\000\004\052\270" +
    "\001\002\000\064\003\uff79\004\uff79\005\uff79\006\uff79\007" +
    "\uff79\010\uff79\012\uff79\013\uff79\016\uff79\021\uff79\023\uff79" +
    "\027\uff79\031\uff79\032\uff79\033\uff79\034\uff79\035\uff79\036" +
    "\uff79\037\uff79\040\uff79\041\uff79\042\uff79\047\uff79\052\uff79" +
    "\077\uff79\001\002\000\006\044\uffcc\045\272\001\002\000" +
    "\014\031\062\035\047\036\074\047\277\077\276\001\002" +
    "\000\004\044\uffca\001\002\000\014\044\uffcb\046\uff8b\074" +
    "\uff8b\075\uff8b\076\uff8b\001\002\000\020\044\uff8a\046\uff8a" +
    "\050\uff8a\056\uff8a\074\uff8a\075\uff8a\076\uff8a\001\002\000" +
    "\020\044\uff8c\046\uff8c\050\uff8c\056\uff8c\074\uff8c\075\uff8c" +
    "\076\uff8c\001\002\000\024\031\062\035\047\036\074\037" +
    "\037\040\052\041\060\042\021\047\220\077\127\001\002" +
    "\000\004\050\301\001\002\000\020\044\uff89\046\uff89\050" +
    "\uff89\056\uff89\074\uff89\075\uff89\076\uff89\001\002\000\116" +
    "\003\uff9e\004\uff9e\005\uff9e\006\uff9e\007\uff9e\010\uff9e\012" +
    "\uff9e\013\uff9e\016\uff9e\021\uff9e\023\uff9e\027\uff9e\031\uff9e" +
    "\032\uff9e\033\uff9e\034\uff9e\035\uff9e\036\uff9e\037\uff9e\040" +
    "\uff9e\041\uff9e\042\uff9e\044\uff9e\047\uff9e\050\uff9e\052\uff9e" +
    "\056\uff9e\060\uff9e\061\uff9e\062\uff9e\063\uff9e\064\uff9e\065" +
    "\uff9e\070\uff9e\071\uff9e\072\uff9e\073\uff9e\077\uff9e\001\002" +
    "\000\116\003\uff9f\004\uff9f\005\uff9f\006\uff9f\007\uff9f\010" +
    "\uff9f\012\uff9f\013\uff9f\016\uff9f\021\uff9f\023\uff9f\027\uff9f" +
    "\031\uff9f\032\uff9f\033\uff9f\034\uff9f\035\uff9f\036\uff9f\037" +
    "\uff9f\040\uff9f\041\uff9f\042\uff9f\044\uff9f\047\uff9f\050\uff9f" +
    "\052\uff9f\056\uff9f\060\uff9f\061\uff9f\062\uff9f\063\uff9f\064" +
    "\uff9f\065\uff9f\070\uff9f\071\uff9f\072\uff9f\073\uff9f\077\uff9f" +
    "\001\002\000\004\004\305\001\002\000\004\077\306\001" +
    "\002\000\004\045\307\001\002\000\004\037\310\001\002" +
    "\000\004\056\uff73\001\002\000\004\056\312\001\002\000" +
    "\024\031\062\035\047\036\074\037\037\040\052\041\060" +
    "\042\021\047\025\077\154\001\002\000\004\056\314\001" +
    "\002\000\010\037\317\040\320\077\316\001\002\000\004" +
    "\050\321\001\002\000\006\066\143\067\142\001\002\000" +
    "\006\066\303\067\302\001\002\000\006\066\233\067\232" +
    "\001\002\000\004\051\322\001\002\000\060\003\050\004" +
    "\027\005\067\006\040\007\020\010\071\012\055\013\016" +
    "\016\043\021\033\023\065\031\062\032\063\033\075\034" +
    "\023\035\047\036\074\037\037\040\052\041\060\042\021" +
    "\047\025\077\044\001\002\000\004\052\324\001\002\000" +
    "\064\003\uff77\004\uff77\005\uff77\006\uff77\007\uff77\010\uff77" +
    "\012\uff77\013\uff77\016\uff77\021\uff77\023\uff77\027\uff77\031" +
    "\uff77\032\uff77\033\uff77\034\uff77\035\uff77\036\uff77\037\uff77" +
    "\040\uff77\041\uff77\042\uff77\047\uff77\052\uff77\077\uff77\001" +
    "\002\000\014\031\062\035\047\036\074\047\277\077\276" +
    "\001\002\000\014\031\uff7e\035\uff7e\036\uff7e\047\uff7e\077" +
    "\uff7e\001\002\000\014\031\uff7b\035\uff7b\036\uff7b\047\uff7b" +
    "\077\uff7b\001\002\000\014\031\uff7d\035\uff7d\036\uff7d\047" +
    "\uff7d\077\uff7d\001\002\000\014\031\uff7c\035\uff7c\036\uff7c" +
    "\047\uff7c\077\uff7c\001\002\000\020\044\uff95\046\331\050" +
    "\uff95\056\uff95\074\326\075\330\076\327\001\002\000\010" +
    "\044\uff96\050\uff96\056\uff96\001\002\000\020\044\uff8b\046" +
    "\uff8b\050\uff8b\056\uff8b\074\uff8b\075\uff8b\076\uff8b\001\002" +
    "\000\014\031\062\035\047\036\074\047\277\077\276\001" +
    "\002\000\010\044\uff94\050\uff94\056\uff94\001\002\000\004" +
    "\044\340\001\002\000\004\052\341\001\002\000\012\002" +
    "\ufffb\004\ufffb\005\ufffb\007\ufffb\001\002\000\006\044\uffd3" +
    "\045\343\001\002\000\022\031\062\035\047\036\074\037" +
    "\037\040\052\041\060\042\021\077\127\001\002\000\004" +
    "\044\uffd2\001\002\000\064\003\uffb0\004\uffb0\005\uffb0\006" +
    "\uffb0\007\uffb0\010\uffb0\012\uffb0\013\uffb0\016\uffb0\021\uffb0" +
    "\023\uffb0\027\uffb0\031\uffb0\032\uffb0\033\uffb0\034\uffb0\035" +
    "\uffb0\036\uffb0\037\uffb0\040\uffb0\041\uffb0\042\uffb0\047\uffb0" +
    "\052\uffb0\077\uffb0\001\002\000\064\003\uffb1\004\uffb1\005" +
    "\uffb1\006\uffb1\007\uffb1\010\uffb1\012\uffb1\013\uffb1\016\uffb1" +
    "\021\uffb1\023\uffb1\027\uffb1\031\uffb1\032\uffb1\033\uffb1\034" +
    "\uffb1\035\uffb1\036\uffb1\037\uffb1\040\uffb1\041\uffb1\042\uffb1" +
    "\047\uffb1\052\uffb1\077\uffb1\001\002\000\006\044\uffcf\045" +
    "\350\001\002\000\006\031\062\041\352\001\002\000\004" +
    "\044\uffcd\001\002\000\004\044\uffce\001\002\000\064\003" +
    "\uffaf\004\uffaf\005\uffaf\006\uffaf\007\uffaf\010\uffaf\012\uffaf" +
    "\013\uffaf\016\uffaf\021\uffaf\023\uffaf\027\uffaf\031\uffaf\032" +
    "\uffaf\033\uffaf\034\uffaf\035\uffaf\036\uffaf\037\uffaf\040\uffaf" +
    "\041\uffaf\042\uffaf\047\uffaf\052\uffaf\077\uffaf\001\002\000" +
    "\004\054\355\001\002\000\004\077\356\001\002\000\006" +
    "\044\uffc7\045\357\001\002\000\004\043\360\001\002\000" +
    "\004\044\uffc6\001\002\000\004\077\u010f\001\002\000\004" +
    "\051\u010a\001\002\000\004\050\u0104\001\002\000\004\077" +
    "\u0101\001\002\000\004\077\376\001\002\000\004\077\373" +
    "\001\002\000\004\077\370\001\002\000\006\050\uffeb\056" +
    "\371\001\002\000\014\004\366\006\364\007\365\010\361" +
    "\011\367\001\002\000\004\050\uffe6\001\002\000\006\050" +
    "\uffee\056\374\001\002\000\014\004\366\006\364\007\365" +
    "\010\361\011\367\001\002\000\004\050\uffe9\001\002\000" +
    "\006\050\uffed\056\377\001\002\000\014\004\366\006\364" +
    "\007\365\010\361\011\367\001\002\000\004\050\uffe8\001" +
    "\002\000\006\050\uffec\056\u0102\001\002\000\014\004\366" +
    "\006\364\007\365\010\361\011\367\001\002\000\004\050" +
    "\uffe7\001\002\000\004\051\u0105\001\002\000\060\003\050" +
    "\004\027\005\067\006\040\007\020\010\071\012\055\013" +
    "\016\016\043\021\033\023\065\031\062\032\063\033\075" +
    "\034\023\035\047\036\074\037\037\040\052\041\060\042" +
    "\021\047\025\077\044\001\002\000\004\027\046\001\002" +
    "\000\004\044\u0108\001\002\000\004\052\u0109\001\002\000" +
    "\012\002\ufff3\004\ufff3\005\ufff3\007\ufff3\001\002\000\060" +
    "\003\050\004\027\005\067\006\040\007\020\010\071\012" +
    "\055\013\016\016\043\021\033\023\065\031\062\032\063" +
    "\033\075\034\023\035\047\036\074\037\037\040\052\041" +
    "\060\042\021\047\025\077\044\001\002\000\004\027\046" +
    "\001\002\000\004\044\u010d\001\002\000\004\052\u010e\001" +
    "\002\000\012\002\ufff6\004\ufff6\005\ufff6\007\ufff6\001\002" +
    "\000\006\050\uffea\056\u0110\001\002\000\014\004\366\006" +
    "\364\007\365\010\361\011\367\001\002\000\004\050\uffe5" +
    "\001\002\000\016\004\366\006\364\007\365\010\361\011" +
    "\367\050\u0113\001\002\000\004\051\u011b\001\002\000\004" +
    "\050\u0115\001\002\000\004\051\u0116\001\002\000\060\003" +
    "\050\004\027\005\067\006\040\007\020\010\071\012\055" +
    "\013\016\016\043\021\033\023\065\031\062\032\063\033" +
    "\075\034\023\035\047\036\074\037\037\040\052\041\060" +
    "\042\021\047\025\077\044\001\002\000\004\027\046\001" +
    "\002\000\004\044\u0119\001\002\000\004\052\u011a\001\002" +
    "\000\012\002\ufff1\004\ufff1\005\ufff1\007\ufff1\001\002\000" +
    "\060\003\050\004\027\005\067\006\040\007\020\010\071" +
    "\012\055\013\016\016\043\021\033\023\065\031\062\032" +
    "\063\033\075\034\023\035\047\036\074\037\037\040\052" +
    "\041\060\042\021\047\025\077\044\001\002\000\004\027" +
    "\046\001\002\000\004\044\u011e\001\002\000\004\052\u011f" +
    "\001\002\000\012\002\ufff4\004\ufff4\005\ufff4\007\ufff4\001" +
    "\002\000\016\004\366\006\364\007\365\010\361\011\367" +
    "\050\u0121\001\002\000\004\051\u0129\001\002\000\004\050" +
    "\u0123\001\002\000\004\051\u0124\001\002\000\060\003\050" +
    "\004\027\005\067\006\040\007\020\010\071\012\055\013" +
    "\016\016\043\021\033\023\065\031\062\032\063\033\075" +
    "\034\023\035\047\036\074\037\037\040\052\041\060\042" +
    "\021\047\025\077\044\001\002\000\004\027\046\001\002" +
    "\000\004\044\u0127\001\002\000\004\052\u0128\001\002\000" +
    "\012\002\ufff2\004\ufff2\005\ufff2\007\ufff2\001\002\000\060" +
    "\003\050\004\027\005\067\006\040\007\020\010\071\012" +
    "\055\013\016\016\043\021\033\023\065\031\062\032\063" +
    "\033\075\034\023\035\047\036\074\037\037\040\052\041" +
    "\060\042\021\047\025\077\044\001\002\000\004\027\046" +
    "\001\002\000\004\044\u012c\001\002\000\004\052\u012d\001" +
    "\002\000\012\002\ufff5\004\ufff5\005\ufff5\007\ufff5\001\002" +
    "\000\004\002\001\001\002\000\004\002\ufffd\001\002\000" +
    "\004\002\ufffe\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\u012e\000\010\002\005\003\003\004\004\001\001\000" +
    "\010\002\u012f\003\003\004\004\001\001\000\010\002\u012e" +
    "\003\003\004\004\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\017\362" +
    "\001\001\000\002\001\001\000\064\005\021\006\030\007" +
    "\055\010\067\011\050\012\065\013\044\014\033\015\056" +
    "\016\071\021\025\022\035\023\040\024\027\025\014\027" +
    "\041\030\034\031\060\032\031\036\053\037\052\040\063" +
    "\044\023\045\016\046\072\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\030\005\124\014\220\016\125\021\025\022\035" +
    "\023\040\024\121\027\277\030\034\031\060\044\123\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\046\336\001\001\000\004\035\324\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\033\135\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\062\005\021\006\241\007\055\010\067\011" +
    "\050\012\065\013\044\014\033\015\056\016\071\021\025" +
    "\022\035\023\040\024\027\025\014\027\041\030\034\031" +
    "\060\032\031\036\053\037\052\040\063\044\023\045\016" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\034\215\001\001" +
    "\000\010\005\163\020\170\024\162\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\024\005\124\014\122\016\125\021\025\022\035\023" +
    "\040\024\121\030\127\044\123\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\033\135\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\024\005\124\014\137" +
    "\016\125\021\025\022\035\023\040\024\121\030\127\044" +
    "\123\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\034\005\154\015\152\016\125\021" +
    "\025\022\035\023\040\024\027\025\014\027\041\030\151" +
    "\031\060\032\031\044\123\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\062\005\021\006\157\007\055\010\067\011" +
    "\050\012\065\013\044\014\033\015\056\016\071\021\025" +
    "\022\035\023\040\024\027\025\014\027\041\030\034\031" +
    "\060\032\031\036\053\037\052\040\063\044\023\045\016" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\010\005\163\020\173" +
    "\024\162\001\001\000\002\001\001\000\002\001\001\000" +
    "\010\005\163\020\176\024\162\001\001\000\002\001\001" +
    "\000\010\005\163\020\200\024\162\001\001\000\002\001" +
    "\001\000\010\005\163\020\202\024\162\001\001\000\002" +
    "\001\001\000\010\005\163\020\204\024\162\001\001\000" +
    "\002\001\001\000\010\005\163\020\206\024\162\001\001" +
    "\000\002\001\001\000\010\005\163\020\210\024\162\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\024\005\124\016" +
    "\125\021\025\022\035\023\040\024\121\030\151\031\216" +
    "\044\123\001\001\000\002\001\001\000\024\005\124\014" +
    "\220\016\125\021\025\022\035\023\040\024\121\030\127" +
    "\044\123\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\024\005\124\014\244\016\125\021\025\022" +
    "\035\023\040\024\121\030\127\044\123\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\024\005\124\014\251\016\125\021\025\022\035" +
    "\023\040\024\121\030\127\044\123\001\001\000\002\001" +
    "\001\000\002\001\001\000\024\005\124\014\254\016\125" +
    "\021\025\022\035\023\040\024\121\030\127\044\123\001" +
    "\001\000\002\001\001\000\034\005\154\015\256\016\125" +
    "\021\025\022\035\023\040\024\027\025\014\027\041\030" +
    "\151\031\060\032\031\044\123\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\062\005\021\006" +
    "\262\007\055\010\067\011\050\012\065\013\044\014\033" +
    "\015\056\016\071\021\025\022\035\023\040\024\027\025" +
    "\014\027\041\030\034\031\060\032\031\036\053\037\052" +
    "\040\063\044\023\045\016\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\062\005\021\006\266" +
    "\007\055\010\067\011\050\012\065\013\044\014\033\015" +
    "\056\016\071\021\025\022\035\023\040\024\027\025\014" +
    "\027\041\030\034\031\060\032\031\036\053\037\052\040" +
    "\063\044\023\045\016\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\012\005\274\024\273\025" +
    "\272\032\031\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\026\005\124\016" +
    "\125\021\025\022\035\023\040\024\121\027\277\030\151" +
    "\031\060\044\123\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\043\310\001" +
    "\001\000\002\001\001\000\002\001\001\000\034\005\154" +
    "\015\312\016\125\021\025\022\035\023\040\024\027\025" +
    "\014\027\041\030\151\031\060\032\031\044\123\001\001" +
    "\000\002\001\001\000\004\016\314\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\062\005\021\006\322\007\055\010" +
    "\067\011\050\012\065\013\044\014\033\015\056\016\071" +
    "\021\025\022\035\023\040\024\027\025\014\027\041\030" +
    "\034\031\060\032\031\036\053\037\052\040\063\044\023" +
    "\045\016\001\001\000\002\001\001\000\002\001\001\000" +
    "\012\005\274\024\333\026\332\032\331\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\035\334\001\001\000\002\001\001\000\002" +
    "\001\001\000\012\005\274\024\333\026\335\032\331\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\024\005\124\014" +
    "\343\016\125\021\025\022\035\023\040\024\121\030\127" +
    "\044\123\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\005\350\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\017\371\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\017\374\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\017\377\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\017\u0102\001\001\000\002\001\001\000" +
    "\002\001\001\000\062\005\021\006\u0105\007\055\010\067" +
    "\011\050\012\065\013\044\014\033\015\056\016\071\021" +
    "\025\022\035\023\040\024\027\025\014\027\041\030\034" +
    "\031\060\032\031\036\053\037\052\040\063\044\023\045" +
    "\016\001\001\000\004\046\u0106\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\062\005\021\006" +
    "\u010a\007\055\010\067\011\050\012\065\013\044\014\033" +
    "\015\056\016\071\021\025\022\035\023\040\024\027\025" +
    "\014\027\041\030\034\031\060\032\031\036\053\037\052" +
    "\040\063\044\023\045\016\001\001\000\004\046\u010b\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\017\u0110\001\001\000\002\001" +
    "\001\000\004\017\u0113\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\062\005\021\006\u0116\007" +
    "\055\010\067\011\050\012\065\013\044\014\033\015\056" +
    "\016\071\021\025\022\035\023\040\024\027\025\014\027" +
    "\041\030\034\031\060\032\031\036\053\037\052\040\063" +
    "\044\023\045\016\001\001\000\004\046\u0117\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\062" +
    "\005\021\006\u011b\007\055\010\067\011\050\012\065\013" +
    "\044\014\033\015\056\016\071\021\025\022\035\023\040" +
    "\024\027\025\014\027\041\030\034\031\060\032\031\036" +
    "\053\037\052\040\063\044\023\045\016\001\001\000\004" +
    "\046\u011c\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\017\u0121\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\062\005\021\006" +
    "\u0124\007\055\010\067\011\050\012\065\013\044\014\033" +
    "\015\056\016\071\021\025\022\035\023\040\024\027\025" +
    "\014\027\041\030\034\031\060\032\031\036\053\037\052" +
    "\040\063\044\023\045\016\001\001\000\004\046\u0125\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\062\005\021\006\u0129\007\055\010\067\011\050\012" +
    "\065\013\044\014\033\015\056\016\071\021\025\022\035" +
    "\023\040\024\027\025\014\027\041\030\034\031\060\032" +
    "\031\036\053\037\052\040\063\044\023\045\016\001\001" +
    "\000\004\046\u012a\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}


  /** Scan to get the next Symbol. */
  public java_cup.runtime.Symbol scan()
    throws java.lang.Exception
    {
 return s.next_token(); 
    }


    Scanner s;
    public parser(int t, Scanner s){ this.s=s; }
    public boolean syntaxErrors;
    public int syntaxErrs = 0;

    @Override
    public void syntax_error(Symbol current_token) {
      String errInfo = "SYNTAX ERROR AT LINE " + (current_token.left) + " COLUMN " 
        + (current_token.right) + " VALUE: " + current_token.value + " - ";
      System.out.println(errInfo); 
      reportErrToFile(errInfo);
      this.syntaxErrs += 1;
    }    

    private void reportErrToFile(String info){
      FileManager fileManager = new FileManager("C:/Users/chris/Documents/NetBeansProjects/CeI-PYI/src/main/java/symbolTable/Tokens.txt");
      fileManager.writeToFile(info);
  }
    public void initParser(String file){
        try {
            BufferedReader br = new BufferedReader(new FileReader(file));
            parser codeParser = new parser(0,
                    new Lexer(br));
            Object result = codeParser.parse().value;
            String res = this.syntaxErrs > 0? "THERE WERE " + syntaxErrs + 
              "ERRORS. THE CODE CANNOT BE GENERATED." : "THE CODE CAN BE GENERATED.";
            System.out.println(res);
            System.out.println(this.syntaxErrs);
        } catch (Exception ex) {
            System.err.println("AN ERROR HAS BEEN FOUND. PROCEEDING WITH THE REST OF THE FILE.");
            //ex.printStackTrace();
        }
    }

    public void fun() {
    
      System.out.println("SE EJECUTO EL CODIGO DENTRO DEL PROCESO.");
    }



/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$parser$actions {
  private final parser parser;

  /** Constructor */
  CUP$parser$actions(parser parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$parser$do_action_part00000000(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$parser$result;

      /* select the action based on the action number */
      switch (CUP$parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= ini EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = start_val;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$parser$parser.done_parsing();
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // ini ::= main 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("ini",0, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // ini ::= function 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("ini",0, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // ini ::= main ini 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("ini",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // ini ::= function ini 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("ini",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // main ::= INT MAIN LCURLY return HASH RCURLY 
            {
              Object RESULT =null;
		System.out.println("ESTE ES EL MAIN");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("main",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // main ::= INT MAIN LCURLY codeBlock return HASH RCURLY 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("main",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // return ::= RETURN ID 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("return",36, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // return ::= RETURN INTLIT 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("return",36, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // return ::= RETURN FLOATLIT 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("return",36, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // return ::= RETURN CHARLIT 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("return",36, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // function ::= INT FUNC RPAREN LCURLY codeBlock return HASH RCURLY 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("function",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // function ::= CHAR FUNC RPAREN LCURLY codeBlock return HASH RCURLY 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("function",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // function ::= FLOAT FUNC RPAREN LCURLY codeBlock return HASH RCURLY 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("function",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // function ::= INT FUNC parameters RPAREN LCURLY codeBlock return HASH RCURLY 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("function",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // function ::= CHAR FUNC parameters RPAREN LCURLY codeBlock return HASH RCURLY 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("function",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // function ::= FLOAT FUNC parameters RPAREN LCURLY codeBlock return HASH RCURLY 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("function",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // functionInv ::= FUNC RPAREN 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("functionInv",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // functionInv ::= FUNC parametersInv RPAREN 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("functionInv",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // parameters ::= INT ID 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("parameters",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // parameters ::= CHAR ID 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("parameters",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // parameters ::= BOOL ID 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("parameters",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // parameters ::= ARRAY ID 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("parameters",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // parameters ::= STRING ID 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("parameters",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // parameters ::= INT ID COMMA parameters 
            {
              Object RESULT =null;
		int paramleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int paramright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object param = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		 
              RESULT = param;
              System.out.println("PARAMETRO ES: " + param);
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("parameters",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // parameters ::= CHAR ID COMMA parameters 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("parameters",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // parameters ::= BOOL ID COMMA parameters 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("parameters",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // parameters ::= ARRAY ID COMMA parameters 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("parameters",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // parameters ::= STRING ID COMMA parameters 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("parameters",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // parametersInv ::= INTLIT 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("parametersInv",14, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // parametersInv ::= FLOATLIT 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("parametersInv",14, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // parametersInv ::= CHARLIT 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("parametersInv",14, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // parametersInv ::= STRINGLIT 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("parametersInv",14, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // parametersInv ::= boolLit 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("parametersInv",14, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // parametersInv ::= ID 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("parametersInv",14, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // parametersInv ::= functionInv 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("parametersInv",14, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // parametersInv ::= INTLIT COMMA parametersInv 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("parametersInv",14, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // parametersInv ::= FLOATLIT COMMA parametersInv 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("parametersInv",14, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // parametersInv ::= CHARLIT COMMA parametersInv 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("parametersInv",14, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // parametersInv ::= STRINGLIT COMMA parametersInv 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("parametersInv",14, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // parametersInv ::= boolLit COMMA parametersInv 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("parametersInv",14, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // parametersInv ::= ID COMMA parametersInv 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("parametersInv",14, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // parametersInv ::= functionInv COMMA parametersInv 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("parametersInv",14, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // codeBlock ::= expression 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("codeBlock",4, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // codeBlock ::= COMMENT 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("codeBlock",4, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // codeBlock ::= expression codeBlock 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("codeBlock",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // varCreationAsign ::= INT ID 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("varCreationAsign",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // varCreationAsign ::= INT ID EQ mathExpression 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("varCreationAsign",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // varCreationAsign ::= FLOAT ID 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("varCreationAsign",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // varCreationAsign ::= FLOAT ID EQ mathExpression 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("varCreationAsign",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // varCreationAsign ::= CHAR ID 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("varCreationAsign",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // varCreationAsign ::= CHAR ID EQ CHARLIT 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		 System.out.println("EL ID ES:" + id); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("varCreationAsign",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // varCreationAsign ::= CHAR ID EQ functionInv 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("varCreationAsign",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // varCreationAsign ::= BOOL ID 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("varCreationAsign",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // varCreationAsign ::= BOOL ID EQ boolLit 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("varCreationAsign",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // varCreationAsign ::= BOOL ID EQ logicalExpression 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("varCreationAsign",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // varCreationAsign ::= INTARR INTLIT RSQUARE ID 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("varCreationAsign",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // varCreationAsign ::= INTARR INTLIT RSQUARE ID EQ ARRAYLIT 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("varCreationAsign",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // varCreationAsign ::= CHARARR INTLIT RSQUARE ID 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("varCreationAsign",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // varCreationAsign ::= CHARARR INTLIT RSQUARE ID EQ ARRAYLIT 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("varCreationAsign",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // varCreationAsign ::= STRING ID 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("varCreationAsign",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // varCreationAsign ::= STRING ID EQ STRINGLIT 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("varCreationAsign",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // varAsign ::= ID EQ mathExpression 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("varAsign",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // arrayAccess ::= ID LSQUARE INTLIT RSQUARE 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("arrayAccess",34, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // arrayAccess ::= ID LSQUARE ID RSQUARE 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("arrayAccess",34, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // arrayValModification ::= ID LSQUARE INTLIT RSQUARE EQ mathExpression 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("arrayValModification",35, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // arrayValModification ::= ID LSQUARE ID RSQUARE EQ mathExpression 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("arrayValModification",35, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // printFunction ::= PRINT LPAREN INTLIT RPAREN 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("printFunction",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // printFunction ::= PRINT LPAREN FLOATLIT RPAREN 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("printFunction",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // printFunction ::= PRINT LPAREN CHARLIT RPAREN 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("printFunction",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // printFunction ::= PRINT LPAREN STRINGLIT RPAREN 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("printFunction",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // printFunction ::= PRINT LPAREN ID RPAREN 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("printFunction",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // readFunction ::= READ 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("readFunction",8, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // expression ::= mathExpression 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("expression",9, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // expression ::= unaryExpression HASH 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("expression",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // expression ::= logRelExpression HASH 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("expression",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // expression ::= varCreationAsign HASH 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("expression",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // expression ::= varAsign HASH 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("expression",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // expression ::= printFunction HASH 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("expression",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // expression ::= readFunction HASH 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("expression",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // expression ::= functionInv HASH 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("expression",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // expression ::= arrayAccess HASH 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("expression",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // expression ::= arrayValModification HASH 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("expression",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // expression ::= if 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("expression",9, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // expression ::= while 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("expression",9, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // expression ::= for 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("expression",9, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // expression ::= error HASH 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("expression",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // literal ::= numLiteral 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("literal",15, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // literal ::= lettersLiteral 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("literal",15, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // literal ::= boolLit 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("literal",15, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // numLiteral ::= INTLIT 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("numLiteral",16, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // numLiteral ::= FLOATLIT 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("numLiteral",16, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // lettersLiteral ::= CHARLIT 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("lettersLiteral",17, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // lettersLiteral ::= STRINGLIT 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("lettersLiteral",17, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // boolLit ::= TRUE 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("boolLit",18, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // boolLit ::= FALSE 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("boolLit",18, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 96: // unaryExpression ::= ID PADD 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("unaryExpression",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 97: // unaryExpression ::= ID PSUBS 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("unaryExpression",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 98: // unaryExpression ::= INTLIT PADD 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("unaryExpression",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 99: // unaryExpression ::= INTLIT PSUBS 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("unaryExpression",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 100: // unaryExpression ::= FLOATLIT PADD 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("unaryExpression",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 101: // unaryExpression ::= FLOATLIT PSUBS 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("unaryExpression",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 102: // mathExpression ::= mathOperand 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("mathExpression",10, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 103: // mathExpression ::= mathOperand mathOperator mathExpression 
            {
              Object RESULT =null;
		int o1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int o1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object o1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int o2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int o2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object o2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 
              System.out.println("El primer operador es: " + o1);
              System.out.println("Resultado es: " + Integer.parseInt(o1) + Integer.parseInt(o2));
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("mathExpression",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 104: // logRelExpression ::= logicalExpression 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("logRelExpression",11, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 105: // logRelExpression ::= relationalExpression 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("logRelExpression",11, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 106: // relationalExpression ::= relationalOperand relationalOperator relationalOperand 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("relationalExpression",21, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 107: // logicalExpression ::= logicalOperand logicalOperator logicalExpr 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("logicalExpression",19, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 108: // logicalExpr ::= logicalOperand 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("logicalExpr",20, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 109: // logicalExpr ::= logicalOperand logicalOperator logicalExpr 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("logicalExpr",20, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 110: // mathOperand ::= literal 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("mathOperand",22, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 111: // mathOperand ::= functionInv 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("mathOperand",22, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 112: // mathOperand ::= ID 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("mathOperand",22, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 113: // mathOperand ::= arrayAccess 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("mathOperand",22, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 114: // mathOperand ::= unaryExpression 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("mathOperand",22, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 115: // relationalOperand ::= mathOperand 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("relationalOperand",23, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 116: // relationalOperand ::= LPAREN mathExpression RPAREN 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("relationalOperand",23, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 117: // logicalOperand ::= ID 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("logicalOperand",24, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 118: // logicalOperand ::= boolLit 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("logicalOperand",24, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 119: // logicalOperand ::= functionInv 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("logicalOperand",24, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 120: // logicalOperand ::= LPAREN relationalExpression RPAREN 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("logicalOperand",24, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 121: // mathOperator ::= ADD 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("mathOperator",25, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 122: // mathOperator ::= SUBS 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("mathOperator",25, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 123: // mathOperator ::= DIV 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("mathOperator",25, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 124: // mathOperator ::= MULT 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("mathOperator",25, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 125: // mathOperator ::= EXP 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("mathOperator",25, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 126: // mathOperator ::= MOD 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("mathOperator",25, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 127: // relationalOperator ::= GTE 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("relationalOperator",26, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 128: // relationalOperator ::= GT 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("relationalOperator",26, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 129: // relationalOperator ::= LTE 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("relationalOperator",26, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 130: // relationalOperator ::= LT 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("relationalOperator",26, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 131: // logicalOperator ::= AND 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("logicalOperator",27, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 132: // logicalOperator ::= OR 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("logicalOperator",27, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 133: // logicalOperator ::= EQEQ 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("logicalOperator",27, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 134: // logicalOperator ::= NOT 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("logicalOperator",27, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 135: // if ::= IF LPAREN logRelExpression RPAREN THEN LCURLY codeBlock RCURLY 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("if",28, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 136: // if ::= IF LPAREN logRelExpression RPAREN THEN LCURLY codeBlock RCURLY ELSE LCURLY codeBlock RCURLY 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("if",28, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-11)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 137: // while ::= WHILE LPAREN logRelExpression RPAREN LCURLY codeBlock RCURLY 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("while",29, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 138: // for ::= FOR LPAREN INT ID EQ zero COMMA logRelExpression COMMA unaryExpression RPAREN LCURLY codeBlock RCURLY 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("for",30, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-13)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 139: // switch ::= SWITCH LPAREN ID RPAREN LCURLY switchBody RCURLY 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("switch",31, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 140: // switchBody ::= CASE INTLIT COLON codeBlock 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("switchBody",32, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 141: // switchBody ::= CASE INTLIT COLON codeBlock switchBody 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("switchBody",32, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 142: // zero ::= INTLIT 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("zero",33, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$parser$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$parser$do_action(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
              return CUP$parser$do_action_part00000000(
                               CUP$parser$act_num,
                               CUP$parser$parser,
                               CUP$parser$stack,
                               CUP$parser$top);
    }
}

}
