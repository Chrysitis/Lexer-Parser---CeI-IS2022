
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

package cup;

import java_cup.runtime.*;
import jflex.*;
import fileManager.*;
import java.util.Map;
import symbolTable.*;
import java.util.ArrayList;
import org.apache.commons.lang3.math.NumberUtils;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class parser extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return sym.class;
}

  /** Default constructor. */
  @Deprecated
  public parser() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\235\000\002\002\004\000\002\002\004\000\002\002" +
    "\003\000\002\067\002\000\002\003\010\000\002\042\004" +
    "\000\002\042\004\000\002\042\004\000\002\042\004\000" +
    "\002\042\004\000\002\070\002\000\002\004\011\000\002" +
    "\071\002\000\002\004\011\000\002\072\002\000\002\004" +
    "\011\000\002\073\002\000\002\004\012\000\002\074\002" +
    "\000\002\004\012\000\002\075\002\000\002\004\012\000" +
    "\002\005\004\000\002\005\005\000\002\015\004\000\002" +
    "\015\004\000\002\015\004\000\002\015\004\000\002\015" +
    "\004\000\002\015\006\000\002\015\006\000\002\015\006" +
    "\000\002\015\006\000\002\015\006\000\002\016\003\000" +
    "\002\016\003\000\002\016\003\000\002\016\003\000\002" +
    "\016\003\000\002\016\003\000\002\016\003\000\002\016" +
    "\005\000\002\016\005\000\002\016\005\000\002\016\005" +
    "\000\002\016\005\000\002\016\005\000\002\016\005\000" +
    "\002\006\003\000\002\006\003\000\002\006\004\000\002" +
    "\006\004\000\002\043\003\000\002\043\003\000\002\043" +
    "\003\000\002\043\003\000\002\043\003\000\002\043\006" +
    "\000\002\043\010\000\002\043\006\000\002\043\010\000" +
    "\002\051\004\000\002\051\006\000\002\051\006\000\002" +
    "\052\004\000\002\052\006\000\002\050\004\000\002\050" +
    "\006\000\002\050\006\000\002\050\006\000\002\050\005" +
    "\000\002\053\004\000\002\053\006\000\002\053\005\000" +
    "\002\054\004\000\002\054\006\000\002\054\006\000\002" +
    "\054\005\000\002\007\003\000\002\064\005\000\002\040" +
    "\006\000\002\040\006\000\002\041\010\000\002\041\010" +
    "\000\002\010\006\000\002\010\006\000\002\010\006\000" +
    "\002\010\006\000\002\010\006\000\002\011\003\000\002" +
    "\012\004\000\002\012\004\000\002\012\004\000\002\012" +
    "\004\000\002\012\004\000\002\012\004\000\002\012\003" +
    "\000\002\012\003\000\002\012\003\000\002\012\004\000" +
    "\002\012\004\000\002\057\003\000\002\057\003\000\002" +
    "\065\004\000\002\065\004\000\002\066\004\000\002\066" +
    "\004\000\002\066\004\000\002\066\004\000\002\044\003" +
    "\000\002\044\003\000\002\046\005\000\002\046\005\000" +
    "\002\046\003\000\002\061\005\000\002\061\005\000\002" +
    "\061\003\000\002\060\003\000\002\060\003\000\002\060" +
    "\003\000\002\060\003\000\002\060\003\000\002\013\003" +
    "\000\002\013\003\000\002\024\005\000\002\022\005\000" +
    "\002\023\003\000\002\023\005\000\002\045\003\000\002" +
    "\045\003\000\002\055\003\000\002\056\003\000\002\025" +
    "\003\000\002\025\005\000\002\026\003\000\002\026\003" +
    "\000\002\026\003\000\002\026\005\000\002\027\003\000" +
    "\002\027\003\000\002\027\003\000\002\027\003\000\002" +
    "\027\003\000\002\027\003\000\002\030\003\000\002\030" +
    "\003\000\002\030\003\000\002\030\003\000\002\031\003" +
    "\000\002\031\003\000\002\031\003\000\002\031\003\000" +
    "\002\032\012\000\002\032\016\000\002\033\011\000\002" +
    "\034\020\000\002\037\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\u011d\000\010\004\011\005\007\007\010\001\002\000" +
    "\010\004\011\005\007\007\010\001\002\000\004\002\uffff" +
    "\001\002\000\004\002\u011e\001\002\000\004\031\u0112\001" +
    "\002\000\004\031\u0106\001\002\000\006\030\013\031\012" +
    "\001\002\000\016\004\ufff1\006\ufff1\007\ufff1\010\ufff1\011" +
    "\ufff1\041\ufff7\001\002\000\004\042\ufffe\001\002\000\004" +
    "\042\015\001\002\000\056\003\050\004\026\005\066\006" +
    "\036\007\021\010\072\012\055\013\017\016\041\021\033" +
    "\023\063\027\045\031\061\032\062\033\076\034\024\040" +
    "\025\070\047\071\074\072\035\073\052\077\042\001\002" +
    "\000\004\035\346\001\002\000\004\072\341\001\002\000" +
    "\010\035\uff87\041\uff87\047\uff87\001\002\000\004\077\334" +
    "\001\002\000\004\035\uffcd\001\002\000\020\035\uff79\037" +
    "\uff79\041\uff79\047\uff79\065\uff79\066\uff79\067\uff79\001\002" +
    "\000\060\003\050\004\026\005\066\006\036\007\021\010" +
    "\072\012\055\013\017\016\041\021\033\023\063\027\045" +
    "\031\061\032\062\033\076\034\024\040\025\043\uffd0\070" +
    "\047\071\074\072\035\073\052\077\042\001\002\000\014" +
    "\031\061\040\211\072\331\073\332\077\127\001\002\000" +
    "\004\077\325\001\002\000\020\035\uff7a\037\uff7a\041\uff7a" +
    "\047\uff7a\065\uff7a\066\uff7a\067\uff7a\001\002\000\004\035" +
    "\uffca\001\002\000\012\037\320\065\315\066\317\067\316" +
    "\001\002\000\004\043\313\001\002\000\004\040\275\001" +
    "\002\000\020\035\uff7d\041\uff7d\047\uff7d\061\uff7d\062\uff7d" +
    "\063\uff7d\064\uff7d\001\002\000\020\035\uff7f\041\uff7f\047" +
    "\uff7f\061\uff7f\062\uff7f\063\uff7f\064\uff7f\001\002\000\004" +
    "\077\266\001\002\000\010\035\uff86\041\uff86\047\uff86\001" +
    "\002\000\004\035\uffb3\001\002\000\004\040\253\001\002" +
    "\000\016\036\236\037\uff7b\044\235\065\uff7b\066\uff7b\067" +
    "\uff7b\001\002\000\020\035\uff81\041\uff81\047\uff81\061\uff81" +
    "\062\uff81\063\uff81\064\uff81\001\002\000\060\003\050\004" +
    "\026\005\066\006\036\007\021\010\072\012\055\013\017" +
    "\016\041\021\033\023\063\027\045\031\061\032\062\033" +
    "\076\034\024\040\025\043\uffd1\070\047\071\074\072\035" +
    "\073\052\077\042\001\002\000\014\010\231\072\230\073" +
    "\232\074\233\077\227\001\002\000\004\035\uffcc\001\002" +
    "\000\020\035\uff9c\037\uff9c\041\uff9c\047\uff9c\065\uff9c\066" +
    "\uff9c\067\uff9c\001\002\000\004\035\226\001\002\000\004" +
    "\035\225\001\002\000\020\035\uff7e\041\uff7e\047\uff7e\061" +
    "\uff7e\062\uff7e\063\uff7e\064\uff7e\001\002\000\060\003\uffa0" +
    "\004\uffa0\005\uffa0\006\uffa0\007\uffa0\010\uffa0\012\uffa0\013" +
    "\uffa0\016\uffa0\021\uffa0\023\uffa0\027\uffa0\031\uffa0\032\uffa0" +
    "\033\uffa0\034\uffa0\040\uffa0\043\uffa0\070\uffa0\071\uffa0\072" +
    "\uffa0\073\uffa0\077\uffa0\001\002\000\060\003\uffa1\004\uffa1" +
    "\005\uffa1\006\uffa1\007\uffa1\010\uffa1\012\uffa1\013\uffa1\016" +
    "\uffa1\021\uffa1\023\uffa1\027\uffa1\031\uffa1\032\uffa1\033\uffa1" +
    "\034\uffa1\040\uffa1\043\uffa1\070\uffa1\071\uffa1\072\uffa1\073" +
    "\uffa1\077\uffa1\001\002\000\004\072\220\001\002\000\004" +
    "\035\217\001\002\000\004\035\216\001\002\000\012\061" +
    "\203\062\205\063\206\064\204\001\002\000\024\031\061" +
    "\041\157\070\047\071\074\072\153\073\161\074\160\075" +
    "\163\077\156\001\002\000\004\035\uffa8\001\002\000\004" +
    "\040\144\001\002\000\060\003\uff9f\004\uff9f\005\uff9f\006" +
    "\uff9f\007\uff9f\010\uff9f\012\uff9f\013\uff9f\016\uff9f\021\uff9f" +
    "\023\uff9f\027\uff9f\031\uff9f\032\uff9f\033\uff9f\034\uff9f\040" +
    "\uff9f\043\uff9f\070\uff9f\071\uff9f\072\uff9f\073\uff9f\077\uff9f" +
    "\001\002\000\004\035\143\001\002\000\004\077\117\001" +
    "\002\000\004\035\116\001\002\000\020\035\uff80\041\uff80" +
    "\047\uff80\061\uff80\062\uff80\063\uff80\064\uff80\001\002\000" +
    "\004\035\uffc9\001\002\000\004\077\113\001\002\000\004" +
    "\035\112\001\002\000\020\035\uff9b\037\uff9b\041\uff9b\047" +
    "\uff9b\065\uff9b\066\uff9b\067\uff9b\001\002\000\004\035\uffcb" +
    "\001\002\000\004\040\077\001\002\000\014\072\101\073" +
    "\102\074\104\075\103\077\100\001\002\000\004\041\111" +
    "\001\002\000\004\041\110\001\002\000\004\041\107\001" +
    "\002\000\004\041\106\001\002\000\004\041\105\001\002" +
    "\000\004\035\uffab\001\002\000\004\035\uffaa\001\002\000" +
    "\004\035\uffac\001\002\000\004\035\uffad\001\002\000\004" +
    "\035\uffa9\001\002\000\060\003\uff9e\004\uff9e\005\uff9e\006" +
    "\uff9e\007\uff9e\010\uff9e\012\uff9e\013\uff9e\016\uff9e\021\uff9e" +
    "\023\uff9e\027\uff9e\031\uff9e\032\uff9e\033\uff9e\034\uff9e\040" +
    "\uff9e\043\uff9e\070\uff9e\071\uff9e\072\uff9e\073\uff9e\077\uff9e" +
    "\001\002\000\006\035\uffba\036\114\001\002\000\004\075" +
    "\115\001\002\000\004\035\uffb9\001\002\000\060\003\uffa5" +
    "\004\uffa5\005\uffa5\006\uffa5\007\uffa5\010\uffa5\012\uffa5\013" +
    "\uffa5\016\uffa5\021\uffa5\023\uffa5\027\uffa5\031\uffa5\032\uffa5" +
    "\033\uffa5\034\uffa5\040\uffa5\043\uffa5\070\uffa5\071\uffa5\072" +
    "\uffa5\073\uffa5\077\uffa5\001\002\000\006\035\uffc1\036\120" +
    "\001\002\000\012\031\061\072\124\073\130\077\127\001" +
    "\002\000\010\035\uffc0\051\137\052\140\001\002\000\016" +
    "\035\uff88\041\uff88\051\uff88\052\uff88\053\uff88\054\uff88\001" +
    "\002\000\016\035\uff8d\041\uff8d\051\uff8d\052\uff8d\053\uff8d" +
    "\054\uff8d\001\002\000\016\035\uff8c\041\uff8c\051\uff8c\052" +
    "\uff8c\053\uff8c\054\uff8c\001\002\000\016\035\uff90\041\uff90" +
    "\051\uff90\052\uff90\053\133\054\134\001\002\000\016\035" +
    "\uff89\041\uff89\051\uff89\052\uff89\053\uff89\054\uff89\001\002" +
    "\000\022\035\uff8a\041\uff8a\051\uff8a\052\uff8a\053\uff8a\054" +
    "\uff8a\057\132\060\131\001\002\000\016\035\uff8b\041\uff8b" +
    "\051\uff8b\052\uff8b\053\uff8b\054\uff8b\001\002\000\016\035" +
    "\uff99\041\uff99\051\uff99\052\uff99\053\uff99\054\uff99\001\002" +
    "\000\016\035\uff9a\041\uff9a\051\uff9a\052\uff9a\053\uff9a\054" +
    "\uff9a\001\002\000\012\031\061\072\124\073\130\077\127" +
    "\001\002\000\012\031\061\072\124\073\130\077\127\001" +
    "\002\000\016\035\uff8e\041\uff8e\051\uff8e\052\uff8e\053\uff8e" +
    "\054\uff8e\001\002\000\016\035\uff8f\041\uff8f\051\uff8f\052" +
    "\uff8f\053\uff8f\054\uff8f\001\002\000\012\031\061\072\124" +
    "\073\130\077\127\001\002\000\012\031\061\072\124\073" +
    "\130\077\127\001\002\000\016\035\uff91\041\uff91\051\uff91" +
    "\052\uff91\053\133\054\134\001\002\000\016\035\uff92\041" +
    "\uff92\051\uff92\052\uff92\053\133\054\134\001\002\000\060" +
    "\003\uffa3\004\uffa3\005\uffa3\006\uffa3\007\uffa3\010\uffa3\012" +
    "\uffa3\013\uffa3\016\uffa3\021\uffa3\023\uffa3\027\uffa3\031\uffa3" +
    "\032\uffa3\033\uffa3\034\uffa3\040\uffa3\043\uffa3\070\uffa3\071" +
    "\uffa3\072\uffa3\073\uffa3\077\uffa3\001\002\000\020\031\061" +
    "\040\025\070\047\071\074\072\035\073\052\077\146\001" +
    "\002\000\004\041\147\001\002\000\020\035\uff7b\037\uff7b" +
    "\041\uff7b\047\uff7b\065\uff7b\066\uff7b\067\uff7b\001\002\000" +
    "\004\042\150\001\002\000\056\003\050\004\026\005\066" +
    "\006\036\007\021\010\072\012\055\013\017\016\041\021" +
    "\033\023\063\027\045\031\061\032\062\033\076\034\024" +
    "\040\025\070\047\071\074\072\035\073\052\077\042\001" +
    "\002\000\004\043\152\001\002\000\060\003\uff67\004\uff67" +
    "\005\uff67\006\uff67\007\uff67\010\uff67\012\uff67\013\uff67\016" +
    "\uff67\021\uff67\023\uff67\027\uff67\031\uff67\032\uff67\033\uff67" +
    "\034\uff67\040\uff67\043\uff67\070\uff67\071\uff67\072\uff67\073" +
    "\uff67\077\uff67\001\002\000\006\041\uffdf\047\201\001\002" +
    "\000\006\041\uffdb\047\177\001\002\000\006\041\uffd9\047" +
    "\175\001\002\000\006\041\uffda\047\173\001\002\000\030" +
    "\035\uffeb\037\uffeb\041\uffeb\047\uffeb\051\uffeb\052\uffeb\053" +
    "\uffeb\054\uffeb\065\uffeb\066\uffeb\067\uffeb\001\002\000\006" +
    "\041\uffdd\047\171\001\002\000\006\041\uffde\047\167\001" +
    "\002\000\004\041\166\001\002\000\006\041\uffdc\047\164" +
    "\001\002\000\022\031\061\070\047\071\074\072\153\073" +
    "\161\074\160\075\163\077\156\001\002\000\004\041\uffd5" +
    "\001\002\000\030\035\uffea\037\uffea\041\uffea\047\uffea\051" +
    "\uffea\052\uffea\053\uffea\054\uffea\065\uffea\066\uffea\067\uffea" +
    "\001\002\000\022\031\061\070\047\071\074\072\153\073" +
    "\161\074\160\075\163\077\156\001\002\000\004\041\uffd7" +
    "\001\002\000\022\031\061\070\047\071\074\072\153\073" +
    "\161\074\160\075\163\077\156\001\002\000\004\041\uffd6" +
    "\001\002\000\022\031\061\070\047\071\074\072\153\073" +
    "\161\074\160\075\163\077\156\001\002\000\004\041\uffd3" +
    "\001\002\000\022\031\061\070\047\071\074\072\153\073" +
    "\161\074\160\075\163\077\156\001\002\000\004\041\uffd2" +
    "\001\002\000\022\031\061\070\047\071\074\072\153\073" +
    "\161\074\160\075\163\077\156\001\002\000\004\041\uffd4" +
    "\001\002\000\022\031\061\070\047\071\074\072\153\073" +
    "\161\074\160\075\163\077\156\001\002\000\004\041\uffd8" +
    "\001\002\000\010\040\uff71\072\uff71\073\uff71\001\002\000" +
    "\010\040\uff6e\072\uff6e\073\uff6e\001\002\000\010\040\uff70" +
    "\072\uff70\073\uff70\001\002\000\010\040\uff6f\072\uff6f\073" +
    "\uff6f\001\002\000\010\040\211\072\035\073\052\001\002" +
    "\000\010\035\uff85\041\uff85\047\uff85\001\002\000\012\031" +
    "\061\072\124\073\130\077\127\001\002\000\012\035\uff94" +
    "\041\uff94\051\137\052\140\001\002\000\006\035\uff93\041" +
    "\uff93\001\002\000\004\041\215\001\002\000\020\035\uff7c" +
    "\041\uff7c\047\uff7c\061\uff7c\062\uff7c\063\uff7c\064\uff7c\001" +
    "\002\000\060\003\uffa6\004\uffa6\005\uffa6\006\uffa6\007\uffa6" +
    "\010\uffa6\012\uffa6\013\uffa6\016\uffa6\021\uffa6\023\uffa6\027" +
    "\uffa6\031\uffa6\032\uffa6\033\uffa6\034\uffa6\040\uffa6\043\uffa6" +
    "\070\uffa6\071\uffa6\072\uffa6\073\uffa6\077\uffa6\001\002\000" +
    "\060\003\uffa7\004\uffa7\005\uffa7\006\uffa7\007\uffa7\010\uffa7" +
    "\012\uffa7\013\uffa7\016\uffa7\021\uffa7\023\uffa7\027\uffa7\031" +
    "\uffa7\032\uffa7\033\uffa7\034\uffa7\040\uffa7\043\uffa7\070\uffa7" +
    "\071\uffa7\072\uffa7\073\uffa7\077\uffa7\001\002\000\004\045" +
    "\221\001\002\000\004\077\222\001\002\000\006\035\uffc8" +
    "\036\223\001\002\000\004\076\224\001\002\000\004\035" +
    "\uffc7\001\002\000\060\003\uffa4\004\uffa4\005\uffa4\006\uffa4" +
    "\007\uffa4\010\uffa4\012\uffa4\013\uffa4\016\uffa4\021\uffa4\023" +
    "\uffa4\027\uffa4\031\uffa4\032\uffa4\033\uffa4\034\uffa4\040\uffa4" +
    "\043\uffa4\070\uffa4\071\uffa4\072\uffa4\073\uffa4\077\uffa4\001" +
    "\002\000\060\003\uff9d\004\uff9d\005\uff9d\006\uff9d\007\uff9d" +
    "\010\uff9d\012\uff9d\013\uff9d\016\uff9d\021\uff9d\023\uff9d\027" +
    "\uff9d\031\uff9d\032\uff9d\033\uff9d\034\uff9d\040\uff9d\043\uff9d" +
    "\070\uff9d\071\uff9d\072\uff9d\073\uff9d\077\uff9d\001\002\000" +
    "\004\035\ufffc\001\002\000\004\035\ufffb\001\002\000\004" +
    "\035\ufff8\001\002\000\004\035\ufffa\001\002\000\004\035" +
    "\ufff9\001\002\000\004\043\uffcf\001\002\000\006\072\244" +
    "\077\243\001\002\000\022\031\061\070\047\071\074\072" +
    "\124\073\130\074\241\075\242\077\127\001\002\000\010" +
    "\035\uffb2\051\137\052\140\001\002\000\004\035\uffb4\001" +
    "\002\000\004\035\uffbb\001\002\000\004\035\uffb8\001\002" +
    "\000\004\045\250\001\002\000\004\045\245\001\002\000" +
    "\004\036\246\001\002\000\012\031\061\072\124\073\130" +
    "\077\127\001\002\000\004\035\uffaf\001\002\000\004\036" +
    "\251\001\002\000\012\031\061\072\124\073\130\077\127" +
    "\001\002\000\004\035\uffae\001\002\000\020\031\061\040" +
    "\025\070\047\071\074\072\035\073\052\077\146\001\002" +
    "\000\004\041\255\001\002\000\004\017\256\001\002\000" +
    "\004\042\257\001\002\000\056\003\050\004\026\005\066" +
    "\006\036\007\021\010\072\012\055\013\017\016\041\021" +
    "\033\023\063\027\045\031\061\032\062\033\076\034\024" +
    "\040\025\070\047\071\074\072\035\073\052\077\042\001" +
    "\002\000\004\043\261\001\002\000\062\003\uff69\004\uff69" +
    "\005\uff69\006\uff69\007\uff69\010\uff69\012\uff69\013\uff69\016" +
    "\uff69\020\262\021\uff69\023\uff69\027\uff69\031\uff69\032\uff69" +
    "\033\uff69\034\uff69\040\uff69\043\uff69\070\uff69\071\uff69\072" +
    "\uff69\073\uff69\077\uff69\001\002\000\004\042\263\001\002" +
    "\000\056\003\050\004\026\005\066\006\036\007\021\010" +
    "\072\012\055\013\017\016\041\021\033\023\063\027\045" +
    "\031\061\032\062\033\076\034\024\040\025\070\047\071" +
    "\074\072\035\073\052\077\042\001\002\000\004\043\265" +
    "\001\002\000\060\003\uff68\004\uff68\005\uff68\006\uff68\007" +
    "\uff68\010\uff68\012\uff68\013\uff68\016\uff68\021\uff68\023\uff68" +
    "\027\uff68\031\uff68\032\uff68\033\uff68\034\uff68\040\uff68\043" +
    "\uff68\070\uff68\071\uff68\072\uff68\073\uff68\077\uff68\001\002" +
    "\000\006\035\uffb7\036\267\001\002\000\014\031\061\040" +
    "\272\070\047\071\074\077\146\001\002\000\004\035\uffb5" +
    "\001\002\000\014\035\uffb6\037\uff7a\065\uff7a\066\uff7a\067" +
    "\uff7a\001\002\000\010\040\211\072\035\073\052\001\002" +
    "\000\004\041\274\001\002\000\020\035\uff78\037\uff78\041" +
    "\uff78\047\uff78\065\uff78\066\uff78\067\uff78\001\002\000\004" +
    "\004\276\001\002\000\004\077\277\001\002\000\004\036" +
    "\300\001\002\000\004\072\301\001\002\000\004\047\uff65" +
    "\001\002\000\004\047\303\001\002\000\020\031\061\040" +
    "\025\070\047\071\074\072\035\073\052\077\146\001\002" +
    "\000\004\047\305\001\002\000\002\001\002\000\004\041" +
    "\307\001\002\000\004\042\310\001\002\000\056\003\050" +
    "\004\026\005\066\006\036\007\021\010\072\012\055\013" +
    "\017\016\041\021\033\023\063\027\045\031\061\032\062" +
    "\033\076\034\024\040\025\070\047\071\074\072\035\073" +
    "\052\077\042\001\002\000\004\043\312\001\002\000\060" +
    "\003\uff66\004\uff66\005\uff66\006\uff66\007\uff66\010\uff66\012" +
    "\uff66\013\uff66\016\uff66\021\uff66\023\uff66\027\uff66\031\uff66" +
    "\032\uff66\033\uff66\034\uff66\040\uff66\043\uff66\070\uff66\071" +
    "\uff66\072\uff66\073\uff66\077\uff66\001\002\000\004\002\ufffd" +
    "\001\002\000\014\031\061\040\272\070\047\071\074\077" +
    "\146\001\002\000\014\031\uff6d\040\uff6d\070\uff6d\071\uff6d" +
    "\077\uff6d\001\002\000\014\031\uff6a\040\uff6a\070\uff6a\071" +
    "\uff6a\077\uff6a\001\002\000\014\031\uff6c\040\uff6c\070\uff6c" +
    "\071\uff6c\077\uff6c\001\002\000\014\031\uff6b\040\uff6b\070" +
    "\uff6b\071\uff6b\077\uff6b\001\002\000\020\035\uff83\037\320" +
    "\041\uff83\047\uff83\065\315\066\317\067\316\001\002\000" +
    "\010\035\uff84\041\uff84\047\uff84\001\002\000\014\031\061" +
    "\040\272\070\047\071\074\077\146\001\002\000\010\035" +
    "\uff82\041\uff82\047\uff82\001\002\000\006\035\uffc4\036\326" +
    "\001\002\000\012\031\061\072\124\073\130\077\127\001" +
    "\002\000\010\035\uffc3\051\137\052\140\001\002\000\004" +
    "\035\uffc2\001\002\000\024\041\uff8c\051\uff8c\052\uff8c\053" +
    "\uff8c\054\uff8c\061\uff7f\062\uff7f\063\uff7f\064\uff7f\001\002" +
    "\000\024\041\uff8b\051\uff8b\052\uff8b\053\uff8b\054\uff8b\061" +
    "\uff7e\062\uff7e\063\uff7e\064\uff7e\001\002\000\004\043\uffce" +
    "\001\002\000\006\035\uffbf\036\335\001\002\000\010\031" +
    "\061\074\340\077\337\001\002\000\004\035\uffbd\001\002" +
    "\000\004\035\uffbc\001\002\000\004\035\uffbe\001\002\000" +
    "\004\045\342\001\002\000\004\077\343\001\002\000\006" +
    "\035\uffc6\036\344\001\002\000\004\076\345\001\002\000" +
    "\004\035\uffc5\001\002\000\060\003\uffa2\004\uffa2\005\uffa2" +
    "\006\uffa2\007\uffa2\010\uffa2\012\uffa2\013\uffa2\016\uffa2\021" +
    "\uffa2\023\uffa2\027\uffa2\031\uffa2\032\uffa2\033\uffa2\034\uffa2" +
    "\040\uffa2\043\uffa2\070\uffa2\071\uffa2\072\uffa2\073\uffa2\077" +
    "\uffa2\001\002\000\004\041\u0102\001\002\000\014\004\355" +
    "\006\353\007\354\010\351\011\356\001\002\000\004\077" +
    "\377\001\002\000\004\041\373\001\002\000\004\077\370" +
    "\001\002\000\004\077\365\001\002\000\004\077\362\001" +
    "\002\000\004\077\357\001\002\000\006\041\uffe6\047\360" +
    "\001\002\000\014\004\355\006\353\007\354\010\351\011" +
    "\356\001\002\000\004\041\uffe1\001\002\000\006\041\uffe9" +
    "\047\363\001\002\000\014\004\355\006\353\007\354\010" +
    "\351\011\356\001\002\000\004\041\uffe4\001\002\000\006" +
    "\041\uffe8\047\366\001\002\000\014\004\355\006\353\007" +
    "\354\010\351\011\356\001\002\000\004\041\uffe3\001\002" +
    "\000\006\041\uffe7\047\371\001\002\000\014\004\355\006" +
    "\353\007\354\010\351\011\356\001\002\000\004\041\uffe2" +
    "\001\002\000\004\042\374\001\002\000\056\003\050\004" +
    "\026\005\066\006\036\007\021\010\072\012\055\013\017" +
    "\016\041\021\033\023\063\027\045\031\061\032\062\033" +
    "\076\034\024\040\025\070\047\071\074\072\035\073\052" +
    "\077\042\001\002\000\004\043\376\001\002\000\010\004" +
    "\ufff0\005\ufff0\007\ufff0\001\002\000\006\041\uffe5\047\u0100" +
    "\001\002\000\014\004\355\006\353\007\354\010\351\011" +
    "\356\001\002\000\004\041\uffe0\001\002\000\004\042\u0103" +
    "\001\002\000\056\003\050\004\026\005\066\006\036\007" +
    "\021\010\072\012\055\013\017\016\041\021\033\023\063" +
    "\027\045\031\061\032\062\033\076\034\024\040\025\070" +
    "\047\071\074\072\035\073\052\077\042\001\002\000\004" +
    "\043\u0105\001\002\000\010\004\ufff6\005\ufff6\007\ufff6\001" +
    "\002\000\016\004\uffef\006\uffef\007\uffef\010\uffef\011\uffef" +
    "\041\ufff5\001\002\000\004\041\u010e\001\002\000\014\004" +
    "\355\006\353\007\354\010\351\011\356\001\002\000\004" +
    "\041\u010a\001\002\000\004\042\u010b\001\002\000\056\003" +
    "\050\004\026\005\066\006\036\007\021\010\072\012\055" +
    "\013\017\016\041\021\033\023\063\027\045\031\061\032" +
    "\062\033\076\034\024\040\025\070\047\071\074\072\035" +
    "\073\052\077\042\001\002\000\004\043\u010d\001\002\000" +
    "\010\004\uffee\005\uffee\007\uffee\001\002\000\004\042\u010f" +
    "\001\002\000\056\003\050\004\026\005\066\006\036\007" +
    "\021\010\072\012\055\013\017\016\041\021\033\023\063" +
    "\027\045\031\061\032\062\033\076\034\024\040\025\070" +
    "\047\071\074\072\035\073\052\077\042\001\002\000\004" +
    "\043\u0111\001\002\000\010\004\ufff4\005\ufff4\007\ufff4\001" +
    "\002\000\016\004\uffed\006\uffed\007\uffed\010\uffed\011\uffed" +
    "\041\ufff3\001\002\000\004\041\u011a\001\002\000\014\004" +
    "\355\006\353\007\354\010\351\011\356\001\002\000\004" +
    "\041\u0116\001\002\000\004\042\u0117\001\002\000\056\003" +
    "\050\004\026\005\066\006\036\007\021\010\072\012\055" +
    "\013\017\016\041\021\033\023\063\027\045\031\061\032" +
    "\062\033\076\034\024\040\025\070\047\071\074\072\035" +
    "\073\052\077\042\001\002\000\004\043\u0119\001\002\000" +
    "\010\004\uffec\005\uffec\007\uffec\001\002\000\004\042\u011b" +
    "\001\002\000\056\003\050\004\026\005\066\006\036\007" +
    "\021\010\072\012\055\013\017\016\041\021\033\023\063" +
    "\027\045\031\061\032\062\033\076\034\024\040\025\070" +
    "\047\071\074\072\035\073\052\077\042\001\002\000\004" +
    "\043\u011d\001\002\000\010\004\ufff2\005\ufff2\007\ufff2\001" +
    "\002\000\004\002\001\001\002\000\004\002\000\001\002" +
    "" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\u011d\000\010\002\005\003\004\004\003\001\001\000" +
    "\010\002\u011e\003\004\004\003\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\006\070\346\073\347\001\001\000\004" +
    "\067\013\001\001\000\002\001\001\000\070\005\022\006" +
    "\031\007\066\010\050\011\064\012\043\013\055\022\017" +
    "\024\036\025\057\026\030\032\053\033\052\034\063\041" +
    "\015\042\072\043\056\045\033\050\074\051\021\052\045" +
    "\053\027\054\070\055\042\056\067\057\026\064\037\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\070\005\022\006\332\007\066\010\050\011\064\012\043" +
    "\013\055\022\017\024\036\025\057\026\030\032\053\033" +
    "\052\034\063\041\015\042\072\043\056\045\033\050\074" +
    "\051\021\052\045\053\027\054\070\055\042\056\067\057" +
    "\026\064\037\001\001\000\032\005\125\024\272\025\057" +
    "\044\213\045\033\046\211\047\212\055\042\056\067\060" +
    "\122\061\124\065\121\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\031\313\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\070\005\022\006\233\007\066\010\050\011\064\012" +
    "\043\013\055\022\017\024\036\025\057\026\030\032\053" +
    "\033\052\034\063\041\015\042\072\043\056\045\033\050" +
    "\074\051\021\052\045\053\027\054\070\055\042\056\067" +
    "\057\026\064\037\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\030\206\001\001\000\010\005\154\016\161\057\153\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\014\005\125\046\120\060\122\061" +
    "\124\065\121\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\010\005\125\060\135\065" +
    "\121\001\001\000\010\005\125\060\134\065\121\001\001" +
    "\000\002\001\001\000\002\001\001\000\012\005\125\060" +
    "\122\061\141\065\121\001\001\000\012\005\125\060\122" +
    "\061\140\065\121\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\026\005\022\013\144\022\017" +
    "\024\036\025\057\026\030\045\033\055\042\056\067\057" +
    "\026\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\070\005\022\006\150\007\066\010\050\011" +
    "\064\012\043\013\055\022\017\024\036\025\057\026\030" +
    "\032\053\033\052\034\063\041\015\042\072\043\056\045" +
    "\033\050\074\051\021\052\045\053\027\054\070\055\042" +
    "\056\067\057\026\064\037\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\010\005\154\016\164\057\153\001\001\000\002\001" +
    "\001\000\002\001\001\000\010\005\154\016\167\057\153" +
    "\001\001\000\002\001\001\000\010\005\154\016\171\057" +
    "\153\001\001\000\002\001\001\000\010\005\154\016\173" +
    "\057\153\001\001\000\002\001\001\000\010\005\154\016" +
    "\175\057\153\001\001\000\002\001\001\000\010\005\154" +
    "\016\177\057\153\001\001\000\002\001\001\000\010\005" +
    "\154\016\201\057\153\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\012\025\207\045\033\055\042\056\067\001\001" +
    "\000\002\001\001\000\020\005\125\044\213\046\211\047" +
    "\212\060\122\061\124\065\121\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\016" +
    "\005\125\046\236\057\237\060\122\061\124\065\121\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\020\005\125\044\246\046\211\047\212" +
    "\060\122\061\124\065\121\001\001\000\002\001\001\000" +
    "\002\001\001\000\020\005\125\044\251\046\211\047\212" +
    "\060\122\061\124\065\121\001\001\000\002\001\001\000" +
    "\026\005\022\013\253\022\017\024\036\025\057\026\030" +
    "\045\033\055\042\056\067\057\026\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\070\005\022" +
    "\006\257\007\066\010\050\011\064\012\043\013\055\022" +
    "\017\024\036\025\057\026\030\032\053\033\052\034\063" +
    "\041\015\042\072\043\056\045\033\050\074\051\021\052" +
    "\045\053\027\054\070\055\042\056\067\057\026\064\037" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\070\005\022\006\263\007\066\010\050\011\064" +
    "\012\043\013\055\022\017\024\036\025\057\026\030\032" +
    "\053\033\052\034\063\041\015\042\072\043\056\045\033" +
    "\050\074\051\021\052\045\053\027\054\070\055\042\056" +
    "\067\057\026\064\037\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\012\005\022\022\267\026" +
    "\030\057\270\001\001\000\002\001\001\000\002\001\001" +
    "\000\014\024\272\025\057\045\033\055\042\056\067\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\037\301\001" +
    "\001\000\002\001\001\000\002\001\001\000\026\005\022" +
    "\013\303\022\017\024\036\025\057\026\030\045\033\055" +
    "\042\056\067\057\026\001\001\000\002\001\001\000\004" +
    "\014\305\001\001\000\002\001\001\000\002\001\001\000" +
    "\070\005\022\006\310\007\066\010\050\011\064\012\043" +
    "\013\055\022\017\024\036\025\057\026\030\032\053\033" +
    "\052\034\063\041\015\042\072\043\056\045\033\050\074" +
    "\051\021\052\045\053\027\054\070\055\042\056\067\057" +
    "\026\064\037\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\012\005\022\023\321\026\320\057" +
    "\026\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\031\322\001\001\000" +
    "\002\001\001\000\012\005\022\023\323\026\320\057\026" +
    "\001\001\000\002\001\001\000\002\001\001\000\016\005" +
    "\125\046\326\047\327\060\122\061\124\065\121\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\005\335\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\015\351\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\015\360\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\015\363\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\015\366\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\015\371\001\001\000\002\001\001" +
    "\000\002\001\001\000\070\005\022\006\374\007\066\010" +
    "\050\011\064\012\043\013\055\022\017\024\036\025\057" +
    "\026\030\032\053\033\052\034\063\041\015\042\072\043" +
    "\056\045\033\050\074\051\021\052\045\053\027\054\070" +
    "\055\042\056\067\057\026\064\037\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\015\u0100" +
    "\001\001\000\002\001\001\000\002\001\001\000\070\005" +
    "\022\006\u0103\007\066\010\050\011\064\012\043\013\055" +
    "\022\017\024\036\025\057\026\030\032\053\033\052\034" +
    "\063\041\015\042\072\043\056\045\033\050\074\051\021" +
    "\052\045\053\027\054\070\055\042\056\067\057\026\064" +
    "\037\001\001\000\002\001\001\000\002\001\001\000\006" +
    "\071\u0106\074\u0107\001\001\000\002\001\001\000\004\015" +
    "\u0108\001\001\000\002\001\001\000\002\001\001\000\070" +
    "\005\022\006\u010b\007\066\010\050\011\064\012\043\013" +
    "\055\022\017\024\036\025\057\026\030\032\053\033\052" +
    "\034\063\041\015\042\072\043\056\045\033\050\074\051" +
    "\021\052\045\053\027\054\070\055\042\056\067\057\026" +
    "\064\037\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\070\005\022\006\u010f\007\066\010\050" +
    "\011\064\012\043\013\055\022\017\024\036\025\057\026" +
    "\030\032\053\033\052\034\063\041\015\042\072\043\056" +
    "\045\033\050\074\051\021\052\045\053\027\054\070\055" +
    "\042\056\067\057\026\064\037\001\001\000\002\001\001" +
    "\000\002\001\001\000\006\072\u0112\075\u0113\001\001\000" +
    "\002\001\001\000\004\015\u0114\001\001\000\002\001\001" +
    "\000\002\001\001\000\070\005\022\006\u0117\007\066\010" +
    "\050\011\064\012\043\013\055\022\017\024\036\025\057" +
    "\026\030\032\053\033\052\034\063\041\015\042\072\043" +
    "\056\045\033\050\074\051\021\052\045\053\027\054\070" +
    "\055\042\056\067\057\026\064\037\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\070\005\022" +
    "\006\u011b\007\066\010\050\011\064\012\043\013\055\022" +
    "\017\024\036\025\057\026\030\032\053\033\052\034\063" +
    "\041\015\042\072\043\056\045\033\050\074\051\021\052" +
    "\045\053\027\054\070\055\042\056\067\057\026\064\037" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}


  /** Scan to get the next Symbol. */
  public java_cup.runtime.Symbol scan()
    throws java.lang.Exception
    {
 return s.next_token(); 
    }


    Scanner s;
    public parser(int t, Scanner s, SymbolTableManager manager, Lexer lexer){ 
      this.s=s; 
      this.stManager = manager;
      this.lexer = lexer;
      }
    public boolean syntaxErrors;
    public int syntaxErrs = 0;
    public SymbolTableManager stManager;
    public SymbolTable currentSymbolTable = null;
    public String currentFunction;
    public Lexer lexer;

    @Override
    public void syntax_error(Symbol current_token) {
      String errInfo = "SYNTAX ERROR AT LINE " + (current_token.left) + " COLUMN " 
        + (current_token.right) + " VALUE: " + current_token.value;
      System.out.println(errInfo); 
      reportErrToFile(errInfo);
      this.syntaxErrs += 1;
    }    

    private void reportErrToFile(String info){
      FileManager fileManager = new FileManager("C:/Users/chris/Documents/NetBeansProjects/CeI-PYI/src/main/java/symbolTable/Tokens.txt");
      fileManager.writeToFile(info);
    }

    // Converts String to Integer.
    private Integer convertToInteger(Object val){
      //System.out.println("**********************VALUE CONVERTING TO INT: " + val);
      return Integer.parseInt(val.toString());
    }
    // Converts String to Float.
    private Float convertToFloat(Object val){
      //System.out.println("**********************VALUE CONVERTING TO FLOAT: " + val);
      return Float.parseFloat(val.toString());
    }
    public void initParser(Lexer lexer){
        //Object result;
        try {
            //BufferedReader br = new BufferedReader(new FileReader(file));
            parser codeParser = new parser(0,
                    s, lexer.getSymbolTableManager(), lexer);
            Object result = codeParser.parse().value;
            //result = codeParser.parse().value;
            System.out.println("THE PARSER RESULT IS: " + result);
            String res = this.syntaxErrs > 0? "THERE WERE " + syntaxErrs + 
              "ERRORS. THE CODE CANNOT BE GENERATED." : "THE CODE CAN BE GENERATED.";
            System.out.println(res);
        } catch (Exception ex) {
            //System.err.println("AT THIS TIME RESULT IS: " + result);
            System.err.println("AN ERROR HAS BEEN FOUND. PROCEEDING WITH THE REST OF THE FILE.");
            ex.printStackTrace();
        }
    }
    
  public void printSymbolTable() {
    int index = 0;
    int size = stManager.getSymbolTables().size();
    for(int i = 0; i < size; i++) {
      System.out.println();
      String funcName = stManager.getSymbolTables().get(i).getFuncName();
      String funcType = stManager.getSymbolTables().get(i).getFuncType();
      String funcReturn = stManager.getSymbolTables().get(i).getReturnVal();
      ArrayList<String> funcParams = stManager.getSymbolTables().get(i).getFuncParams();
      int funcScope = stManager.getSymbolTables().get(i).getTableScope();
      Map<String,ArrayList<String>> current = stManager.getSymbolTables().get(i).getSymbolTable();
      System.out.println("FUNCTION \t SCOPE \t\t VARIABLES \t ATTRIBUTES \t\t FUNC RETURN TYPE \t\t FUNC RETURN VAL \t\t FUNC PARAMS");
      current.forEach(
        (k, v) -> System.out.println(funcName + "\t\t " + funcScope +" \t\t " + k + " \t\t " + v
          + "\t\t\t " + funcType + "\t\t\t " + funcReturn + "\t\t\t\t " + funcParams 
          + "\n_________________________________________________________________________________________________________________________________________________________")
      );
    } 
  }

  public boolean checkVarExistance(String id) {
    ArrayList<SymbolTable> sTables = this.stManager.getSymbolTables();
    int limit = sTables.size() - 1;
    SymbolTable st;
    for (int i = 0; i <= limit; i++) {
      st = sTables.get(i);
      if(st.getFuncName().equals(this.currentFunction)) {
        if(st.getSymbolTable().containsKey(id)) {
          return true;
        }
      }
    }
    return false;
  }
  // Updates the symbol table entries for type and value for the given id.
  public void updateIntegerSymbolTable(Object id, Object type, Integer val) {
    ArrayList<SymbolTable> sTables = this.stManager.getSymbolTables();
    int limit = sTables.size() - 1;
    SymbolTable st;
    ArrayList<String> attributes = new ArrayList<>();
    attributes.add(type.toString());
    attributes.add(val != null? Integer.toString(val) : null);
    for (int i = 0; i <= limit; i++) {
      st = sTables.get(i);
      if(st.getFuncName().equals(this.currentFunction)) {
        st.getSymbolTable().
          computeIfPresent(id.toString(), (key, value) -> value = attributes);
      }
    }
  }

  // Updates the symbol table entries for type and value for the given id.
  public void updateFloatSymbolTable(Object id, Object type, Float val) {
    ArrayList<SymbolTable> sTables = this.stManager.getSymbolTables();
    int limit = sTables.size() - 1;
    SymbolTable st;
    ArrayList<String> attributes = new ArrayList<>();
    attributes.add(type.toString());
    attributes.add(val != null? Float.toString(val) : null);
    for (int i = 0; i <= limit; i++) {
      st = sTables.get(i);
      if(st.getFuncName().equals(this.currentFunction)) {
        st.getSymbolTable().
          computeIfPresent(id.toString(), (key, value) -> value = attributes);
      }
    }
  }

  // Updates the symbol table entries for type and value for the given id.
  public void updateCharacterSymbolTable(Object id, Object type, Character val) {
    ArrayList<SymbolTable> sTables = this.stManager.getSymbolTables();
    int limit = sTables.size() - 1;
    SymbolTable st;
    ArrayList<String> attributes = new ArrayList<>();
    attributes.add(type.toString());
    attributes.add(val != null? String.valueOf(val) : null);
    for (int i = 0; i <= limit; i++) {
      st = sTables.get(i);
      if(st.getFuncName().equals(this.currentFunction)) {
        st.getSymbolTable().
          computeIfPresent(id.toString(), (key, value) -> value = attributes);
      }
    }
  }

  // Updates the symbol table entries for type and value for the given id.
  public void updateStringSymbolTable(Object id, Object type, String val) {
    ArrayList<SymbolTable> sTables = this.stManager.getSymbolTables();
    int limit = sTables.size() - 1;
    SymbolTable st;
    ArrayList<String> attributes = new ArrayList<>();
    attributes.add(type.toString());
    attributes.add(val != null? val : null);
    for (int i = 0; i <= limit; i++) {
      st = sTables.get(i);
      if(st.getFuncName().equals(this.currentFunction)) {
        st.getSymbolTable().
          computeIfPresent(id.toString(), (key, value) -> value = attributes);
      }
    }
  }

  // Updates the symbol table entries for type and value for the given id.
  public void updateBooleanSymbolTable(Object id, Object type, String val) {
    ArrayList<SymbolTable> sTables = this.stManager.getSymbolTables();
    int limit = sTables.size() - 1;
    SymbolTable st;
    ArrayList<String> attributes = new ArrayList<>();
    attributes.add(type.toString());
    attributes.add(val != null? val : null);
    for (int i = 0; i <= limit; i++) {
      st = sTables.get(i);
      if(st.getFuncName().equals(this.currentFunction)) {
        st.getSymbolTable().
          computeIfPresent(id.toString(), (key, value) -> value = attributes);
      }
    }
  }

  // To manage variable scope and presence.
  public void updateCurrentFunction(Object name) {
    //System.out.println("CURRENT FUNCTION IS: " + name.toString());
    this.currentFunction = name.toString();
  }

  public String getIdValue(String id) {
    ArrayList<SymbolTable> sTables = this.stManager.getSymbolTables();
    int limit = sTables.size() - 1;
    SymbolTable st;
    String res = "";
    for (int i = 0; i <= limit; i++) {
      st = sTables.get(i);
      if(st.getFuncName().equals(this.currentFunction)) {
        //System.out.println("CURRENT FUNCTION IS: " + this.currentFunction + "ST FUNCTION IS: " + st.getFuncName());
        if(st.getTableScope() != 0){
          res = st.getSymbolTable().get(id).get(1);
          return res;
        }
      }
    }
    return res;
  }

  public String getIdType(String id) {
    ArrayList<SymbolTable> sTables = this.stManager.getSymbolTables();
    int limit = sTables.size() - 1;
    SymbolTable st;
    String res = "";
    for (int i = 0; i <= limit; i++) {
      st = sTables.get(i);
      if(st.getFuncName().equals(this.currentFunction)) {
        //System.out.println("CURRENT FUNCTION IS: " + this.currentFunction + "ST FUNCTION IS: " + st.getFuncName());
        if(st.getTableScope() != 0){
          if(st.getSymbolTable().containsKey(id)) {
            res = st.getSymbolTable().get(id).get(0);
          } else {
            res = "-e2";
          }
          return res;
        }
      }
    }
    return res;
  }

  public String getFuncType(String id) {
    ArrayList<SymbolTable> sTables = this.stManager.getSymbolTables();
    int limit = sTables.size() - 1;
    SymbolTable st;
    String res = "";
    for (int i = 0; i <= limit; i++) {
      st = sTables.get(i);
      System.out.println("COMPARING: " + id + "ST FUNCTION IS: " + st.getFuncName());
      if(st.getTableScope() == 0){
        if(st.getFuncName().equals(id)) {
          res = st.getSymbolTable().get(id).get(0);
          } else {
            res = "-e4";
          }
        }
      } 
    return res;
    }

  // id means refers to variale id and type refers to either variable or function.
  // dataType refers to the required data type for the id to be valid in any operation.
  // Validates the existance of the given id, the scope and value type.
  
public String validateId(String id, String type , String dataType) {    
    // First, validates the existance and scope.
    String result;
    if(validateScope(id)) {
      result = getIdValue(id);
      //System.out.println("RESULT OF ID VALIDATION IS: " + result);
    } else {
      result = "-e1";
    }
    return result;
}

  public String validateFunc(String func, String funcType) {
    
    // First, validates the existance and scope.
    String result = "";
    String res = "";
    ArrayList<SymbolTable> sTables = this.stManager.getSymbolTables();
    SymbolTable st;
    int limit = sTables.size() - 1;
    for (int i = 0; i <= limit; i++) {
      st = sTables.get(i); 
      if(st.getTableScope() == 1) {
        //System.out.println("COMPARING " + st.getFuncName() + " TO " + func);
        if(st.getFuncName().equals(func)) {
          //System.out.println("COMPARING TYPES " + st.getFuncType() + " TO " + funcType);
          if(st.getFuncType().equals(funcType)) {
            res = st.getReturnVal();
            if(!NumberUtils.isParsable(res)) {
                result = getValueFromFunc(func, res);
                return result;
              } else {
                result = st.getReturnVal();
                }
          } else {
            result = "-e2";
            return result;
          }
        }
        result = "-e4";
      }
    }
    return result;
}

  public String getValueFromFunc(String func, String id) {
    ArrayList<SymbolTable> sTables = this.stManager.getSymbolTables();
    int limit = sTables.size() - 1;
    SymbolTable st;
    String result = "";
    for (int i = 0; i <= limit; i++) {
      st = sTables.get(i);
      if(st.getTableScope() != 0 && st.getFuncName().equals(func)) {        
        result = st.getSymbolTable().get(id).get(1);
        return result;
      }
    }

    return result;
  } 
  public boolean validateScope(String id) {
    boolean result = false;
    ArrayList<SymbolTable> sTables = this.stManager.getSymbolTables();
    SymbolTable st;
    int limit = sTables.size() - 1;
    for (int i = 0; i <= limit; i++) {
      st = sTables.get(i);
      if(st.getFuncName().equals(this.currentFunction)) {
        if (st.getSymbolTable().containsKey(id)) {
          int currentScope = lexer.scope;
          // Checks for current scope.
          if (st.getTableScope() < currentScope) {
            //System.out.println("LA VARIABLE EXISTE EN SCOPE ARRIBA");
            result = true;
          } // Checks if it exists on higher scopes. 
          else if (st.getTableScope() == currentScope) {
            //System.out.println("LA VARIABLE EXISTE EN SCOPE PRESENTE");
            result = true;
          } else {
            result = false;
          }
        }
      }
    }
    //System.out.println("VER SI VARIABLE EXISTE: " + id + " - " + result);
    return result;
  }

  // Reports semantic err according to the number received.
  // -e1 means no such id or no such id in the current scope.
  // -e2 means type conflict.
  // -e3 means id has null value.
  // -e4 means no such function.
  public String reportSemanticErr(String lexeme, String errType) {
    String err = "";
    if(errType.equals("-e1")) {
      err = "--------------- SEMANTIC ERR: NO SUCH VARIABLE " + lexeme + " CREATED OR IN SCOPE. ---------------";
    } else if(errType.equals("-e2")) {
      err = "--------------- SEMANTIC ERR: OPERAND, FUNCTION OR VARIABLE " + lexeme + " DATA TYPE CONFLICT FOR VARIBLE " + lexer.idExamination + ". ---------------";
    } else if(errType.equals("-e4")) {
      err = "--------------- SEMANTIC ERR: NO SUCH FUNCTION " + lexeme + " EXISTS. ---------------";
      } else if(errType.equals("-e5")) {
      err = "--------------- SEMANTIC ERR: UNDECLARED VARIABLE " + lexeme + ".---------------";
      } 
    reportErrToFile(err);
    return err;
}



/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$parser$actions {
  private final parser parser;

  /** Constructor */
  CUP$parser$actions(parser parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$parser$do_action_part00000000(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$parser$result;

      /* select the action based on the action number */
      switch (CUP$parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= ini EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = start_val;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$parser$parser.done_parsing();
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // ini ::= function ini 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("ini",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // ini ::= main 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("ini",0, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // NT$0 ::= 
            {
              Object RESULT =null;
		int nameleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object name = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
 
              updateCurrentFunction(name); 
              //System.out.println("CURRENT FUNC IS: " + currentFunction); 
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$0",53, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // main ::= INT MAIN NT$0 LCURLY codeBlock RCURLY 
            {
              Object RESULT =null;
              // propagate RESULT from NT$0
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int nameleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Object name = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("main",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // return ::= RETURN ID 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("return",32, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // return ::= RETURN INTLIT 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("return",32, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // return ::= RETURN FLOATLIT 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("return",32, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // return ::= RETURN CHARLIT 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("return",32, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // return ::= RETURN STRING 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("return",32, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // NT$1 ::= 
            {
              Object RESULT =null;
		int nameleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object name = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
 updateCurrentFunction(name);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$1",54, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // function ::= INT FUNC NT$1 RPAREN LCURLY codeBlock RCURLY 
            {
              Object RESULT =null;
              // propagate RESULT from NT$1
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int nameleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		Object name = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("function",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // NT$2 ::= 
            {
              Object RESULT =null;
		int nameleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object name = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
 updateCurrentFunction(name);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$2",55, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // function ::= CHAR FUNC NT$2 RPAREN LCURLY codeBlock RCURLY 
            {
              Object RESULT =null;
              // propagate RESULT from NT$2
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int nameleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		Object name = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("function",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // NT$3 ::= 
            {
              Object RESULT =null;
		int nameleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object name = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
 updateCurrentFunction(name);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$3",56, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // function ::= FLOAT FUNC NT$3 RPAREN LCURLY codeBlock RCURLY 
            {
              Object RESULT =null;
              // propagate RESULT from NT$3
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int nameleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		Object name = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("function",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // NT$4 ::= 
            {
              Object RESULT =null;
		int nameleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object name = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
 updateCurrentFunction(name);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$4",57, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // function ::= INT FUNC NT$4 parameters RPAREN LCURLY codeBlock RCURLY 
            {
              Object RESULT =null;
              // propagate RESULT from NT$4
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int nameleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		Object name = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("function",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // NT$5 ::= 
            {
              Object RESULT =null;
		int nameleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object name = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
 updateCurrentFunction(name);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$5",58, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // function ::= CHAR FUNC NT$5 parameters RPAREN LCURLY codeBlock RCURLY 
            {
              Object RESULT =null;
              // propagate RESULT from NT$5
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int nameleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		Object name = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("function",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // NT$6 ::= 
            {
              Object RESULT =null;
		int nameleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object name = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
 updateCurrentFunction(name);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$6",59, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // function ::= FLOAT FUNC NT$6 parameters RPAREN LCURLY codeBlock RCURLY 
            {
              Object RESULT =null;
              // propagate RESULT from NT$6
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int nameleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		Object name = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("function",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // functionInv ::= FUNC RPAREN 
            {
              Object RESULT =null;
		int nameleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object name = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
              RESULT = name;
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("functionInv",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // functionInv ::= FUNC parametersInv RPAREN 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("functionInv",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // parameters ::= INT ID 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 System.out.println("PARAM ES: " + id); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("parameters",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // parameters ::= CHAR ID 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("parameters",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // parameters ::= BOOL ID 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("parameters",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // parameters ::= ARRAY ID 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("parameters",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // parameters ::= STRING ID 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("parameters",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // parameters ::= INT ID COMMA parameters 
            {
              Object RESULT =null;
		int paramleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int paramright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object param = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("parameters",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // parameters ::= CHAR ID COMMA parameters 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("parameters",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // parameters ::= BOOL ID COMMA parameters 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("parameters",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // parameters ::= ARRAY ID COMMA parameters 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("parameters",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // parameters ::= STRING ID COMMA parameters 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("parameters",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // parametersInv ::= INTLIT 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("parametersInv",12, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // parametersInv ::= FLOATLIT 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("parametersInv",12, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // parametersInv ::= CHARLIT 
            {
              Object RESULT =null;
		 System.out.println("PARAM ES: "); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("parametersInv",12, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // parametersInv ::= STRINGLIT 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("parametersInv",12, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // parametersInv ::= boolLit 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("parametersInv",12, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // parametersInv ::= ID 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("parametersInv",12, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // parametersInv ::= functionInv 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("parametersInv",12, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // parametersInv ::= INTLIT COMMA parametersInv 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("parametersInv",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // parametersInv ::= FLOATLIT COMMA parametersInv 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("parametersInv",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // parametersInv ::= CHARLIT COMMA parametersInv 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("parametersInv",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // parametersInv ::= STRINGLIT COMMA parametersInv 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("parametersInv",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // parametersInv ::= boolLit COMMA parametersInv 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("parametersInv",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // parametersInv ::= ID COMMA parametersInv 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("parametersInv",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // parametersInv ::= functionInv COMMA parametersInv 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("parametersInv",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // codeBlock ::= expression 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("codeBlock",4, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // codeBlock ::= COMMENT 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("codeBlock",4, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // codeBlock ::= expression codeBlock 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("codeBlock",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // codeBlock ::= COMMENT codeBlock 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("codeBlock",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // varCreationAsign ::= intCreationAssign 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("varCreationAsign",33, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // varCreationAsign ::= floatCreationAssign 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("varCreationAsign",33, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // varCreationAsign ::= charCreationAssign 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("varCreationAsign",33, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // varCreationAsign ::= stringCreationAssign 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("varCreationAsign",33, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // varCreationAsign ::= boolCreationAssign 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("varCreationAsign",33, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // varCreationAsign ::= INTARR INTLIT RSQUARE ID 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("varCreationAsign",33, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // varCreationAsign ::= INTARR INTLIT RSQUARE ID EQ ARRAYLIT 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("varCreationAsign",33, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // varCreationAsign ::= CHARARR INTLIT RSQUARE ID 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("varCreationAsign",33, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // varCreationAsign ::= CHARARR INTLIT RSQUARE ID EQ ARRAYLIT 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("varCreationAsign",33, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // intCreationAssign ::= INT ID 
            {
              Object RESULT =null;
		int dTypeleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int dTyperight = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object dType = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
              RESULT = null;
              //System.out.println("EL ID DE INT ES: " + id);
              //System.out.println(" --> EL VALOR DE " + id + " ES: " + RESULT);
              updateIntegerSymbolTable(id, dType, null);
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("intCreationAssign",39, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // intCreationAssign ::= INT ID EQ intMathExpression 
            {
              Object RESULT =null;
		int dTypeleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int dTyperight = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Object dType = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object val = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
            //System.out.println("ENTRO A INT:dType ID:id EQ intMathExpression:val");
              if(val.getClass().toString().equals("class java.lang.Integer")) {
                RESULT = val;
                //System.out.println("EL ID DE INT ES: " + id);
                //System.out.println(" --> EL VALOR DE " + id + " ES: " + val);
                updateIntegerSymbolTable(id, dType, convertToInteger(RESULT));
              } else {
              System.out.println("*** SEMANTIC ERR *** ID: " + id + " ES INT ES Y ASIGNO FLOAT.");
              }
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("intCreationAssign",39, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // intCreationAssign ::= INT ID EQ floatMathExpression 
            {
              Object RESULT =null;
		int dTypeleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int dTyperight = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Object dType = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Float val = (Float)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
              RESULT = null;
              System.out.println("*** SEMANTIC ERR *** ID ES INT Y ASIGNO FLOAT.");
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("intCreationAssign",39, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // floatCreationAssign ::= FLOAT ID 
            {
              Object RESULT =null;
		int dTypeleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int dTyperight = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object dType = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
              RESULT = null;
              System.out.println("EL ID DE FLOAT ES: " + id);
              System.out.println(" --> EL VALOR DE " + id + " ES: " + RESULT);
              updateFloatSymbolTable(id, dType, null);
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("floatCreationAssign",40, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // floatCreationAssign ::= FLOAT ID EQ intMathExpression 
            {
              Object RESULT =null;
		int dTypeleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int dTyperight = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Object dType = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object val = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
              RESULT = val;
              //System.out.println("EL ID DE FLOAT ES: " + id);
              //System.out.println(" --> EL VALOR DE " + id + " ES: " + val);
              updateFloatSymbolTable(id, dType, convertToFloat(RESULT));
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("floatCreationAssign",40, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // charCreationAssign ::= CHAR ID 
            {
              Character RESULT =null;
		int dTypeleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int dTyperight = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object dType = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
              RESULT = null;
              System.out.println("EL ID DE CHARLIT ES: " + id);
              System.out.println(" --> EL VALOR DE " + id + " ES: " + RESULT);
              updateCharacterSymbolTable(id, dType, RESULT);
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("charCreationAssign",38, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // charCreationAssign ::= CHAR ID EQ CHARLIT 
            {
              Character RESULT =null;
		int dTypeleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int dTyperight = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Object dType = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object val = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
              RESULT = Character.valueOf(val.toString().charAt(1));
              System.out.println("EL ID DE CHARLIT ES: " + id);
              System.out.println(" --> EL VALOR DE " + id + " ES: " + RESULT);
              updateCharacterSymbolTable(id, dType, RESULT); 
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("charCreationAssign",38, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // charCreationAssign ::= CHAR ID EQ functionInv 
            {
              Character RESULT =null;
		int dTypeleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int dTyperight = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Object dType = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object val = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
              String res = validateFunc(val.toString(), "char");
              if (!res.contains("-e")) {
                //System.out.println("ENTRO A PARSABLE");
                RESULT = res.charAt(0);
                updateCharacterSymbolTable(id, dType, RESULT);  
              } else {
                System.out.println(reportSemanticErr(val.toString(), res));
                RESULT = null;
              }
           
              CUP$parser$result = parser.getSymbolFactory().newSymbol("charCreationAssign",38, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // charCreationAssign ::= CHAR ID EQ ID 
            {
              Character RESULT =null;
		int dTypeleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int dTyperight = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Object dType = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object val = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
              System.out.println("ENTRO A functionInv PARA CHAR = " + val.toString());
              String res = validateId(val.toString(), "char", "id");
              if (!res.contains("-e")) {
                //System.out.println("ENTRO A PARSABLE");
                RESULT = res.charAt(0);
                updateCharacterSymbolTable(id, dType, RESULT);  
              } else {
                System.out.println(reportSemanticErr(val.toString(), res));
                RESULT = null;
              }
           
              CUP$parser$result = parser.getSymbolFactory().newSymbol("charCreationAssign",38, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // charCreationAssign ::= ID EQ CHARLIT 
            {
              Character RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object val = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
              String idType = getIdType(id.toString());
              if(idType.equals("char")) {
              RESULT = Character.valueOf(val.toString().charAt(1));
              updateCharacterSymbolTable(id, "char", RESULT); 
              } else {
                System.out.println(reportSemanticErr(id.toString(),"-e2"));
              }       
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("charCreationAssign",38, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // stringCreationAssign ::= STRING ID 
            {
              String RESULT =null;
		int dTypeleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int dTyperight = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object dType = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
              RESULT = null;
              System.out.println("EL ID DE STRING ES: " + id);
              System.out.println(" --> EL VALOR DE " + id + " ES: " + RESULT);
              updateStringSymbolTable(id, dType, RESULT); 
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("stringCreationAssign",41, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // stringCreationAssign ::= STRING ID EQ STRINGLIT 
            {
              String RESULT =null;
		int dTypeleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int dTyperight = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Object dType = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String val = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
              RESULT = val;
              System.out.println("EL ID DE STRING ES: " + id);
              System.out.println(" --> EL VALOR DE " + id + " ES: " + val);
              updateStringSymbolTable(id, dType, RESULT); 
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("stringCreationAssign",41, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // stringCreationAssign ::= ID EQ STRINGLIT 
            {
              String RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String val = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
              String idType = getIdType(id.toString());
              if(idType.equals("string")) {
              RESULT = val;
              updateStringSymbolTable(id, "string", RESULT.toString()); 
              } else {
                System.out.println(reportSemanticErr(id.toString(),"-e2"));
              }
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("stringCreationAssign",41, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // boolCreationAssign ::= BOOL ID 
            {
              Boolean RESULT =null;
		int dTypeleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int dTyperight = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object dType = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
              RESULT = null;
              System.out.println("EL ID DE BOOL ES: " + id);
              System.out.println(" --> EL VALOR DE " + id + " ES: " + RESULT);
              //updateBooleanSymbolTable(id, dType, null.toString());
              updateBooleanSymbolTable(id, dType, "null"); 
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("boolCreationAssign",42, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // boolCreationAssign ::= BOOL ID EQ boolLit 
            {
              Boolean RESULT =null;
		int dTypeleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int dTyperight = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Object dType = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Boolean val = (Boolean)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
              RESULT = val;
              System.out.println("EL ID DE BOOL ES: " + id);
              System.out.println(" --> EL VALOR DE " + id + " ES: " + val);
              updateBooleanSymbolTable(id, dType, RESULT.toString()); 
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("boolCreationAssign",42, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // boolCreationAssign ::= BOOL ID EQ logicalExpression 
            {
              Boolean RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("boolCreationAssign",42, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // boolCreationAssign ::= ID EQ boolLit 
            {
              Boolean RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Boolean val = (Boolean)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
              String idType = getIdType(id.toString());
              if(idType.equals("boolean")) {
              RESULT = val;
              updateBooleanSymbolTable(id, "boolean", RESULT.toString()); 
              } else {
                System.out.println(reportSemanticErr(id.toString(),"-e2"));
              }
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("boolCreationAssign",42, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // varAsign ::= intVarAsign 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("varAsign",5, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // intVarAsign ::= ID EQ intMathExpression 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object val = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
              RESULT = val;
              //System.out.println("ENTRO A intVarAsign");
              //System.out.println("EL ID ES: " + id);
              //System.out.println(" --> LA NUEVA ASIGNACION DE " + id + " ES: " + RESULT);
              if(lexer.idTypeExamination.equals("int")) {
                updateIntegerSymbolTable(id, "int", convertToInteger(val.toString()));
              }else if(lexer.idTypeExamination.equals("float")) {
                updateFloatSymbolTable(id, "float", convertToFloat(val.toString()));
              }
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("intVarAsign",50, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // arrayAccess ::= ID LSQUARE INTLIT RSQUARE 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("arrayAccess",30, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // arrayAccess ::= ID LSQUARE ID RSQUARE 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("arrayAccess",30, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // arrayValModification ::= ID LSQUARE INTLIT RSQUARE EQ mathExpression 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("arrayValModification",31, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // arrayValModification ::= ID LSQUARE ID RSQUARE EQ mathExpression 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("arrayValModification",31, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // printFunction ::= PRINT LPAREN INTLIT RPAREN 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("printFunction",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // printFunction ::= PRINT LPAREN FLOATLIT RPAREN 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("printFunction",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // printFunction ::= PRINT LPAREN CHARLIT RPAREN 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("printFunction",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // printFunction ::= PRINT LPAREN STRINGLIT RPAREN 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("printFunction",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // printFunction ::= PRINT LPAREN ID RPAREN 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("printFunction",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // readFunction ::= READ 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("readFunction",7, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // expression ::= logRelExpression HASH 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("expression",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // expression ::= varCreationAsign HASH 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("expression",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // expression ::= varAsign HASH 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("expression",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // expression ::= printFunction HASH 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("expression",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // expression ::= readFunction HASH 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("expression",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // expression ::= arrayValModification HASH 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("expression",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 96: // expression ::= if 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("expression",8, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 97: // expression ::= while 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("expression",8, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 98: // expression ::= for 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("expression",8, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 99: // expression ::= return HASH 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("expression",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 100: // expression ::= error HASH 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("expression",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 101: // boolLit ::= TRUE 
            {
              Boolean RESULT =null;
		 RESULT = true; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("boolLit",45, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 102: // boolLit ::= FALSE 
            {
              Boolean RESULT =null;
		 RESULT = false; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("boolLit",45, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 103: // intUnaryExpression ::= ID PADD 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
              String res;
              Object eval;
              if(lexer.idTypeExamination.equals("int")) { 
                res = validateId(id.toString(), "int", "id");
              } else {
                res = validateId(id.toString(), "float", "id");
              }
              if (NumberUtils.isParsable(res)) {
                if(lexer.idTypeExamination.equals("int")) { 
                  res = validateId(id.toString(), "int", "id");
                  eval = convertToInteger(res) + 1;
                  RESULT = eval;
                } else {
                  res = validateId(id.toString(), "float", "id");
                  eval = convertToFloat(res) + 1.0;       
                  RESULT = eval;          
                }              
              } else {
                System.out.println(reportSemanticErr(id.toString(), res));
              }
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("intUnaryExpression",51, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 104: // intUnaryExpression ::= ID PSUBS 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
              String res;
              Object eval;
              if(lexer.idTypeExamination.equals("int")) { 
                res = validateId(id.toString(), "int", "id");
              } else {
                res = validateId(id.toString(), "float", "id");
              }
              if (NumberUtils.isParsable(res)) {
                if(lexer.idTypeExamination.equals("int")) { 
                  res = validateId(id.toString(), "int", "id");
                  eval = convertToInteger(res) - 1;
                  RESULT = eval;
                } else {
                  res = validateId(id.toString(), "float", "id");
                  eval = convertToFloat(res) - 1.0;       
                  RESULT = eval;          
                }              
              } else {
                System.out.println(reportSemanticErr(id.toString(), res));
              }
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("intUnaryExpression",51, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 105: // floatUnaryExpression ::= INTLIT PADD 
            {
              Float RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("floatUnaryExpression",52, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 106: // floatUnaryExpression ::= INTLIT PSUBS 
            {
              Float RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("floatUnaryExpression",52, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 107: // floatUnaryExpression ::= FLOATLIT PADD 
            {
              Float RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("floatUnaryExpression",52, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 108: // floatUnaryExpression ::= FLOATLIT PSUBS 
            {
              Float RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("floatUnaryExpression",52, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 109: // mathExpression ::= intMathExpression 
            {
              Object RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object val = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
              System.out.println("EL RESULTADO FINAL ES: " + val);
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("mathExpression",34, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 110: // mathExpression ::= floatMathExpression 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("mathExpression",34, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 111: // intMathExpression ::= intMathExpression ADD intFactor 
            {
              Object RESULT =null;
		int op1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int op1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object op1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int op2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int op2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object op2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
              //System.out.println("HAY OPERACION: " + op1 + " + " + op2 + " = " + (op1 + op2));
              if(lexer.idTypeExamination.equals("int")) {
                RESULT = convertToInteger(op1) + convertToInteger(op2);
              } else if(lexer.idTypeExamination.equals("float")) {
                RESULT = convertToFloat(op1) + convertToFloat(op2);
              }
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("intMathExpression",36, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 112: // intMathExpression ::= intMathExpression SUBS intFactor 
            {
              Object RESULT =null;
		int op1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int op1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object op1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int op2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int op2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object op2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
              if(lexer.idTypeExamination.equals("int")) {
                RESULT = convertToInteger(op1) - convertToInteger(op2);
              } else if(lexer.idTypeExamination.equals("float")) {
                RESULT = convertToFloat(op1) - convertToFloat(op2);
              }
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("intMathExpression",36, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 113: // intMathExpression ::= intFactor 
            {
              Object RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object val = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
              //System.out.println("ENTRO A intFactor:val = " + val);
              if(lexer.idTypeExamination.equals("int")) {
                RESULT = convertToInteger(val.toString());
              } else if(lexer.idTypeExamination.equals("float")) {
                RESULT = convertToFloat(val.toString()); 
              }            
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("intMathExpression",36, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 114: // intFactor ::= intFactor MULT intTerm 
            {
              Object RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int fright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object f = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 
              Float fRes;
              Integer iRes;
              Object val;
              //System.out.println("ENTRO A intTerm:t = " + t);
              if(lexer.idTypeExamination.equals("int")) {
                iRes = convertToInteger(f.toString()) * convertToInteger(t.toString());
                val = iRes;
                RESULT = val;
              } else if(lexer.idTypeExamination.equals("float")) {
                fRes = convertToFloat(f.toString()) * convertToFloat(t.toString()); 
                val = fRes;
                RESULT = val;
              }
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("intFactor",47, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 115: // intFactor ::= intFactor DIV intTerm 
            {
              Object RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int fright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object f = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 
              Float fRes;
              Integer iRes;
              Object val;
              //System.out.println("ENTRO A intTerm:t = " + t);
              if(lexer.idTypeExamination.equals("int")) {
                iRes = convertToInteger(f.toString()) / convertToInteger(t.toString());
                val = iRes;
                RESULT = val; 
              } else if(lexer.idTypeExamination.equals("float")) {
                fRes = convertToFloat(f.toString()) / convertToFloat(t.toString());
                val = fRes;
                RESULT = val;
              }
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("intFactor",47, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 116: // intFactor ::= intTerm 
            {
              Object RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 
              Float fRes;
              Integer iRes;
              Object val;
              RESULT = 0;
              //System.out.println("ENTRO A intTerm:t = " + t);
              if(lexer.idTypeExamination.equals("int")) {
                iRes = convertToInteger(t.toString()); 
                val = iRes;
                RESULT = val;
              } else if(lexer.idTypeExamination.equals("float")) {
                fRes = convertToFloat(t.toString()); 
                val = fRes;
                RESULT = val;
              }
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("intFactor",47, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 117: // intTerm ::= INTLIT 
            {
              Object RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object n = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
              if(checkVarExistance(lexer.idExamination)) {
                System.out.println("LA VARIABLE " + lexer.idExamination + " EXISTE");
                if(validateScope(lexer.idExamination)) {
                  System.out.println("LA VARIABLE " + lexer.idExamination + " TIENE SCOPE VALIDO");
                  //System.out.println("DICE QUE SI EXISTE.");
                  String idType = getIdType(lexer.idExamination);
                  System.out.println("LA VARIABLE " + lexer.idExamination + " ES DE TIPO " + idType);
                  if(lexer.idTypeExamination.equals("int")) {
                    System.out.println("LA VARIABLE " + lexer.idExamination + " ES ENTERA");
                    RESULT = n;
                  } else {
                      System.out.println(reportSemanticErr(n.toString(), "-e2"));
                      RESULT = 0;
                    }
                  } else {
                    System.out.println(reportSemanticErr(lexer.idExamination, "-e1"));
                    RESULT = 0;
                  }
              } else {
                System.out.println(reportSemanticErr(lexer.idExamination, "-e5"));
                RESULT = 0;
              }

            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("intTerm",46, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 118: // intTerm ::= FLOATLIT 
            {
              Object RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object n = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
              if(checkVarExistance(lexer.idExamination)) {
                if(validateScope(lexer.idExamination)) {
                  String idType = getIdType(lexer.idExamination);
                  if(lexer.idTypeExamination.equals("float")) {
                    RESULT = n;
                  } else {
                    System.out.println(reportSemanticErr(n.toString(), "-e2"));
                    RESULT = 0;
                    }
                } else {
                  System.out.println(reportSemanticErr(lexer.idExamination, "-e1"));
                  RESULT = 0;
                  }
              } else {
                System.out.println(reportSemanticErr(lexer.idExamination, "-e5"));
                RESULT = 0;
                }

            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("intTerm",46, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 119: // intTerm ::= ID 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
              //System.out.println("ENTRO A ID = " + id);
              Object val = 0;
              String idType = getIdType(lexer.idExamination);
              String res = "";
              if(lexer.idTypeExamination.equals("int") && idType.equals("int")) { 
                res = validateId(id.toString(), "int", "id");
              } else if(lexer.idTypeExamination.equals("float") && idType.equals("float")) {
                res = validateId(id.toString(), "float", "id");
              } else {
                  res = "-e1";
                }
              if (NumberUtils.isParsable(res)) {
                val = res;
                RESULT = val;
              } else {
                  System.out.println(reportSemanticErr(id.toString(), res));
                  RESULT = 0;
              }
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("intTerm",46, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 120: // intTerm ::= functionInv 
            {
              Object RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object n = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 
              Object val = 0;
              String res;
              if(lexer.idTypeExamination.equals("int")) { 
                res = validateFunc(n.toString(), "int");
              } else {
                res = validateFunc(n.toString(), "float");
              }
              if (NumberUtils.isParsable(res)) {
                val = res;
                RESULT = val;
              } else {
                System.out.println(reportSemanticErr(n.toString(), res));
                RESULT = val;
              }
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("intTerm",46, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 121: // intTerm ::= intUnaryExpression 
            {
              Object RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object val = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                RESULT = val;
              
              CUP$parser$result = parser.getSymbolFactory().newSymbol("intTerm",46, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 122: // logRelExpression ::= logicalExpression 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("logRelExpression",9, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 123: // logRelExpression ::= relationalExpression 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("logRelExpression",9, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 124: // relationalExpression ::= relationalOperand relationalOperator relationalOperand 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("relationalExpression",18, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 125: // logicalExpression ::= logicalOperand logicalOperator logicalExpr 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("logicalExpression",16, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 126: // logicalExpr ::= logicalOperand 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("logicalExpr",17, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 127: // logicalExpr ::= logicalOperand logicalOperator logicalExpr 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("logicalExpr",17, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 128: // mathOperand ::= intMathOperand 
            {
              Object RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Integer val = (Integer)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = val; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("mathOperand",35, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 129: // mathOperand ::= floatMathOperand 
            {
              Object RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Float val = (Float)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = val; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("mathOperand",35, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 130: // intMathOperand ::= INTLIT 
            {
              Integer RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object val = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = convertToInteger(val); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("intMathOperand",43, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 131: // floatMathOperand ::= FLOATLIT 
            {
              Float RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object val = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = convertToFloat(val); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("floatMathOperand",44, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 132: // relationalOperand ::= mathOperand 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("relationalOperand",19, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 133: // relationalOperand ::= LPAREN mathExpression RPAREN 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("relationalOperand",19, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 134: // logicalOperand ::= ID 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("logicalOperand",20, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 135: // logicalOperand ::= boolLit 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("logicalOperand",20, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 136: // logicalOperand ::= functionInv 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("logicalOperand",20, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 137: // logicalOperand ::= LPAREN relationalExpression RPAREN 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("logicalOperand",20, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 138: // mathOperator ::= ADD 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("mathOperator",21, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 139: // mathOperator ::= SUBS 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("mathOperator",21, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 140: // mathOperator ::= DIV 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("mathOperator",21, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 141: // mathOperator ::= MULT 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("mathOperator",21, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 142: // mathOperator ::= EXP 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("mathOperator",21, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 143: // mathOperator ::= MOD 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("mathOperator",21, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 144: // relationalOperator ::= GTE 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("relationalOperator",22, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 145: // relationalOperator ::= GT 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("relationalOperator",22, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 146: // relationalOperator ::= LTE 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("relationalOperator",22, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 147: // relationalOperator ::= LT 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("relationalOperator",22, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 148: // logicalOperator ::= AND 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("logicalOperator",23, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 149: // logicalOperator ::= OR 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("logicalOperator",23, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 150: // logicalOperator ::= EQEQ 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("logicalOperator",23, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 151: // logicalOperator ::= NOT 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("logicalOperator",23, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 152: // if ::= IF LPAREN logRelExpression RPAREN THEN LCURLY codeBlock RCURLY 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("if",24, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 153: // if ::= IF LPAREN logRelExpression RPAREN THEN LCURLY codeBlock RCURLY ELSE LCURLY codeBlock RCURLY 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("if",24, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-11)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 154: // while ::= WHILE LPAREN logRelExpression RPAREN LCURLY codeBlock RCURLY 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("while",25, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 155: // for ::= FOR LPAREN INT ID EQ zero COMMA logRelExpression COMMA unaryExpression RPAREN LCURLY codeBlock RCURLY 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("for",26, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-13)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 156: // zero ::= INTLIT 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("zero",29, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$parser$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$parser$do_action(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
              return CUP$parser$do_action_part00000000(
                               CUP$parser$act_num,
                               CUP$parser$parser,
                               CUP$parser$stack,
                               CUP$parser$top);
    }
}

}
