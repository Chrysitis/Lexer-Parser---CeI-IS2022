
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

package cup;

import java_cup.runtime.*;
import jflex.*;
import fileManager.*;
import java.util.Map;
import symbolTable.*;
import java.util.ArrayList;
import org.apache.commons.lang3.math.NumberUtils;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class parser extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return sym.class;
}

  /** Default constructor. */
  @Deprecated
  public parser() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\237\000\002\002\004\000\002\002\003\000\002\002" +
    "\003\000\002\002\004\000\002\002\004\000\002\065\002" +
    "\000\002\003\010\000\002\042\004\000\002\042\004\000" +
    "\002\042\004\000\002\042\004\000\002\042\004\000\002" +
    "\066\002\000\002\004\011\000\002\067\002\000\002\004" +
    "\011\000\002\070\002\000\002\004\011\000\002\071\002" +
    "\000\002\004\012\000\002\072\002\000\002\004\012\000" +
    "\002\073\002\000\002\004\012\000\002\005\004\000\002" +
    "\005\005\000\002\015\004\000\002\015\004\000\002\015" +
    "\004\000\002\015\004\000\002\015\004\000\002\015\006" +
    "\000\002\015\006\000\002\015\006\000\002\015\006\000" +
    "\002\015\006\000\002\016\003\000\002\016\003\000\002" +
    "\016\003\000\002\016\003\000\002\016\003\000\002\016" +
    "\003\000\002\016\003\000\002\016\005\000\002\016\005" +
    "\000\002\016\005\000\002\016\005\000\002\016\005\000" +
    "\002\016\005\000\002\016\005\000\002\006\003\000\002" +
    "\006\003\000\002\006\004\000\002\043\003\000\002\043" +
    "\003\000\002\043\003\000\002\043\003\000\002\043\003" +
    "\000\002\043\006\000\002\043\010\000\002\043\006\000" +
    "\002\043\010\000\002\051\004\000\002\051\006\000\002" +
    "\051\006\000\002\052\004\000\002\052\006\000\002\050" +
    "\004\000\002\050\006\000\002\050\006\000\002\053\004" +
    "\000\002\053\006\000\002\054\004\000\002\054\006\000" +
    "\002\054\006\000\002\007\003\000\002\064\005\000\002" +
    "\040\006\000\002\040\006\000\002\041\010\000\002\041" +
    "\010\000\002\010\006\000\002\010\006\000\002\010\006" +
    "\000\002\010\006\000\002\010\006\000\002\011\003\000" +
    "\002\012\004\000\002\012\004\000\002\012\004\000\002" +
    "\012\004\000\002\012\004\000\002\012\004\000\002\012" +
    "\003\000\002\012\003\000\002\012\003\000\002\012\004" +
    "\000\002\012\004\000\002\057\003\000\002\057\003\000" +
    "\002\014\004\000\002\014\004\000\002\014\004\000\002" +
    "\014\004\000\002\014\004\000\002\014\004\000\002\044" +
    "\003\000\002\044\003\000\002\046\005\000\002\046\005" +
    "\000\002\046\003\000\002\061\005\000\002\061\005\000" +
    "\002\061\003\000\002\060\003\000\002\060\003\000\002" +
    "\060\003\000\002\047\005\000\002\047\005\000\002\047" +
    "\003\000\002\063\005\000\002\063\005\000\002\063\003" +
    "\000\002\062\003\000\002\013\003\000\002\013\003\000" +
    "\002\024\005\000\002\022\005\000\002\023\003\000\002" +
    "\023\005\000\002\045\003\000\002\045\003\000\002\055" +
    "\003\000\002\056\003\000\002\025\003\000\002\025\005" +
    "\000\002\026\003\000\002\026\003\000\002\026\003\000" +
    "\002\026\005\000\002\027\003\000\002\027\003\000\002" +
    "\027\003\000\002\027\003\000\002\027\003\000\002\027" +
    "\003\000\002\030\003\000\002\030\003\000\002\030\003" +
    "\000\002\030\003\000\002\031\003\000\002\031\003\000" +
    "\002\031\003\000\002\031\003\000\002\032\012\000\002" +
    "\032\016\000\002\033\011\000\002\034\020\000\002\037" +
    "\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\u0129\000\010\004\011\005\010\007\007\001\002\000" +
    "\012\002\000\004\011\005\010\007\007\001\002\000\012" +
    "\002\uffff\004\011\005\010\007\007\001\002\000\004\002" +
    "\u0129\001\002\000\004\031\u011d\001\002\000\004\031\u0111" +
    "\001\002\000\006\030\013\031\012\001\002\000\016\004" +
    "\uffef\006\uffef\007\uffef\010\uffef\011\uffef\041\ufff5\001\002" +
    "\000\004\042\ufffc\001\002\000\004\042\015\001\002\000" +
    "\056\003\050\004\026\005\066\006\036\007\021\010\072" +
    "\012\055\013\017\016\041\021\033\023\063\027\045\031" +
    "\061\032\062\033\076\034\024\040\025\070\047\071\074" +
    "\072\035\073\052\077\042\001\002\000\004\035\361\001" +
    "\002\000\004\072\354\001\002\000\010\035\uff85\041\uff85" +
    "\047\uff85\001\002\000\004\077\350\001\002\000\004\035" +
    "\uffcc\001\002\000\020\035\uff77\037\uff77\041\uff77\047\uff77" +
    "\065\uff77\066\uff77\067\uff77\001\002\000\004\043\uffce\001" +
    "\002\000\014\031\061\040\203\072\347\073\346\077\213" +
    "\001\002\000\004\077\342\001\002\000\020\035\uff78\037" +
    "\uff78\041\uff78\047\uff78\065\uff78\066\uff78\067\uff78\001\002" +
    "\000\004\035\uffc9\001\002\000\012\037\334\065\332\066" +
    "\335\067\333\001\002\000\004\043\330\001\002\000\004" +
    "\040\301\001\002\000\020\035\uff7b\041\uff7b\047\uff7b\061" +
    "\uff7b\062\uff7b\063\uff7b\064\uff7b\001\002\000\020\035\uff7d" +
    "\041\uff7d\047\uff7d\061\uff7d\062\uff7d\063\uff7d\064\uff7d\001" +
    "\002\000\004\077\272\001\002\000\010\035\uff84\041\uff84" +
    "\047\uff84\001\002\000\004\035\uffb6\001\002\000\004\040" +
    "\257\001\002\000\016\036\245\037\uff79\044\244\065\uff79" +
    "\066\uff79\067\uff79\001\002\000\020\035\uff7f\041\uff7f\047" +
    "\uff7f\061\uff7f\062\uff7f\063\uff7f\064\uff7f\001\002\000\060" +
    "\003\050\004\026\005\066\006\036\007\021\010\072\012" +
    "\055\013\017\016\041\021\033\023\063\027\045\031\061" +
    "\032\062\033\076\034\024\040\025\043\uffcf\070\047\071" +
    "\074\072\035\073\052\077\042\001\002\000\014\010\240" +
    "\072\237\073\241\074\242\077\236\001\002\000\004\035" +
    "\uffcb\001\002\000\020\035\uff9f\037\uff9f\041\uff9f\047\uff9f" +
    "\065\uff9f\066\uff9f\067\uff9f\001\002\000\004\035\235\001" +
    "\002\000\004\035\234\001\002\000\020\035\uff7c\041\uff7c" +
    "\047\uff7c\061\uff7c\062\uff7c\063\uff7c\064\uff7c\001\002\000" +
    "\060\003\uffa3\004\uffa3\005\uffa3\006\uffa3\007\uffa3\010\uffa3" +
    "\012\uffa3\013\uffa3\016\uffa3\021\uffa3\023\uffa3\027\uffa3\031" +
    "\uffa3\032\uffa3\033\uffa3\034\uffa3\040\uffa3\043\uffa3\070\uffa3" +
    "\071\uffa3\072\uffa3\073\uffa3\077\uffa3\001\002\000\060\003" +
    "\uffa4\004\uffa4\005\uffa4\006\uffa4\007\uffa4\010\uffa4\012\uffa4" +
    "\013\uffa4\016\uffa4\021\uffa4\023\uffa4\027\uffa4\031\uffa4\032" +
    "\uffa4\033\uffa4\034\uffa4\040\uffa4\043\uffa4\070\uffa4\071\uffa4" +
    "\072\uffa4\073\uffa4\077\uffa4\001\002\000\004\072\227\001" +
    "\002\000\004\035\226\001\002\000\004\035\225\001\002" +
    "\000\012\061\175\062\177\063\200\064\176\001\002\000" +
    "\024\031\061\041\151\070\047\071\074\072\145\073\153" +
    "\074\152\075\155\077\150\001\002\000\004\035\uffab\001" +
    "\002\000\004\040\136\001\002\000\060\003\uffa2\004\uffa2" +
    "\005\uffa2\006\uffa2\007\uffa2\010\uffa2\012\uffa2\013\uffa2\016" +
    "\uffa2\021\uffa2\023\uffa2\027\uffa2\031\uffa2\032\uffa2\033\uffa2" +
    "\034\uffa2\040\uffa2\043\uffa2\070\uffa2\071\uffa2\072\uffa2\073" +
    "\uffa2\077\uffa2\001\002\000\004\035\135\001\002\000\004" +
    "\077\117\001\002\000\004\035\116\001\002\000\020\035" +
    "\uff7e\041\uff7e\047\uff7e\061\uff7e\062\uff7e\063\uff7e\064\uff7e" +
    "\001\002\000\004\035\uffc8\001\002\000\004\077\113\001" +
    "\002\000\004\035\112\001\002\000\020\035\uff9e\037\uff9e" +
    "\041\uff9e\047\uff9e\065\uff9e\066\uff9e\067\uff9e\001\002\000" +
    "\004\035\uffca\001\002\000\004\040\077\001\002\000\014" +
    "\072\101\073\102\074\104\075\103\077\100\001\002\000" +
    "\004\041\111\001\002\000\004\041\110\001\002\000\004" +
    "\041\107\001\002\000\004\041\106\001\002\000\004\041" +
    "\105\001\002\000\004\035\uffae\001\002\000\004\035\uffad" +
    "\001\002\000\004\035\uffaf\001\002\000\004\035\uffb0\001" +
    "\002\000\004\035\uffac\001\002\000\060\003\uffa1\004\uffa1" +
    "\005\uffa1\006\uffa1\007\uffa1\010\uffa1\012\uffa1\013\uffa1\016" +
    "\uffa1\021\uffa1\023\uffa1\027\uffa1\031\uffa1\032\uffa1\033\uffa1" +
    "\034\uffa1\040\uffa1\043\uffa1\070\uffa1\071\uffa1\072\uffa1\073" +
    "\uffa1\077\uffa1\001\002\000\006\035\uffbb\036\114\001\002" +
    "\000\004\075\115\001\002\000\004\035\uffba\001\002\000" +
    "\060\003\uffa8\004\uffa8\005\uffa8\006\uffa8\007\uffa8\010\uffa8" +
    "\012\uffa8\013\uffa8\016\uffa8\021\uffa8\023\uffa8\027\uffa8\031" +
    "\uffa8\032\uffa8\033\uffa8\034\uffa8\040\uffa8\043\uffa8\070\uffa8" +
    "\071\uffa8\072\uffa8\073\uffa8\077\uffa8\001\002\000\006\035" +
    "\uffc0\036\120\001\002\000\004\073\124\001\002\000\016" +
    "\035\uff87\041\uff87\051\uff87\052\uff87\053\uff87\054\uff87\001" +
    "\002\000\010\035\uffbf\051\131\052\132\001\002\000\016" +
    "\035\uff8a\041\uff8a\051\uff8a\052\uff8a\053\125\054\126\001" +
    "\002\000\016\035\uff86\041\uff86\051\uff86\052\uff86\053\uff86" +
    "\054\uff86\001\002\000\004\073\124\001\002\000\004\073" +
    "\124\001\002\000\016\035\uff88\041\uff88\051\uff88\052\uff88" +
    "\053\uff88\054\uff88\001\002\000\016\035\uff89\041\uff89\051" +
    "\uff89\052\uff89\053\uff89\054\uff89\001\002\000\004\073\124" +
    "\001\002\000\004\073\124\001\002\000\016\035\uff8b\041" +
    "\uff8b\051\uff8b\052\uff8b\053\125\054\126\001\002\000\016" +
    "\035\uff8c\041\uff8c\051\uff8c\052\uff8c\053\125\054\126\001" +
    "\002\000\060\003\uffa6\004\uffa6\005\uffa6\006\uffa6\007\uffa6" +
    "\010\uffa6\012\uffa6\013\uffa6\016\uffa6\021\uffa6\023\uffa6\027" +
    "\uffa6\031\uffa6\032\uffa6\033\uffa6\034\uffa6\040\uffa6\043\uffa6" +
    "\070\uffa6\071\uffa6\072\uffa6\073\uffa6\077\uffa6\001\002\000" +
    "\020\031\061\040\025\070\047\071\074\072\035\073\052" +
    "\077\140\001\002\000\004\041\141\001\002\000\020\035" +
    "\uff79\037\uff79\041\uff79\047\uff79\065\uff79\066\uff79\067\uff79" +
    "\001\002\000\004\042\142\001\002\000\056\003\050\004" +
    "\026\005\066\006\036\007\021\010\072\012\055\013\017" +
    "\016\041\021\033\023\063\027\045\031\061\032\062\033" +
    "\076\034\024\040\025\070\047\071\074\072\035\073\052" +
    "\077\042\001\002\000\004\043\144\001\002\000\060\003" +
    "\uff65\004\uff65\005\uff65\006\uff65\007\uff65\010\uff65\012\uff65" +
    "\013\uff65\016\uff65\021\uff65\023\uff65\027\uff65\031\uff65\032" +
    "\uff65\033\uff65\034\uff65\040\uff65\043\uff65\070\uff65\071\uff65" +
    "\072\uff65\073\uff65\077\uff65\001\002\000\006\041\uffdd\047" +
    "\173\001\002\000\006\041\uffd9\047\171\001\002\000\006" +
    "\041\uffd7\047\167\001\002\000\006\041\uffd8\047\165\001" +
    "\002\000\030\035\uffe9\037\uffe9\041\uffe9\047\uffe9\051\uffe9" +
    "\052\uffe9\053\uffe9\054\uffe9\065\uffe9\066\uffe9\067\uffe9\001" +
    "\002\000\006\041\uffdb\047\163\001\002\000\006\041\uffdc" +
    "\047\161\001\002\000\004\041\160\001\002\000\006\041" +
    "\uffda\047\156\001\002\000\022\031\061\070\047\071\074" +
    "\072\145\073\153\074\152\075\155\077\150\001\002\000" +
    "\004\041\uffd3\001\002\000\030\035\uffe8\037\uffe8\041\uffe8" +
    "\047\uffe8\051\uffe8\052\uffe8\053\uffe8\054\uffe8\065\uffe8\066" +
    "\uffe8\067\uffe8\001\002\000\022\031\061\070\047\071\074" +
    "\072\145\073\153\074\152\075\155\077\150\001\002\000" +
    "\004\041\uffd5\001\002\000\022\031\061\070\047\071\074" +
    "\072\145\073\153\074\152\075\155\077\150\001\002\000" +
    "\004\041\uffd4\001\002\000\022\031\061\070\047\071\074" +
    "\072\145\073\153\074\152\075\155\077\150\001\002\000" +
    "\004\041\uffd1\001\002\000\022\031\061\070\047\071\074" +
    "\072\145\073\153\074\152\075\155\077\150\001\002\000" +
    "\004\041\uffd0\001\002\000\022\031\061\070\047\071\074" +
    "\072\145\073\153\074\152\075\155\077\150\001\002\000" +
    "\004\041\uffd2\001\002\000\022\031\061\070\047\071\074" +
    "\072\145\073\153\074\152\075\155\077\150\001\002\000" +
    "\004\041\uffd6\001\002\000\010\040\uff6f\072\uff6f\073\uff6f" +
    "\001\002\000\010\040\uff6c\072\uff6c\073\uff6c\001\002\000" +
    "\010\040\uff6e\072\uff6e\073\uff6e\001\002\000\010\040\uff6d" +
    "\072\uff6d\073\uff6d\001\002\000\010\040\203\072\035\073" +
    "\052\001\002\000\010\035\uff83\041\uff83\047\uff83\001\002" +
    "\000\012\031\061\072\207\073\124\077\213\001\002\000" +
    "\012\035\uff97\041\uff97\051\221\052\222\001\002\000\016" +
    "\035\uff90\041\uff90\051\uff90\052\uff90\053\uff90\054\uff90\001" +
    "\002\000\012\035\uff96\041\uff96\051\131\052\132\001\002" +
    "\000\016\035\uff8f\041\uff8f\051\uff8f\052\uff8f\053\uff8f\054" +
    "\uff8f\001\002\000\016\035\uff93\041\uff93\051\uff93\052\uff93" +
    "\053\215\054\216\001\002\000\004\041\214\001\002\000" +
    "\016\035\uff8d\041\uff8d\051\uff8d\052\uff8d\053\uff8d\054\uff8d" +
    "\001\002\000\016\035\uff8e\041\uff8e\051\uff8e\052\uff8e\053" +
    "\uff8e\054\uff8e\001\002\000\020\035\uff7a\041\uff7a\047\uff7a" +
    "\061\uff7a\062\uff7a\063\uff7a\064\uff7a\001\002\000\010\031" +
    "\061\072\207\077\213\001\002\000\010\031\061\072\207" +
    "\077\213\001\002\000\016\035\uff91\041\uff91\051\uff91\052" +
    "\uff91\053\uff91\054\uff91\001\002\000\016\035\uff92\041\uff92" +
    "\051\uff92\052\uff92\053\uff92\054\uff92\001\002\000\010\031" +
    "\061\072\207\077\213\001\002\000\010\031\061\072\207" +
    "\077\213\001\002\000\016\035\uff94\041\uff94\051\uff94\052" +
    "\uff94\053\215\054\216\001\002\000\016\035\uff95\041\uff95" +
    "\051\uff95\052\uff95\053\215\054\216\001\002\000\060\003" +
    "\uffa9\004\uffa9\005\uffa9\006\uffa9\007\uffa9\010\uffa9\012\uffa9" +
    "\013\uffa9\016\uffa9\021\uffa9\023\uffa9\027\uffa9\031\uffa9\032" +
    "\uffa9\033\uffa9\034\uffa9\040\uffa9\043\uffa9\070\uffa9\071\uffa9" +
    "\072\uffa9\073\uffa9\077\uffa9\001\002\000\060\003\uffaa\004" +
    "\uffaa\005\uffaa\006\uffaa\007\uffaa\010\uffaa\012\uffaa\013\uffaa" +
    "\016\uffaa\021\uffaa\023\uffaa\027\uffaa\031\uffaa\032\uffaa\033" +
    "\uffaa\034\uffaa\040\uffaa\043\uffaa\070\uffaa\071\uffaa\072\uffaa" +
    "\073\uffaa\077\uffaa\001\002\000\004\045\230\001\002\000" +
    "\004\077\231\001\002\000\006\035\uffc7\036\232\001\002" +
    "\000\004\076\233\001\002\000\004\035\uffc6\001\002\000" +
    "\060\003\uffa7\004\uffa7\005\uffa7\006\uffa7\007\uffa7\010\uffa7" +
    "\012\uffa7\013\uffa7\016\uffa7\021\uffa7\023\uffa7\027\uffa7\031" +
    "\uffa7\032\uffa7\033\uffa7\034\uffa7\040\uffa7\043\uffa7\070\uffa7" +
    "\071\uffa7\072\uffa7\073\uffa7\077\uffa7\001\002\000\060\003" +
    "\uffa0\004\uffa0\005\uffa0\006\uffa0\007\uffa0\010\uffa0\012\uffa0" +
    "\013\uffa0\016\uffa0\021\uffa0\023\uffa0\027\uffa0\031\uffa0\032" +
    "\uffa0\033\uffa0\034\uffa0\040\uffa0\043\uffa0\070\uffa0\071\uffa0" +
    "\072\uffa0\073\uffa0\077\uffa0\001\002\000\004\035\ufffa\001" +
    "\002\000\004\035\ufff9\001\002\000\004\035\ufff6\001\002" +
    "\000\004\035\ufff8\001\002\000\004\035\ufff7\001\002\000" +
    "\004\043\uffcd\001\002\000\006\072\250\077\247\001\002" +
    "\000\010\031\061\072\207\077\213\001\002\000\010\035" +
    "\uffb5\051\221\052\222\001\002\000\004\045\254\001\002" +
    "\000\004\045\251\001\002\000\004\036\252\001\002\000" +
    "\012\031\061\072\207\073\124\077\213\001\002\000\004" +
    "\035\uffb2\001\002\000\004\036\255\001\002\000\012\031" +
    "\061\072\207\073\124\077\213\001\002\000\004\035\uffb1" +
    "\001\002\000\020\031\061\040\025\070\047\071\074\072" +
    "\035\073\052\077\140\001\002\000\004\041\261\001\002" +
    "\000\004\017\262\001\002\000\004\042\263\001\002\000" +
    "\056\003\050\004\026\005\066\006\036\007\021\010\072" +
    "\012\055\013\017\016\041\021\033\023\063\027\045\031" +
    "\061\032\062\033\076\034\024\040\025\070\047\071\074" +
    "\072\035\073\052\077\042\001\002\000\004\043\265\001" +
    "\002\000\062\003\uff67\004\uff67\005\uff67\006\uff67\007\uff67" +
    "\010\uff67\012\uff67\013\uff67\016\uff67\020\266\021\uff67\023" +
    "\uff67\027\uff67\031\uff67\032\uff67\033\uff67\034\uff67\040\uff67" +
    "\043\uff67\070\uff67\071\uff67\072\uff67\073\uff67\077\uff67\001" +
    "\002\000\004\042\267\001\002\000\056\003\050\004\026" +
    "\005\066\006\036\007\021\010\072\012\055\013\017\016" +
    "\041\021\033\023\063\027\045\031\061\032\062\033\076" +
    "\034\024\040\025\070\047\071\074\072\035\073\052\077" +
    "\042\001\002\000\004\043\271\001\002\000\060\003\uff66" +
    "\004\uff66\005\uff66\006\uff66\007\uff66\010\uff66\012\uff66\013" +
    "\uff66\016\uff66\021\uff66\023\uff66\027\uff66\031\uff66\032\uff66" +
    "\033\uff66\034\uff66\040\uff66\043\uff66\070\uff66\071\uff66\072" +
    "\uff66\073\uff66\077\uff66\001\002\000\006\035\uffb9\036\273" +
    "\001\002\000\014\031\061\040\276\070\047\071\074\077" +
    "\140\001\002\000\004\035\uffb7\001\002\000\014\035\uffb8" +
    "\037\uff78\065\uff78\066\uff78\067\uff78\001\002\000\010\040" +
    "\203\072\035\073\052\001\002\000\004\041\300\001\002" +
    "\000\020\035\uff76\037\uff76\041\uff76\047\uff76\065\uff76\066" +
    "\uff76\067\uff76\001\002\000\004\004\302\001\002\000\004" +
    "\077\303\001\002\000\004\036\304\001\002\000\004\072" +
    "\305\001\002\000\004\047\uff63\001\002\000\004\047\307" +
    "\001\002\000\020\031\061\040\025\070\047\071\074\072" +
    "\035\073\052\077\140\001\002\000\004\047\311\001\002" +
    "\000\010\072\314\073\315\077\312\001\002\000\006\057" +
    "\327\060\326\001\002\000\004\041\322\001\002\000\006" +
    "\057\321\060\320\001\002\000\006\057\317\060\316\001" +
    "\002\000\004\041\uff98\001\002\000\004\041\uff99\001\002" +
    "\000\004\041\uff9a\001\002\000\004\041\uff9b\001\002\000" +
    "\004\042\323\001\002\000\056\003\050\004\026\005\066" +
    "\006\036\007\021\010\072\012\055\013\017\016\041\021" +
    "\033\023\063\027\045\031\061\032\062\033\076\034\024" +
    "\040\025\070\047\071\074\072\035\073\052\077\042\001" +
    "\002\000\004\043\325\001\002\000\060\003\uff64\004\uff64" +
    "\005\uff64\006\uff64\007\uff64\010\uff64\012\uff64\013\uff64\016" +
    "\uff64\021\uff64\023\uff64\027\uff64\031\uff64\032\uff64\033\uff64" +
    "\034\uff64\040\uff64\043\uff64\070\uff64\071\uff64\072\uff64\073" +
    "\uff64\077\uff64\001\002\000\004\041\uff9c\001\002\000\004" +
    "\041\uff9d\001\002\000\012\002\ufffb\004\ufffb\005\ufffb\007" +
    "\ufffb\001\002\000\014\031\061\040\276\070\047\071\074" +
    "\077\140\001\002\000\014\031\uff6b\040\uff6b\070\uff6b\071" +
    "\uff6b\077\uff6b\001\002\000\014\031\uff68\040\uff68\070\uff68" +
    "\071\uff68\077\uff68\001\002\000\014\031\uff69\040\uff69\070" +
    "\uff69\071\uff69\077\uff69\001\002\000\014\031\uff6a\040\uff6a" +
    "\070\uff6a\071\uff6a\077\uff6a\001\002\000\020\035\uff81\037" +
    "\334\041\uff81\047\uff81\065\332\066\335\067\333\001\002" +
    "\000\010\035\uff82\041\uff82\047\uff82\001\002\000\014\031" +
    "\061\040\276\070\047\071\074\077\140\001\002\000\010" +
    "\035\uff80\041\uff80\047\uff80\001\002\000\006\035\uffc3\036" +
    "\343\001\002\000\012\031\061\072\207\073\124\077\213" +
    "\001\002\000\010\035\uffc2\051\221\052\222\001\002\000" +
    "\010\035\uffc1\051\131\052\132\001\002\000\024\041\uff86" +
    "\051\uff86\052\uff86\053\uff86\054\uff86\061\uff7c\062\uff7c\063" +
    "\uff7c\064\uff7c\001\002\000\024\041\uff8f\051\uff8f\052\uff8f" +
    "\053\uff8f\054\uff8f\061\uff7d\062\uff7d\063\uff7d\064\uff7d\001" +
    "\002\000\006\035\uffbe\036\351\001\002\000\006\031\061" +
    "\074\353\001\002\000\004\035\uffbc\001\002\000\004\035" +
    "\uffbd\001\002\000\004\045\355\001\002\000\004\077\356" +
    "\001\002\000\006\035\uffc5\036\357\001\002\000\004\076" +
    "\360\001\002\000\004\035\uffc4\001\002\000\060\003\uffa5" +
    "\004\uffa5\005\uffa5\006\uffa5\007\uffa5\010\uffa5\012\uffa5\013" +
    "\uffa5\016\uffa5\021\uffa5\023\uffa5\027\uffa5\031\uffa5\032\uffa5" +
    "\033\uffa5\034\uffa5\040\uffa5\043\uffa5\070\uffa5\071\uffa5\072" +
    "\uffa5\073\uffa5\077\uffa5\001\002\000\004\041\u010d\001\002" +
    "\000\014\004\370\006\366\007\367\010\364\011\371\001" +
    "\002\000\004\077\u010a\001\002\000\004\041\u0106\001\002" +
    "\000\004\077\u0103\001\002\000\004\077\u0100\001\002\000" +
    "\004\077\375\001\002\000\004\077\372\001\002\000\006" +
    "\041\uffe4\047\373\001\002\000\014\004\370\006\366\007" +
    "\367\010\364\011\371\001\002\000\004\041\uffdf\001\002" +
    "\000\006\041\uffe7\047\376\001\002\000\014\004\370\006" +
    "\366\007\367\010\364\011\371\001\002\000\004\041\uffe2" +
    "\001\002\000\006\041\uffe6\047\u0101\001\002\000\014\004" +
    "\370\006\366\007\367\010\364\011\371\001\002\000\004" +
    "\041\uffe1\001\002\000\006\041\uffe5\047\u0104\001\002\000" +
    "\014\004\370\006\366\007\367\010\364\011\371\001\002" +
    "\000\004\041\uffe0\001\002\000\004\042\u0107\001\002\000" +
    "\056\003\050\004\026\005\066\006\036\007\021\010\072" +
    "\012\055\013\017\016\041\021\033\023\063\027\045\031" +
    "\061\032\062\033\076\034\024\040\025\070\047\071\074" +
    "\072\035\073\052\077\042\001\002\000\004\043\u0109\001" +
    "\002\000\012\002\uffee\004\uffee\005\uffee\007\uffee\001\002" +
    "\000\006\041\uffe3\047\u010b\001\002\000\014\004\370\006" +
    "\366\007\367\010\364\011\371\001\002\000\004\041\uffde" +
    "\001\002\000\004\042\u010e\001\002\000\056\003\050\004" +
    "\026\005\066\006\036\007\021\010\072\012\055\013\017" +
    "\016\041\021\033\023\063\027\045\031\061\032\062\033" +
    "\076\034\024\040\025\070\047\071\074\072\035\073\052" +
    "\077\042\001\002\000\004\043\u0110\001\002\000\012\002" +
    "\ufff4\004\ufff4\005\ufff4\007\ufff4\001\002\000\016\004\uffeb" +
    "\006\uffeb\007\uffeb\010\uffeb\011\uffeb\041\ufff1\001\002\000" +
    "\004\041\u0119\001\002\000\014\004\370\006\366\007\367" +
    "\010\364\011\371\001\002\000\004\041\u0115\001\002\000" +
    "\004\042\u0116\001\002\000\056\003\050\004\026\005\066" +
    "\006\036\007\021\010\072\012\055\013\017\016\041\021" +
    "\033\023\063\027\045\031\061\032\062\033\076\034\024" +
    "\040\025\070\047\071\074\072\035\073\052\077\042\001" +
    "\002\000\004\043\u0118\001\002\000\012\002\uffea\004\uffea" +
    "\005\uffea\007\uffea\001\002\000\004\042\u011a\001\002\000" +
    "\056\003\050\004\026\005\066\006\036\007\021\010\072" +
    "\012\055\013\017\016\041\021\033\023\063\027\045\031" +
    "\061\032\062\033\076\034\024\040\025\070\047\071\074" +
    "\072\035\073\052\077\042\001\002\000\004\043\u011c\001" +
    "\002\000\012\002\ufff0\004\ufff0\005\ufff0\007\ufff0\001\002" +
    "\000\016\004\uffed\006\uffed\007\uffed\010\uffed\011\uffed\041" +
    "\ufff3\001\002\000\004\041\u0125\001\002\000\014\004\370" +
    "\006\366\007\367\010\364\011\371\001\002\000\004\041" +
    "\u0121\001\002\000\004\042\u0122\001\002\000\056\003\050" +
    "\004\026\005\066\006\036\007\021\010\072\012\055\013" +
    "\017\016\041\021\033\023\063\027\045\031\061\032\062" +
    "\033\076\034\024\040\025\070\047\071\074\072\035\073" +
    "\052\077\042\001\002\000\004\043\u0124\001\002\000\012" +
    "\002\uffec\004\uffec\005\uffec\007\uffec\001\002\000\004\042" +
    "\u0126\001\002\000\056\003\050\004\026\005\066\006\036" +
    "\007\021\010\072\012\055\013\017\016\041\021\033\023" +
    "\063\027\045\031\061\032\062\033\076\034\024\040\025" +
    "\070\047\071\074\072\035\073\052\077\042\001\002\000" +
    "\004\043\u0128\001\002\000\012\002\ufff2\004\ufff2\005\ufff2" +
    "\007\ufff2\001\002\000\004\002\001\001\002\000\004\002" +
    "\ufffd\001\002\000\004\002\ufffe\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\u0129\000\010\002\005\003\003\004\004\001\001\000" +
    "\010\002\u012a\003\003\004\004\001\001\000\010\002\u0129" +
    "\003\003\004\004\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\006\066\361" +
    "\071\362\001\001\000\004\065\013\001\001\000\002\001" +
    "\001\000\070\005\022\006\031\007\066\010\050\011\064" +
    "\012\043\013\055\022\017\024\036\025\057\026\030\032" +
    "\053\033\052\034\063\041\015\042\072\043\056\045\033" +
    "\050\074\051\021\052\045\053\027\054\070\055\042\056" +
    "\067\057\026\064\037\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\034\005\211" +
    "\024\276\025\057\044\210\045\033\046\203\047\205\055" +
    "\042\056\067\060\204\061\207\062\120\063\122\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\031\330\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\070\005\022\006\242\007" +
    "\066\010\050\011\064\012\043\013\055\022\017\024\036" +
    "\025\057\026\030\032\053\033\052\034\063\041\015\042" +
    "\072\043\056\045\033\050\074\051\021\052\045\053\027" +
    "\054\070\055\042\056\067\057\026\064\037\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\030\200\001\001\000\010\005" +
    "\146\016\153\057\145\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\010\047" +
    "\121\062\120\063\122\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\062" +
    "\127\001\001\000\004\062\126\001\001\000\002\001\001" +
    "\000\002\001\001\000\006\062\120\063\133\001\001\000" +
    "\006\062\120\063\132\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\026\005\022\013\136\022" +
    "\017\024\036\025\057\026\030\045\033\055\042\056\067" +
    "\057\026\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\070\005\022\006\142\007\066\010\050" +
    "\011\064\012\043\013\055\022\017\024\036\025\057\026" +
    "\030\032\053\033\052\034\063\041\015\042\072\043\056" +
    "\045\033\050\074\051\021\052\045\053\027\054\070\055" +
    "\042\056\067\057\026\064\037\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\010\005\146\016\156\057\145\001\001\000\002" +
    "\001\001\000\002\001\001\000\010\005\146\016\161\057" +
    "\145\001\001\000\002\001\001\000\010\005\146\016\163" +
    "\057\145\001\001\000\002\001\001\000\010\005\146\016" +
    "\165\057\145\001\001\000\002\001\001\000\010\005\146" +
    "\016\167\057\145\001\001\000\002\001\001\000\010\005" +
    "\146\016\171\057\145\001\001\000\002\001\001\000\010" +
    "\005\146\016\173\057\145\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\012\025\201\045\033\055\042\056\067\001" +
    "\001\000\002\001\001\000\022\005\211\044\210\046\203" +
    "\047\205\060\204\061\207\062\120\063\122\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\006\005\211" +
    "\060\217\001\001\000\006\005\211\060\216\001\001\000" +
    "\002\001\001\000\002\001\001\000\010\005\211\060\204" +
    "\061\223\001\001\000\010\005\211\060\204\061\222\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\012\005\211\046" +
    "\245\060\204\061\207\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\022\005" +
    "\211\044\252\046\203\047\205\060\204\061\207\062\120" +
    "\063\122\001\001\000\002\001\001\000\002\001\001\000" +
    "\022\005\211\044\255\046\203\047\205\060\204\061\207" +
    "\062\120\063\122\001\001\000\002\001\001\000\026\005" +
    "\022\013\257\022\017\024\036\025\057\026\030\045\033" +
    "\055\042\056\067\057\026\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\070\005\022\006\263" +
    "\007\066\010\050\011\064\012\043\013\055\022\017\024" +
    "\036\025\057\026\030\032\053\033\052\034\063\041\015" +
    "\042\072\043\056\045\033\050\074\051\021\052\045\053" +
    "\027\054\070\055\042\056\067\057\026\064\037\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\070\005\022\006\267\007\066\010\050\011\064\012\043" +
    "\013\055\022\017\024\036\025\057\026\030\032\053\033" +
    "\052\034\063\041\015\042\072\043\056\045\033\050\074" +
    "\051\021\052\045\053\027\054\070\055\042\056\067\057" +
    "\026\064\037\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\012\005\022\022\273\026\030\057" +
    "\274\001\001\000\002\001\001\000\002\001\001\000\014" +
    "\024\276\025\057\045\033\055\042\056\067\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\037\305\001\001\000" +
    "\002\001\001\000\002\001\001\000\026\005\022\013\307" +
    "\022\017\024\036\025\057\026\030\045\033\055\042\056" +
    "\067\057\026\001\001\000\002\001\001\000\004\014\312" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\070\005\022\006\323\007\066\010\050\011\064\012\043" +
    "\013\055\022\017\024\036\025\057\026\030\032\053\033" +
    "\052\034\063\041\015\042\072\043\056\045\033\050\074" +
    "\051\021\052\045\053\027\054\070\055\042\056\067\057" +
    "\026\064\037\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\012\005\022\023\336\026\335\057\026\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\031\337\001\001\000\002\001\001\000\012" +
    "\005\022\023\340\026\335\057\026\001\001\000\002\001" +
    "\001\000\002\001\001\000\020\005\211\046\343\047\344" +
    "\060\204\061\207\062\120\063\122\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\005\351\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\015\364\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\015\373\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\015\376\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\015\u0101\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\015\u0104\001\001\000\002" +
    "\001\001\000\002\001\001\000\070\005\022\006\u0107\007" +
    "\066\010\050\011\064\012\043\013\055\022\017\024\036" +
    "\025\057\026\030\032\053\033\052\034\063\041\015\042" +
    "\072\043\056\045\033\050\074\051\021\052\045\053\027" +
    "\054\070\055\042\056\067\057\026\064\037\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\015\u010b\001\001\000\002\001\001\000\002\001\001\000" +
    "\070\005\022\006\u010e\007\066\010\050\011\064\012\043" +
    "\013\055\022\017\024\036\025\057\026\030\032\053\033" +
    "\052\034\063\041\015\042\072\043\056\045\033\050\074" +
    "\051\021\052\045\053\027\054\070\055\042\056\067\057" +
    "\026\064\037\001\001\000\002\001\001\000\002\001\001" +
    "\000\006\070\u0111\073\u0112\001\001\000\002\001\001\000" +
    "\004\015\u0113\001\001\000\002\001\001\000\002\001\001" +
    "\000\070\005\022\006\u0116\007\066\010\050\011\064\012" +
    "\043\013\055\022\017\024\036\025\057\026\030\032\053" +
    "\033\052\034\063\041\015\042\072\043\056\045\033\050" +
    "\074\051\021\052\045\053\027\054\070\055\042\056\067" +
    "\057\026\064\037\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\070\005\022\006\u011a\007\066" +
    "\010\050\011\064\012\043\013\055\022\017\024\036\025" +
    "\057\026\030\032\053\033\052\034\063\041\015\042\072" +
    "\043\056\045\033\050\074\051\021\052\045\053\027\054" +
    "\070\055\042\056\067\057\026\064\037\001\001\000\002" +
    "\001\001\000\002\001\001\000\006\067\u011d\072\u011e\001" +
    "\001\000\002\001\001\000\004\015\u011f\001\001\000\002" +
    "\001\001\000\002\001\001\000\070\005\022\006\u0122\007" +
    "\066\010\050\011\064\012\043\013\055\022\017\024\036" +
    "\025\057\026\030\032\053\033\052\034\063\041\015\042" +
    "\072\043\056\045\033\050\074\051\021\052\045\053\027" +
    "\054\070\055\042\056\067\057\026\064\037\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\070" +
    "\005\022\006\u0126\007\066\010\050\011\064\012\043\013" +
    "\055\022\017\024\036\025\057\026\030\032\053\033\052" +
    "\034\063\041\015\042\072\043\056\045\033\050\074\051" +
    "\021\052\045\053\027\054\070\055\042\056\067\057\026" +
    "\064\037\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}


  /** Scan to get the next Symbol. */
  public java_cup.runtime.Symbol scan()
    throws java.lang.Exception
    {
 return s.next_token(); 
    }


    Scanner s;
    public parser(int t, Scanner s, SymbolTableManager manager, Lexer lexer){ 
      this.s=s; 
      this.stManager = manager;
      this.lexer = lexer;
      }
    public boolean syntaxErrors;
    public int syntaxErrs = 0;
    public SymbolTableManager stManager;
    public SymbolTable currentSymbolTable = null;
    public String currentFunction;
    public Lexer lexer;

    @Override
    public void syntax_error(Symbol current_token) {
      String errInfo = "SYNTAX ERROR AT LINE " + (current_token.left) + " COLUMN " 
        + (current_token.right) + " VALUE: " + current_token.value + " - ";
      System.out.println(errInfo); 
      reportErrToFile(errInfo);
      this.syntaxErrs += 1;
    }    

    private void reportErrToFile(String info){
      FileManager fileManager = new FileManager("C:/Users/chris/Documents/NetBeansProjects/CeI-PYI/src/main/java/symbolTable/Tokens.txt");
      fileManager.writeToFile(info);
    }

    // Converts String to Integer.
    private Integer convertToInteger(Object val){
      return Integer.parseInt(val.toString());
    }
    // Converts String to Float.
    private Float convertToFloat(Object val){
      return Float.parseFloat(val.toString());
    }
    public void initParser(Lexer lexer){
        //Object result;
        try {
            //BufferedReader br = new BufferedReader(new FileReader(file));
            parser codeParser = new parser(0,
                    s, lexer.getSymbolTableManager(), lexer);
            Object result = codeParser.parse().value;
            //result = codeParser.parse().value;
            System.out.println("THE PARSER RESULT IS: " + result);
            String res = this.syntaxErrs > 0? "THERE WERE " + syntaxErrs + 
              "ERRORS. THE CODE CANNOT BE GENERATED." : "THE CODE CAN BE GENERATED.";
            System.out.println(res);
        } catch (Exception ex) {
            //System.err.println("AT THIS TIME RESULT IS: " + result);
            System.err.println("AN ERROR HAS BEEN FOUND. PROCEEDING WITH THE REST OF THE FILE.");
            ex.printStackTrace();
        }
    }

  public void printSymbolTable() {
    int index = 0;
    int size = stManager.getSymbolTables().size();
    for(int i = 0; i < size; i++) {
      System.out.println();
      String funcName = stManager.getSymbolTables().get(i).getFuncName();
      String funcType = stManager.getSymbolTables().get(i).getFuncType();
      String funcReturn = stManager.getSymbolTables().get(i).getReturnVal();
      ArrayList<String> funcParams = stManager.getSymbolTables().get(i).getFuncParams();
      int funcScope = stManager.getSymbolTables().get(i).getTableScope();
      Map<String,ArrayList<String>> current = stManager.getSymbolTables().get(i).getSymbolTable();
      System.out.println("FUNCTION \t SCOPE \t\t VARIABLES \t ATTRIBUTES \t\t FUNC RETURN TYPE \t\t FUNC RETURN VAL \t\t FUNC PARAMS");
      current.forEach(
        (k, v) -> System.out.println(funcName + "\t\t " + funcScope +" \t\t " + k + " \t\t " + v
          + "\t\t\t " + funcType + "\t\t\t " + funcReturn + "\t\t\t\t " + funcParams 
          + "\n_________________________________________________________________________________________________________________________________________________________")
      );
    } 
  }

  // Updates the symbol table entries for type and value for the given id.
  public void updateIntegerSymbolTable(Object id, Object type, Integer val) {
    ArrayList<SymbolTable> sTables = this.stManager.getSymbolTables();
    int limit = sTables.size() - 1;
    SymbolTable st;
    ArrayList<String> attributes = new ArrayList<>();
    attributes.add(type.toString());
    attributes.add(val != null? Integer.toString(val) : null);
    for (int i = 0; i <= limit; i++) {
      st = sTables.get(i);
      if(st.getFuncName().equals(this.currentFunction)) {
        st.getSymbolTable().
          computeIfPresent(id.toString(), (key, value) -> value = attributes);
      }
    }
  }

  // Updates the symbol table entries for type and value for the given id.
  public void updateFloatSymbolTable(Object id, Object type, Float val) {
    ArrayList<SymbolTable> sTables = this.stManager.getSymbolTables();
    int limit = sTables.size() - 1;
    SymbolTable st;
    ArrayList<String> attributes = new ArrayList<>();
    attributes.add(type.toString());
    attributes.add(val != null? Float.toString(val) : null);
    for (int i = 0; i <= limit; i++) {
      st = sTables.get(i);
      if(st.getFuncName().equals(this.currentFunction)) {
        st.getSymbolTable().
          computeIfPresent(id.toString(), (key, value) -> value = attributes);
      }
    }
  }

  // Updates the symbol table entries for type and value for the given id.
  public void updateCharacterSymbolTable(Object id, Object type, Character val) {
    ArrayList<SymbolTable> sTables = this.stManager.getSymbolTables();
    int limit = sTables.size() - 1;
    SymbolTable st;
    ArrayList<String> attributes = new ArrayList<>();
    attributes.add(type.toString());
    attributes.add(val != null? String.valueOf(val) : null);
    for (int i = 0; i <= limit; i++) {
      st = sTables.get(i);
      if(st.getFuncName().equals(this.currentFunction)) {
        st.getSymbolTable().
          computeIfPresent(id.toString(), (key, value) -> value = attributes);
      }
    }
  }

  // Updates the symbol table entries for type and value for the given id.
  public void updateStringSymbolTable(Object id, Object type, String val) {
    ArrayList<SymbolTable> sTables = this.stManager.getSymbolTables();
    int limit = sTables.size() - 1;
    SymbolTable st;
    ArrayList<String> attributes = new ArrayList<>();
    attributes.add(type.toString());
    attributes.add(val != null? val : null);
    for (int i = 0; i <= limit; i++) {
      st = sTables.get(i);
      if(st.getFuncName().equals(this.currentFunction)) {
        st.getSymbolTable().
          computeIfPresent(id.toString(), (key, value) -> value = attributes);
      }
    }
  }

  // Updates the symbol table entries for type and value for the given id.
  public void updateBooleanSymbolTable(Object id, Object type, String val) {
    ArrayList<SymbolTable> sTables = this.stManager.getSymbolTables();
    int limit = sTables.size() - 1;
    SymbolTable st;
    ArrayList<String> attributes = new ArrayList<>();
    attributes.add(type.toString());
    attributes.add(val != null? val : null);
    for (int i = 0; i <= limit; i++) {
      st = sTables.get(i);
      if(st.getFuncName().equals(this.currentFunction)) {
        st.getSymbolTable().
          computeIfPresent(id.toString(), (key, value) -> value = attributes);
      }
    }
  }

  // To manage variable scope and presence.
  public void updateCurrentFunction(Object name) {
    System.out.println("CURRENT FUNCTION IS: " + name.toString());
    this.currentFunction = name.toString();
  }

  public String getIdValue(String id) {
    ArrayList<SymbolTable> sTables = this.stManager.getSymbolTables();
    int limit = sTables.size() - 1;
    SymbolTable st;
    String res = "";
    for (int i = 0; i <= limit; i++) {
      st = sTables.get(i);
      if(st.getFuncName().equals(this.currentFunction)) {
        res = st.getSymbolTable().get(id.toString()).get(1);
      }
    }
    return res;
  }

  // id means refers to variale id and idType refers to either variable or function.
  // requiredType refers to the required data type for the id to be valid in any operation.
  // Validates the existance of the given id, the scope and value type.
  public String validateId(String id, String type , String dataType) {
    
    // First, validates the existance and scope.
    String result;
    if(validateScope(id)) {
      result = getIdValue(id);
      System.out.println("RESULT IS: " + result);
    } else {
      result = "-e1";
    }
    return result;
}

  public String validateFunc(String id) {
    
    // First, validates the existance and scope.
    String result = "";
    ArrayList<SymbolTable> sTables = this.stManager.getSymbolTables();
    SymbolTable st;
    int limit = sTables.size() - 1;
    for (int i = 0; i <= limit; i++) {
      st = sTables.get(i); 
      if(st.getTableScope() == 0) {
        System.out.println("PARAMS ARE: " + st.getFuncParams());
      }
    }
    return result;
}
  public boolean validateScope(String id) {
    boolean result = false;
    ArrayList<SymbolTable> sTables = this.stManager.getSymbolTables();
    SymbolTable st;
    int limit = sTables.size() - 1;
    for (int i = 0; i <= limit; i++) {
      st = sTables.get(i);
      if(st.getFuncName().equals(this.currentFunction)) {
        if (st.getSymbolTable().containsKey(id)) {
          int currentScope = lexer.scope;
          // Checks for current scope.
          if (st.getTableScope() < currentScope) {
            result = true;
          } // Checks if it exists on higher scopes. 
          else if (st.getTableScope() == currentScope) {
            result = true;
          } else {
            result = false;
          }
        }
      }
    }
    return result;
  }

  // Reports semantic err according to the number received.
  // -e1 means no such id or no such id in the current scope.
  // -e2 means type conflict.
  // -e3 means id has null value.
  // -e4 means no such function.
  public String reportSemanticErr(String errType) {
    String err = "";
    if(errType.equals("-e1")) {
      err = "--------------- SEMANTIC ERR: NO SUCH VARIABLE CREATED OR IN SCOPE ---------------";
    }
    return err;
}



/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$parser$actions {
  private final parser parser;

  /** Constructor */
  CUP$parser$actions(parser parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$parser$do_action_part00000000(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$parser$result;

      /* select the action based on the action number */
      switch (CUP$parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= ini EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = start_val;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$parser$parser.done_parsing();
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // ini ::= main 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("ini",0, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // ini ::= function 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("ini",0, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // ini ::= main ini 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("ini",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // ini ::= function ini 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("ini",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // NT$0 ::= 
            {
              Object RESULT =null;
		int nameleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object name = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
 
              updateCurrentFunction(name); 
              System.out.println("CURRENT FUNC IS: " + currentFunction); 
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$0",51, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // main ::= INT MAIN NT$0 LCURLY codeBlock RCURLY 
            {
              Object RESULT =null;
              // propagate RESULT from NT$0
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int nameleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Object name = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("main",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // return ::= RETURN ID 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("return",32, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // return ::= RETURN INTLIT 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("return",32, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // return ::= RETURN FLOATLIT 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("return",32, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // return ::= RETURN CHARLIT 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("return",32, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // return ::= RETURN STRING 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("return",32, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // NT$1 ::= 
            {
              Object RESULT =null;
		int nameleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object name = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
 updateCurrentFunction(name); System.out.println("CURRENT FUNC IS: " + currentFunction); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$1",52, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // function ::= INT FUNC NT$1 RPAREN LCURLY codeBlock RCURLY 
            {
              Object RESULT =null;
              // propagate RESULT from NT$1
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int nameleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		Object name = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("function",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // NT$2 ::= 
            {
              Object RESULT =null;
		int nameleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object name = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
 updateCurrentFunction(name); System.out.println("CURRENT FUNC IS: " + currentFunction); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$2",53, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // function ::= CHAR FUNC NT$2 RPAREN LCURLY codeBlock RCURLY 
            {
              Object RESULT =null;
              // propagate RESULT from NT$2
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int nameleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		Object name = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("function",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // NT$3 ::= 
            {
              Object RESULT =null;
		int nameleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object name = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
 updateCurrentFunction(name); System.out.println("CURRENT FUNC IS: " + currentFunction); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$3",54, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // function ::= FLOAT FUNC NT$3 RPAREN LCURLY codeBlock RCURLY 
            {
              Object RESULT =null;
              // propagate RESULT from NT$3
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int nameleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		Object name = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("function",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // NT$4 ::= 
            {
              Object RESULT =null;
		int nameleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object name = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
 updateCurrentFunction(name); System.out.println("CURRENT FUNC IS: " + currentFunction); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$4",55, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // function ::= INT FUNC NT$4 parameters RPAREN LCURLY codeBlock RCURLY 
            {
              Object RESULT =null;
              // propagate RESULT from NT$4
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int nameleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		Object name = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("function",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // NT$5 ::= 
            {
              Object RESULT =null;
		int nameleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object name = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
 updateCurrentFunction(name); System.out.println("CURRENT FUNC IS: " + currentFunction); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$5",56, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // function ::= CHAR FUNC NT$5 parameters RPAREN LCURLY codeBlock RCURLY 
            {
              Object RESULT =null;
              // propagate RESULT from NT$5
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int nameleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		Object name = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("function",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // NT$6 ::= 
            {
              Object RESULT =null;
		int nameleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object name = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
 updateCurrentFunction(name); System.out.println("CURRENT FUNC IS: " + currentFunction); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$6",57, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // function ::= FLOAT FUNC NT$6 parameters RPAREN LCURLY codeBlock RCURLY 
            {
              Object RESULT =null;
              // propagate RESULT from NT$6
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int nameleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		Object name = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("function",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // functionInv ::= FUNC RPAREN 
            {
              Object RESULT =null;
		int nameleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object name = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
              RESULT = name;
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("functionInv",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // functionInv ::= FUNC parametersInv RPAREN 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("functionInv",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // parameters ::= INT ID 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 System.out.println("PARAM ES: " + id); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("parameters",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // parameters ::= CHAR ID 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("parameters",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // parameters ::= BOOL ID 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("parameters",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // parameters ::= ARRAY ID 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("parameters",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // parameters ::= STRING ID 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("parameters",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // parameters ::= INT ID COMMA parameters 
            {
              Object RESULT =null;
		int paramleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int paramright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object param = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("parameters",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // parameters ::= CHAR ID COMMA parameters 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("parameters",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // parameters ::= BOOL ID COMMA parameters 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("parameters",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // parameters ::= ARRAY ID COMMA parameters 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("parameters",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // parameters ::= STRING ID COMMA parameters 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("parameters",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // parametersInv ::= INTLIT 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("parametersInv",12, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // parametersInv ::= FLOATLIT 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("parametersInv",12, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // parametersInv ::= CHARLIT 
            {
              Object RESULT =null;
		 System.out.println("PARAM ES: "); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("parametersInv",12, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // parametersInv ::= STRINGLIT 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("parametersInv",12, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // parametersInv ::= boolLit 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("parametersInv",12, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // parametersInv ::= ID 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("parametersInv",12, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // parametersInv ::= functionInv 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("parametersInv",12, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // parametersInv ::= INTLIT COMMA parametersInv 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("parametersInv",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // parametersInv ::= FLOATLIT COMMA parametersInv 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("parametersInv",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // parametersInv ::= CHARLIT COMMA parametersInv 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("parametersInv",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // parametersInv ::= STRINGLIT COMMA parametersInv 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("parametersInv",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // parametersInv ::= boolLit COMMA parametersInv 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("parametersInv",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // parametersInv ::= ID COMMA parametersInv 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("parametersInv",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // parametersInv ::= functionInv COMMA parametersInv 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("parametersInv",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // codeBlock ::= expression 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("codeBlock",4, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // codeBlock ::= COMMENT 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("codeBlock",4, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // codeBlock ::= expression codeBlock 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("codeBlock",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // varCreationAsign ::= intCreationAssign 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("varCreationAsign",33, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // varCreationAsign ::= floatCreationAssign 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("varCreationAsign",33, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // varCreationAsign ::= charCreationAssign 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("varCreationAsign",33, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // varCreationAsign ::= stringCreationAssign 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("varCreationAsign",33, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // varCreationAsign ::= boolCreationAssign 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("varCreationAsign",33, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // varCreationAsign ::= INTARR INTLIT RSQUARE ID 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("varCreationAsign",33, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // varCreationAsign ::= INTARR INTLIT RSQUARE ID EQ ARRAYLIT 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("varCreationAsign",33, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // varCreationAsign ::= CHARARR INTLIT RSQUARE ID 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("varCreationAsign",33, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // varCreationAsign ::= CHARARR INTLIT RSQUARE ID EQ ARRAYLIT 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("varCreationAsign",33, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // intCreationAssign ::= INT ID 
            {
              Integer RESULT =null;
		int dTypeleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int dTyperight = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object dType = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
              RESULT = null;
              System.out.println("EL ID DE INT ES: " + id);
              System.out.println(" --> EL VALOR DE " + id + " ES: " + RESULT);
              updateIntegerSymbolTable(id, dType, null);
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("intCreationAssign",39, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // intCreationAssign ::= INT ID EQ intMathExpression 
            {
              Integer RESULT =null;
		int dTypeleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int dTyperight = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Object dType = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Integer val = (Integer)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
            System.out.println("ENTRO A INT:dType ID:id EQ intMathExpression:val");
              if(val.getClass().toString().equals("class java.lang.Integer")) {
                RESULT = val;
                System.out.println("EL ID DE INT ES: " + id);
                System.out.println(" --> EL VALOR DE " + id + " ES: " + val);
                updateIntegerSymbolTable(id, dType, RESULT);
              } else {
              System.out.println("*** SEMANTIC ERR *** ID: " + id + " ES INT ES Y ASIGNO FLOAT.");
              }
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("intCreationAssign",39, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // intCreationAssign ::= INT ID EQ floatMathExpression 
            {
              Integer RESULT =null;
		int dTypeleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int dTyperight = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Object dType = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Float val = (Float)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
              RESULT = null;
              System.out.println("*** SEMANTIC ERR *** ID ES INT Y ASIGNO FLOAT.");
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("intCreationAssign",39, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // floatCreationAssign ::= FLOAT ID 
            {
              Float RESULT =null;
		int dTypeleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int dTyperight = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object dType = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
              RESULT = null;
              System.out.println("EL ID DE FLOAT ES: " + id);
              System.out.println(" --> EL VALOR DE " + id + " ES: " + RESULT);
              updateFloatSymbolTable(id, dType, RESULT);
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("floatCreationAssign",40, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // floatCreationAssign ::= FLOAT ID EQ floatMathExpression 
            {
              Float RESULT =null;
		int dTypeleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int dTyperight = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Object dType = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Float val = (Float)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
              RESULT = val;
              System.out.println("EL ID DE FLOAT ES: " + id);
              System.out.println(" --> EL VALOR DE " + id + " ES: " + val);
              updateFloatSymbolTable(id, dType, RESULT);
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("floatCreationAssign",40, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // charCreationAssign ::= CHAR ID 
            {
              Character RESULT =null;
		int dTypeleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int dTyperight = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object dType = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
              RESULT = null;
              System.out.println("EL ID DE CHARLIT ES: " + id);
              System.out.println(" --> EL VALOR DE " + id + " ES: " + RESULT);
              updateCharacterSymbolTable(id, dType, RESULT);
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("charCreationAssign",38, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // charCreationAssign ::= CHAR ID EQ CHARLIT 
            {
              Character RESULT =null;
		int dTypeleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int dTyperight = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Object dType = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object val = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
              RESULT = Character.valueOf(val.toString().charAt(1));
              System.out.println("EL ID DE CHARLIT ES: " + id);
              System.out.println(" --> EL VALOR DE " + id + " ES: " + RESULT);
              updateCharacterSymbolTable(id, dType, RESULT); 
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("charCreationAssign",38, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // charCreationAssign ::= CHAR ID EQ functionInv 
            {
              Character RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object val = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("charCreationAssign",38, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // stringCreationAssign ::= STRING ID 
            {
              String RESULT =null;
		int dTypeleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int dTyperight = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object dType = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
              RESULT = null;
              System.out.println("EL ID DE STRING ES: " + id);
              System.out.println(" --> EL VALOR DE " + id + " ES: " + RESULT);
              updateStringSymbolTable(id, dType, RESULT); 
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("stringCreationAssign",41, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // stringCreationAssign ::= STRING ID EQ STRINGLIT 
            {
              String RESULT =null;
		int dTypeleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int dTyperight = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Object dType = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String val = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
              RESULT = val;
              System.out.println("EL ID DE STRING ES: " + id);
              System.out.println(" --> EL VALOR DE " + id + " ES: " + val);
              updateStringSymbolTable(id, dType, RESULT); 
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("stringCreationAssign",41, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // boolCreationAssign ::= BOOL ID 
            {
              Boolean RESULT =null;
		int dTypeleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int dTyperight = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object dType = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
              RESULT = null;
              System.out.println("EL ID DE BOOL ES: " + id);
              System.out.println(" --> EL VALOR DE " + id + " ES: " + RESULT);
              //updateBooleanSymbolTable(id, dType, null.toString());
              updateBooleanSymbolTable(id, dType, "null"); 
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("boolCreationAssign",42, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // boolCreationAssign ::= BOOL ID EQ boolLit 
            {
              Boolean RESULT =null;
		int dTypeleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int dTyperight = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Object dType = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Boolean val = (Boolean)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
              RESULT = val;
              System.out.println("EL ID DE BOOL ES: " + id);
              System.out.println(" --> EL VALOR DE " + id + " ES: " + val);
              updateBooleanSymbolTable(id, dType, RESULT.toString()); 
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("boolCreationAssign",42, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // boolCreationAssign ::= BOOL ID EQ logicalExpression 
            {
              Boolean RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("boolCreationAssign",42, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // varAsign ::= intVarAsign 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("varAsign",5, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // intVarAsign ::= ID EQ intMathExpression 
            {
              Integer RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Integer val = (Integer)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
              RESULT = val;
              System.out.println("ENTRO A intVarAsign");
              System.out.println("EL ID DE INT ES: " + id);
              System.out.println(" --> LA NUEVA ASIGNACION DE " + id + " ES: " + RESULT);
              updateIntegerSymbolTable(id, "int", val);
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("intVarAsign",50, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // arrayAccess ::= ID LSQUARE INTLIT RSQUARE 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("arrayAccess",30, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // arrayAccess ::= ID LSQUARE ID RSQUARE 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("arrayAccess",30, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // arrayValModification ::= ID LSQUARE INTLIT RSQUARE EQ mathExpression 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("arrayValModification",31, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // arrayValModification ::= ID LSQUARE ID RSQUARE EQ mathExpression 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("arrayValModification",31, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // printFunction ::= PRINT LPAREN INTLIT RPAREN 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("printFunction",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // printFunction ::= PRINT LPAREN FLOATLIT RPAREN 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("printFunction",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // printFunction ::= PRINT LPAREN CHARLIT RPAREN 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("printFunction",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // printFunction ::= PRINT LPAREN STRINGLIT RPAREN 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("printFunction",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // printFunction ::= PRINT LPAREN ID RPAREN 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("printFunction",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // readFunction ::= READ 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("readFunction",7, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // expression ::= logRelExpression HASH 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("expression",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // expression ::= varCreationAsign HASH 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("expression",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // expression ::= varAsign HASH 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("expression",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // expression ::= printFunction HASH 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("expression",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // expression ::= readFunction HASH 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("expression",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // expression ::= arrayValModification HASH 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("expression",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // expression ::= if 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("expression",8, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // expression ::= while 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("expression",8, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // expression ::= for 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("expression",8, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 96: // expression ::= return HASH 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("expression",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 97: // expression ::= error HASH 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("expression",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 98: // boolLit ::= TRUE 
            {
              Boolean RESULT =null;
		 RESULT = true; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("boolLit",45, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 99: // boolLit ::= FALSE 
            {
              Boolean RESULT =null;
		 RESULT = false; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("boolLit",45, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 100: // unaryExpression ::= ID PADD 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("unaryExpression",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 101: // unaryExpression ::= ID PSUBS 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("unaryExpression",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 102: // unaryExpression ::= INTLIT PADD 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("unaryExpression",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 103: // unaryExpression ::= INTLIT PSUBS 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("unaryExpression",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 104: // unaryExpression ::= FLOATLIT PADD 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("unaryExpression",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 105: // unaryExpression ::= FLOATLIT PSUBS 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("unaryExpression",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 106: // mathExpression ::= intMathExpression 
            {
              Object RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Integer val = (Integer)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
              System.out.println("EL RESULTADO FINAL ES: " + val);
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("mathExpression",34, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 107: // mathExpression ::= floatMathExpression 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("mathExpression",34, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 108: // intMathExpression ::= intMathExpression ADD intFactor 
            {
              Integer RESULT =null;
		int op1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int op1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Integer op1 = (Integer)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int op2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int op2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Integer op2 = (Integer)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
              System.out.println("HAY OPERACION: " + op1 + " + " + op2 + " = " + (op1 + op2));
              RESULT = op1 + op2;
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("intMathExpression",36, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 109: // intMathExpression ::= intMathExpression SUBS intFactor 
            {
              Integer RESULT =null;
		int op1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int op1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Integer op1 = (Integer)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int op2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int op2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Integer op2 = (Integer)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
              System.out.println("HAY OPERACION: " + op1 + " - " + op2 + " = " + (op1 + op2));
              RESULT = op1 - op2;
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("intMathExpression",36, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 110: // intMathExpression ::= intFactor 
            {
              Integer RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Integer val = (Integer)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
              System.out.println("ENTRO A intFactor:val = " + val);
              RESULT = convertToInteger(val);
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("intMathExpression",36, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 111: // intFactor ::= intFactor MULT intTerm 
            {
              Integer RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int fright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Integer f = (Integer)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Integer t = (Integer)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 
              RESULT = convertToInteger(f) * convertToInteger(t); 
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("intFactor",47, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 112: // intFactor ::= intFactor DIV intTerm 
            {
              Integer RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int fright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Integer f = (Integer)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Integer t = (Integer)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 
              RESULT = convertToInteger(f) / convertToInteger(t); 
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("intFactor",47, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 113: // intFactor ::= intTerm 
            {
              Integer RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Integer t = (Integer)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 
              System.out.println("ENTRO A intTerm:t = " + t);
              RESULT = convertToInteger(t); 
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("intFactor",47, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 114: // intTerm ::= INTLIT 
            {
              Integer RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object n = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 
              System.out.println("ENTRO A INTLIT = " + n);
              RESULT = convertToInteger(n); 
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("intTerm",46, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 115: // intTerm ::= ID 
            {
              Integer RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
              //RESULT = 99;
              System.out.println("ENTRO A ID = " + id);
              String validation = validateId(id.toString(), "int", "id");
              if (NumberUtils.isParsable(id.toString())) {
                RESULT = convertToInteger(validation); 
              } else {
                System.out.println(reportSemanticErr(validation));
                RESULT = 0;
              }
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("intTerm",46, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 116: // intTerm ::= functionInv 
            {
              Integer RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object n = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 
              System.out.println("ENTRO A functionInv = " + n);
              validateFunc(n.toString());
              RESULT = 18; 
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("intTerm",46, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 117: // floatMathExpression ::= floatMathExpression ADD floatFactor 
            {
              Float RESULT =null;
		int op1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int op1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Float op1 = (Float)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int op2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int op2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Float op2 = (Float)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
              //System.out.println("HAY OPERACION: " + op1 + " + " + op2 + " = " + (op1 + op2));
              RESULT = op1 + op2;
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("floatMathExpression",37, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 118: // floatMathExpression ::= floatMathExpression SUBS floatFactor 
            {
              Float RESULT =null;
		int op1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int op1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Float op1 = (Float)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int op2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int op2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Float op2 = (Float)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
              //System.out.println("HAY OPERACION: " + op1 + " + " + op2 + " = " + (op1 + op2));
              RESULT = op1 - op2;
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("floatMathExpression",37, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 119: // floatMathExpression ::= floatFactor 
            {
              Float RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Float val = (Float)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
              RESULT = convertToFloat(val);
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("floatMathExpression",37, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 120: // floatFactor ::= floatFactor MULT floatTerm 
            {
              Float RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int fright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Float f = (Float)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Float t = (Float)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 
              RESULT = convertToFloat(f) * convertToFloat(t); 
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("floatFactor",49, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 121: // floatFactor ::= floatFactor DIV floatTerm 
            {
              Float RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int fright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Float f = (Float)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Float t = (Float)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 
              RESULT = convertToFloat(f) / convertToFloat(t); 
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("floatFactor",49, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 122: // floatFactor ::= floatTerm 
            {
              Float RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Float t = (Float)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 
              RESULT = convertToFloat(t); 
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("floatFactor",49, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 123: // floatTerm ::= FLOATLIT 
            {
              Float RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object n = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 
              RESULT = convertToFloat(n); 
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("floatTerm",48, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 124: // logRelExpression ::= logicalExpression 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("logRelExpression",9, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 125: // logRelExpression ::= relationalExpression 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("logRelExpression",9, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 126: // relationalExpression ::= relationalOperand relationalOperator relationalOperand 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("relationalExpression",18, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 127: // logicalExpression ::= logicalOperand logicalOperator logicalExpr 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("logicalExpression",16, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 128: // logicalExpr ::= logicalOperand 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("logicalExpr",17, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 129: // logicalExpr ::= logicalOperand logicalOperator logicalExpr 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("logicalExpr",17, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 130: // mathOperand ::= intMathOperand 
            {
              Object RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Integer val = (Integer)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = val; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("mathOperand",35, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 131: // mathOperand ::= floatMathOperand 
            {
              Object RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Float val = (Float)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = val; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("mathOperand",35, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 132: // intMathOperand ::= INTLIT 
            {
              Integer RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object val = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = convertToInteger(val); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("intMathOperand",43, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 133: // floatMathOperand ::= FLOATLIT 
            {
              Float RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object val = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = convertToFloat(val); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("floatMathOperand",44, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 134: // relationalOperand ::= mathOperand 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("relationalOperand",19, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 135: // relationalOperand ::= LPAREN mathExpression RPAREN 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("relationalOperand",19, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 136: // logicalOperand ::= ID 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("logicalOperand",20, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 137: // logicalOperand ::= boolLit 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("logicalOperand",20, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 138: // logicalOperand ::= functionInv 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("logicalOperand",20, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 139: // logicalOperand ::= LPAREN relationalExpression RPAREN 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("logicalOperand",20, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 140: // mathOperator ::= ADD 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("mathOperator",21, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 141: // mathOperator ::= SUBS 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("mathOperator",21, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 142: // mathOperator ::= DIV 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("mathOperator",21, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 143: // mathOperator ::= MULT 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("mathOperator",21, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 144: // mathOperator ::= EXP 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("mathOperator",21, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 145: // mathOperator ::= MOD 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("mathOperator",21, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 146: // relationalOperator ::= GTE 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("relationalOperator",22, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 147: // relationalOperator ::= GT 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("relationalOperator",22, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 148: // relationalOperator ::= LTE 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("relationalOperator",22, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 149: // relationalOperator ::= LT 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("relationalOperator",22, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 150: // logicalOperator ::= AND 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("logicalOperator",23, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 151: // logicalOperator ::= OR 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("logicalOperator",23, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 152: // logicalOperator ::= EQEQ 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("logicalOperator",23, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 153: // logicalOperator ::= NOT 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("logicalOperator",23, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 154: // if ::= IF LPAREN logRelExpression RPAREN THEN LCURLY codeBlock RCURLY 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("if",24, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 155: // if ::= IF LPAREN logRelExpression RPAREN THEN LCURLY codeBlock RCURLY ELSE LCURLY codeBlock RCURLY 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("if",24, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-11)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 156: // while ::= WHILE LPAREN logRelExpression RPAREN LCURLY codeBlock RCURLY 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("while",25, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 157: // for ::= FOR LPAREN INT ID EQ zero COMMA logRelExpression COMMA unaryExpression RPAREN LCURLY codeBlock RCURLY 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("for",26, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-13)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 158: // zero ::= INTLIT 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("zero",29, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$parser$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$parser$do_action(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
              return CUP$parser$do_action_part00000000(
                               CUP$parser$act_num,
                               CUP$parser$parser,
                               CUP$parser$stack,
                               CUP$parser$top);
    }
}

}
