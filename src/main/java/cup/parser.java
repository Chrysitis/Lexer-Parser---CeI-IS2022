
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

package cup;

import java_cup.runtime.*;
import jflex.*;
import fileManager.*;
import java.util.Map;
import symbolTable.*;
import java.util.ArrayList;
import org.apache.commons.lang3.math.NumberUtils;
import codeGenerator.TDCGenerator;
import java.util.Stack;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class parser extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return sym.class;
}

  /** Default constructor. */
  @Deprecated
  public parser() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\243\000\002\002\004\000\002\002\004\000\002\002" +
    "\003\000\002\067\002\000\002\070\002\000\002\003\011" +
    "\000\002\042\004\000\002\042\004\000\002\042\004\000" +
    "\002\042\004\000\002\042\004\000\002\071\002\000\002" +
    "\072\002\000\002\004\012\000\002\073\002\000\002\074" +
    "\002\000\002\004\012\000\002\075\002\000\002\076\002" +
    "\000\002\004\012\000\002\077\002\000\002\100\002\000" +
    "\002\004\013\000\002\101\002\000\002\102\002\000\002" +
    "\004\013\000\002\103\002\000\002\104\002\000\002\004" +
    "\013\000\002\005\004\000\002\005\005\000\002\015\004" +
    "\000\002\015\004\000\002\015\004\000\002\015\004\000" +
    "\002\015\004\000\002\015\006\000\002\015\006\000\002" +
    "\015\006\000\002\015\006\000\002\015\006\000\002\016" +
    "\003\000\002\016\003\000\002\016\003\000\002\016\003" +
    "\000\002\016\003\000\002\016\003\000\002\016\003\000" +
    "\002\016\005\000\002\016\005\000\002\016\005\000\002" +
    "\016\005\000\002\016\005\000\002\016\005\000\002\016" +
    "\005\000\002\006\003\000\002\006\003\000\002\006\004" +
    "\000\002\006\004\000\002\043\003\000\002\043\003\000" +
    "\002\043\003\000\002\043\003\000\002\043\003\000\002" +
    "\043\006\000\002\043\010\000\002\043\006\000\002\043" +
    "\010\000\002\051\004\000\002\051\006\000\002\051\006" +
    "\000\002\052\004\000\002\052\006\000\002\050\004\000" +
    "\002\050\006\000\002\050\006\000\002\050\006\000\002" +
    "\050\005\000\002\053\004\000\002\053\006\000\002\053" +
    "\005\000\002\054\004\000\002\054\006\000\002\054\006" +
    "\000\002\054\005\000\002\007\003\000\002\064\005\000" +
    "\002\040\006\000\002\040\006\000\002\041\010\000\002" +
    "\041\010\000\002\010\006\000\002\010\006\000\002\010" +
    "\006\000\002\010\006\000\002\010\006\000\002\011\003" +
    "\000\002\012\004\000\002\012\004\000\002\012\004\000" +
    "\002\012\004\000\002\012\004\000\002\012\004\000\002" +
    "\012\003\000\002\012\003\000\002\012\003\000\002\012" +
    "\004\000\002\012\004\000\002\057\003\000\002\057\003" +
    "\000\002\065\004\000\002\065\004\000\002\066\004\000" +
    "\002\066\004\000\002\066\004\000\002\066\004\000\002" +
    "\044\003\000\002\044\003\000\002\046\005\000\002\046" +
    "\005\000\002\046\003\000\002\061\005\000\002\061\005" +
    "\000\002\061\003\000\002\060\003\000\002\060\003\000" +
    "\002\060\003\000\002\060\003\000\002\060\003\000\002" +
    "\013\003\000\002\013\003\000\002\024\005\000\002\024" +
    "\003\000\002\022\005\000\002\022\003\000\002\023\003" +
    "\000\002\023\005\000\002\045\003\000\002\045\003\000" +
    "\002\055\003\000\002\056\003\000\002\026\003\000\002" +
    "\025\003\000\002\025\005\000\002\027\003\000\002\027" +
    "\003\000\002\027\003\000\002\027\003\000\002\027\003" +
    "\000\002\027\003\000\002\030\003\000\002\030\003\000" +
    "\002\030\003\000\002\030\003\000\002\031\003\000\002" +
    "\031\003\000\002\031\003\000\002\031\003\000\002\032" +
    "\012\000\002\032\016\000\002\033\011\000\002\034\020" +
    "\000\002\037\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\u0119\000\010\004\011\005\010\007\007\001\002\000" +
    "\010\004\011\005\010\007\007\001\002\000\004\002\uffff" +
    "\001\002\000\004\002\u011a\001\002\000\004\031\u010c\001" +
    "\002\000\004\031\376\001\002\000\006\030\013\031\012" +
    "\001\002\000\016\004\uffed\006\uffed\007\uffed\010\uffed\011" +
    "\uffed\041\ufff6\001\002\000\004\042\ufffe\001\002\000\004" +
    "\042\015\001\002\000\046\003\044\004\025\005\060\006" +
    "\033\007\021\010\063\012\050\013\017\016\036\021\031" +
    "\023\056\027\042\032\054\033\066\034\023\040\024\072" +
    "\032\077\037\001\002\000\004\035\334\001\002\000\004" +
    "\072\327\001\002\000\010\035\uff80\041\uff80\047\uff80\001" +
    "\002\000\004\077\322\001\002\000\004\035\uffc6\001\002" +
    "\000\050\003\044\004\025\005\060\006\033\007\021\010" +
    "\063\012\050\013\017\016\036\021\031\023\056\027\042" +
    "\032\054\033\066\034\023\040\024\043\uffc9\072\032\077" +
    "\037\001\002\000\004\072\032\001\002\000\004\077\313" +
    "\001\002\000\004\035\uffc3\001\002\000\020\035\uff7b\037" +
    "\306\041\uff7b\047\uff7b\065\303\066\305\067\304\001\002" +
    "\000\004\043\ufffd\001\002\000\004\040\262\001\002\000" +
    "\020\035\uff76\041\uff76\047\uff76\061\uff76\062\uff76\063\uff76" +
    "\064\uff76\001\002\000\004\077\256\001\002\000\010\035" +
    "\uff7f\041\uff7f\047\uff7f\001\002\000\004\035\uffac\001\002" +
    "\000\004\040\243\001\002\000\020\035\uff73\036\224\037" +
    "\uff73\044\223\065\uff73\066\uff73\067\uff73\001\002\000\050" +
    "\003\044\004\025\005\060\006\033\007\021\010\063\012" +
    "\050\013\017\016\036\021\031\023\056\027\042\032\054" +
    "\033\066\034\023\040\024\043\uffca\072\032\077\037\001" +
    "\002\000\020\035\uff74\041\uff74\047\uff74\061\uff74\062\uff74" +
    "\063\uff74\064\uff74\001\002\000\014\010\217\072\216\073" +
    "\220\074\221\077\215\001\002\000\004\035\uffc5\001\002" +
    "\000\004\035\214\001\002\000\004\035\213\001\002\000" +
    "\050\003\uff99\004\uff99\005\uff99\006\uff99\007\uff99\010\uff99" +
    "\012\uff99\013\uff99\016\uff99\021\uff99\023\uff99\027\uff99\032" +
    "\uff99\033\uff99\034\uff99\040\uff99\043\uff99\072\uff99\077\uff99" +
    "\001\002\000\050\003\uff9a\004\uff9a\005\uff9a\006\uff9a\007" +
    "\uff9a\010\uff9a\012\uff9a\013\uff9a\016\uff9a\021\uff9a\023\uff9a" +
    "\027\uff9a\032\uff9a\033\uff9a\034\uff9a\040\uff9a\043\uff9a\072" +
    "\uff9a\077\uff9a\001\002\000\004\072\206\001\002\000\004" +
    "\035\205\001\002\000\004\035\204\001\002\000\020\035" +
    "\uff7d\041\uff7d\047\uff7d\061\176\062\200\063\201\064\177" +
    "\001\002\000\004\035\uffa1\001\002\000\050\003\uff98\004" +
    "\uff98\005\uff98\006\uff98\007\uff98\010\uff98\012\uff98\013\uff98" +
    "\016\uff98\021\uff98\023\uff98\027\uff98\032\uff98\033\uff98\034" +
    "\uff98\040\uff98\043\uff98\072\uff98\077\uff98\001\002\000\004" +
    "\040\167\001\002\000\004\035\166\001\002\000\004\077" +
    "\107\001\002\000\004\035\106\001\002\000\004\035\uffc2" +
    "\001\002\000\004\077\103\001\002\000\004\035\102\001" +
    "\002\000\004\035\uffc4\001\002\000\004\040\067\001\002" +
    "\000\014\072\071\073\072\074\074\075\073\077\070\001" +
    "\002\000\004\041\101\001\002\000\004\041\100\001\002" +
    "\000\004\041\077\001\002\000\004\041\076\001\002\000" +
    "\004\041\075\001\002\000\004\035\uffa4\001\002\000\004" +
    "\035\uffa3\001\002\000\004\035\uffa5\001\002\000\004\035" +
    "\uffa6\001\002\000\004\035\uffa2\001\002\000\050\003\uff97" +
    "\004\uff97\005\uff97\006\uff97\007\uff97\010\uff97\012\uff97\013" +
    "\uff97\016\uff97\021\uff97\023\uff97\027\uff97\032\uff97\033\uff97" +
    "\034\uff97\040\uff97\043\uff97\072\uff97\077\uff97\001\002\000" +
    "\006\035\uffb3\036\104\001\002\000\004\075\105\001\002" +
    "\000\004\035\uffb2\001\002\000\050\003\uff9e\004\uff9e\005" +
    "\uff9e\006\uff9e\007\uff9e\010\uff9e\012\uff9e\013\uff9e\016\uff9e" +
    "\021\uff9e\023\uff9e\027\uff9e\032\uff9e\033\uff9e\034\uff9e\040" +
    "\uff9e\043\uff9e\072\uff9e\077\uff9e\001\002\000\006\035\uffba" +
    "\036\110\001\002\000\012\031\114\072\115\073\121\077" +
    "\120\001\002\000\010\035\uffb9\051\162\052\163\001\002" +
    "\000\014\035\uff81\051\uff81\052\uff81\053\uff81\054\uff81\001" +
    "\002\000\014\035\uff86\051\uff86\052\uff86\053\uff86\054\uff86" +
    "\001\002\000\024\031\114\041\136\070\131\071\134\072" +
    "\130\073\140\074\137\075\142\077\135\001\002\000\014" +
    "\035\uff85\051\uff85\052\uff85\053\uff85\054\uff85\001\002\000" +
    "\014\035\uff89\051\uff89\052\uff89\053\124\054\125\001\002" +
    "\000\014\035\uff82\051\uff82\052\uff82\053\uff82\054\uff82\001" +
    "\002\000\020\035\uff83\051\uff83\052\uff83\053\uff83\054\uff83" +
    "\057\123\060\122\001\002\000\014\035\uff84\051\uff84\052" +
    "\uff84\053\uff84\054\uff84\001\002\000\014\035\uff92\051\uff92" +
    "\052\uff92\053\uff92\054\uff92\001\002\000\014\035\uff93\051" +
    "\uff93\052\uff93\053\uff93\054\uff93\001\002\000\012\031\114" +
    "\072\115\073\121\077\120\001\002\000\012\031\114\072" +
    "\115\073\121\077\120\001\002\000\014\035\uff87\051\uff87" +
    "\052\uff87\053\uff87\054\uff87\001\002\000\014\035\uff88\051" +
    "\uff88\052\uff88\053\uff88\054\uff88\001\002\000\006\041\uffd8" +
    "\047\160\001\002\000\010\035\uff95\041\uff95\047\uff95\001" +
    "\002\000\006\041\uffd4\047\156\001\002\000\006\041\uffd2" +
    "\047\154\001\002\000\010\035\uff94\041\uff94\047\uff94\001" +
    "\002\000\006\041\uffd3\047\152\001\002\000\020\035\uffe4" +
    "\041\uffe4\047\uffe4\051\uffe4\052\uffe4\053\uffe4\054\uffe4\001" +
    "\002\000\006\041\uffd6\047\150\001\002\000\006\041\uffd7" +
    "\047\146\001\002\000\004\041\145\001\002\000\006\041" +
    "\uffd5\047\143\001\002\000\022\031\114\070\131\071\134" +
    "\072\130\073\140\074\137\075\142\077\135\001\002\000" +
    "\004\041\uffce\001\002\000\020\035\uffe3\041\uffe3\047\uffe3" +
    "\051\uffe3\052\uffe3\053\uffe3\054\uffe3\001\002\000\022\031" +
    "\114\070\131\071\134\072\130\073\140\074\137\075\142" +
    "\077\135\001\002\000\004\041\uffd0\001\002\000\022\031" +
    "\114\070\131\071\134\072\130\073\140\074\137\075\142" +
    "\077\135\001\002\000\004\041\uffcf\001\002\000\022\031" +
    "\114\070\131\071\134\072\130\073\140\074\137\075\142" +
    "\077\135\001\002\000\004\041\uffcc\001\002\000\022\031" +
    "\114\070\131\071\134\072\130\073\140\074\137\075\142" +
    "\077\135\001\002\000\004\041\uffcb\001\002\000\022\031" +
    "\114\070\131\071\134\072\130\073\140\074\137\075\142" +
    "\077\135\001\002\000\004\041\uffcd\001\002\000\022\031" +
    "\114\070\131\071\134\072\130\073\140\074\137\075\142" +
    "\077\135\001\002\000\004\041\uffd1\001\002\000\012\031" +
    "\114\072\115\073\121\077\120\001\002\000\012\031\114" +
    "\072\115\073\121\077\120\001\002\000\014\035\uff8a\051" +
    "\uff8a\052\uff8a\053\124\054\125\001\002\000\014\035\uff8b" +
    "\051\uff8b\052\uff8b\053\124\054\125\001\002\000\050\003" +
    "\uff9c\004\uff9c\005\uff9c\006\uff9c\007\uff9c\010\uff9c\012\uff9c" +
    "\013\uff9c\016\uff9c\021\uff9c\023\uff9c\027\uff9c\032\uff9c\033" +
    "\uff9c\034\uff9c\040\uff9c\043\uff9c\072\uff9c\077\uff9c\001\002" +
    "\000\010\040\024\072\032\077\171\001\002\000\004\041" +
    "\172\001\002\000\020\035\uff73\037\uff73\041\uff73\047\uff73" +
    "\065\uff73\066\uff73\067\uff73\001\002\000\004\042\173\001" +
    "\002\000\046\003\044\004\025\005\060\006\033\007\021" +
    "\010\063\012\050\013\017\016\036\021\031\023\056\027" +
    "\042\032\054\033\066\034\023\040\024\072\032\077\037" +
    "\001\002\000\004\043\175\001\002\000\050\003\uff61\004" +
    "\uff61\005\uff61\006\uff61\007\uff61\010\uff61\012\uff61\013\uff61" +
    "\016\uff61\021\uff61\023\uff61\027\uff61\032\uff61\033\uff61\034" +
    "\uff61\040\uff61\043\uff61\072\uff61\077\uff61\001\002\000\004" +
    "\072\uff6b\001\002\000\004\072\uff68\001\002\000\004\072" +
    "\uff6a\001\002\000\004\072\uff69\001\002\000\004\072\032" +
    "\001\002\000\010\035\uff7e\041\uff7e\047\uff7e\001\002\000" +
    "\050\003\uff9f\004\uff9f\005\uff9f\006\uff9f\007\uff9f\010\uff9f" +
    "\012\uff9f\013\uff9f\016\uff9f\021\uff9f\023\uff9f\027\uff9f\032" +
    "\uff9f\033\uff9f\034\uff9f\040\uff9f\043\uff9f\072\uff9f\077\uff9f" +
    "\001\002\000\050\003\uffa0\004\uffa0\005\uffa0\006\uffa0\007" +
    "\uffa0\010\uffa0\012\uffa0\013\uffa0\016\uffa0\021\uffa0\023\uffa0" +
    "\027\uffa0\032\uffa0\033\uffa0\034\uffa0\040\uffa0\043\uffa0\072" +
    "\uffa0\077\uffa0\001\002\000\004\045\207\001\002\000\004" +
    "\077\210\001\002\000\006\035\uffc1\036\211\001\002\000" +
    "\004\076\212\001\002\000\004\035\uffc0\001\002\000\050" +
    "\003\uff9d\004\uff9d\005\uff9d\006\uff9d\007\uff9d\010\uff9d\012" +
    "\uff9d\013\uff9d\016\uff9d\021\uff9d\023\uff9d\027\uff9d\032\uff9d" +
    "\033\uff9d\034\uff9d\040\uff9d\043\uff9d\072\uff9d\077\uff9d\001" +
    "\002\000\050\003\uff96\004\uff96\005\uff96\006\uff96\007\uff96" +
    "\010\uff96\012\uff96\013\uff96\016\uff96\021\uff96\023\uff96\027" +
    "\uff96\032\uff96\033\uff96\034\uff96\040\uff96\043\uff96\072\uff96" +
    "\077\uff96\001\002\000\004\035\ufffb\001\002\000\004\035" +
    "\ufffa\001\002\000\004\035\ufff7\001\002\000\004\035\ufff9" +
    "\001\002\000\004\035\ufff8\001\002\000\004\043\uffc8\001" +
    "\002\000\006\072\232\077\231\001\002\000\022\031\114" +
    "\070\131\071\134\072\115\073\121\074\227\075\230\077" +
    "\120\001\002\000\010\035\uffab\051\162\052\163\001\002" +
    "\000\004\035\uffad\001\002\000\004\035\uffb4\001\002\000" +
    "\004\035\uffb1\001\002\000\004\045\240\001\002\000\004" +
    "\045\233\001\002\000\004\036\234\001\002\000\012\031" +
    "\114\072\115\073\121\077\120\001\002\000\010\035\uff8d" +
    "\051\162\052\163\001\002\000\004\035\uff8c\001\002\000" +
    "\004\035\uffa8\001\002\000\004\036\241\001\002\000\012" +
    "\031\114\072\115\073\121\077\120\001\002\000\004\035" +
    "\uffa7\001\002\000\010\040\024\072\032\077\171\001\002" +
    "\000\004\041\245\001\002\000\004\017\246\001\002\000" +
    "\004\042\247\001\002\000\046\003\044\004\025\005\060" +
    "\006\033\007\021\010\063\012\050\013\017\016\036\021" +
    "\031\023\056\027\042\032\054\033\066\034\023\040\024" +
    "\072\032\077\037\001\002\000\004\043\251\001\002\000" +
    "\052\003\uff63\004\uff63\005\uff63\006\uff63\007\uff63\010\uff63" +
    "\012\uff63\013\uff63\016\uff63\020\252\021\uff63\023\uff63\027" +
    "\uff63\032\uff63\033\uff63\034\uff63\040\uff63\043\uff63\072\uff63" +
    "\077\uff63\001\002\000\004\042\253\001\002\000\046\003" +
    "\044\004\025\005\060\006\033\007\021\010\063\012\050" +
    "\013\017\016\036\021\031\023\056\027\042\032\054\033" +
    "\066\034\023\040\024\072\032\077\037\001\002\000\004" +
    "\043\255\001\002\000\050\003\uff62\004\uff62\005\uff62\006" +
    "\uff62\007\uff62\010\uff62\012\uff62\013\uff62\016\uff62\021\uff62" +
    "\023\uff62\027\uff62\032\uff62\033\uff62\034\uff62\040\uff62\043" +
    "\uff62\072\uff62\077\uff62\001\002\000\006\035\uffb0\036\257" +
    "\001\002\000\012\040\024\070\131\071\134\077\171\001" +
    "\002\000\004\035\uffaf\001\002\000\004\035\uffae\001\002" +
    "\000\004\004\263\001\002\000\004\077\264\001\002\000" +
    "\004\036\265\001\002\000\004\072\266\001\002\000\004" +
    "\047\uff5f\001\002\000\004\047\270\001\002\000\010\040" +
    "\024\072\032\077\171\001\002\000\004\047\272\001\002" +
    "\000\002\001\002\000\004\041\274\001\002\000\004\042" +
    "\275\001\002\000\046\003\044\004\025\005\060\006\033" +
    "\007\021\010\063\012\050\013\017\016\036\021\031\023" +
    "\056\027\042\032\054\033\066\034\023\040\024\072\032" +
    "\077\037\001\002\000\004\043\277\001\002\000\050\003" +
    "\uff60\004\uff60\005\uff60\006\uff60\007\uff60\010\uff60\012\uff60" +
    "\013\uff60\016\uff60\021\uff60\023\uff60\027\uff60\032\uff60\033" +
    "\uff60\034\uff60\040\uff60\043\uff60\072\uff60\077\uff60\001\002" +
    "\000\004\043\301\001\002\000\004\002\ufffc\001\002\000" +
    "\006\040\024\077\171\001\002\000\006\040\uff67\077\uff67" +
    "\001\002\000\006\040\uff64\077\uff64\001\002\000\006\040" +
    "\uff66\077\uff66\001\002\000\006\040\uff65\077\uff65\001\002" +
    "\000\020\035\uff7a\037\306\041\uff7a\047\uff7a\065\303\066" +
    "\305\067\304\001\002\000\010\035\uff7c\041\uff7c\047\uff7c" +
    "\001\002\000\006\040\024\077\171\001\002\000\010\035" +
    "\uff79\041\uff79\047\uff79\001\002\000\006\035\uffbd\036\314" +
    "\001\002\000\012\031\114\072\115\073\121\077\120\001" +
    "\002\000\010\035\uffbc\051\162\052\163\001\002\000\004" +
    "\035\uffbb\001\002\000\004\041\320\001\002\000\020\035" +
    "\uff72\037\uff72\041\uff72\047\uff72\065\uff72\066\uff72\067\uff72" +
    "\001\002\000\004\043\uffc7\001\002\000\006\035\uffb8\036" +
    "\323\001\002\000\010\031\114\074\326\077\325\001\002" +
    "\000\004\035\uffb6\001\002\000\004\035\uffb5\001\002\000" +
    "\004\035\uffb7\001\002\000\004\045\330\001\002\000\004" +
    "\077\331\001\002\000\006\035\uffbf\036\332\001\002\000" +
    "\004\076\333\001\002\000\004\035\uffbe\001\002\000\050" +
    "\003\uff9b\004\uff9b\005\uff9b\006\uff9b\007\uff9b\010\uff9b\012" +
    "\uff9b\013\uff9b\016\uff9b\021\uff9b\023\uff9b\027\uff9b\032\uff9b" +
    "\033\uff9b\034\uff9b\040\uff9b\043\uff9b\072\uff9b\077\uff9b\001" +
    "\002\000\004\041\371\001\002\000\014\004\343\006\341" +
    "\007\342\010\337\011\344\001\002\000\004\077\366\001" +
    "\002\000\004\041\361\001\002\000\004\077\356\001\002" +
    "\000\004\077\353\001\002\000\004\077\350\001\002\000" +
    "\004\077\345\001\002\000\006\041\uffdf\047\346\001\002" +
    "\000\014\004\343\006\341\007\342\010\337\011\344\001" +
    "\002\000\004\041\uffda\001\002\000\006\041\uffe2\047\351" +
    "\001\002\000\014\004\343\006\341\007\342\010\337\011" +
    "\344\001\002\000\004\041\uffdd\001\002\000\006\041\uffe1" +
    "\047\354\001\002\000\014\004\343\006\341\007\342\010" +
    "\337\011\344\001\002\000\004\041\uffdc\001\002\000\006" +
    "\041\uffe0\047\357\001\002\000\014\004\343\006\341\007" +
    "\342\010\337\011\344\001\002\000\004\041\uffdb\001\002" +
    "\000\004\042\362\001\002\000\046\003\044\004\025\005" +
    "\060\006\033\007\021\010\063\012\050\013\017\016\036" +
    "\021\031\023\056\027\042\032\054\033\066\034\023\040" +
    "\024\072\032\077\037\001\002\000\004\043\uffec\001\002" +
    "\000\004\043\365\001\002\000\010\004\uffeb\005\uffeb\007" +
    "\uffeb\001\002\000\006\041\uffde\047\367\001\002\000\014" +
    "\004\343\006\341\007\342\010\337\011\344\001\002\000" +
    "\004\041\uffd9\001\002\000\004\042\372\001\002\000\046" +
    "\003\044\004\025\005\060\006\033\007\021\010\063\012" +
    "\050\013\017\016\036\021\031\023\056\027\042\032\054" +
    "\033\066\034\023\040\024\072\032\077\037\001\002\000" +
    "\004\043\ufff5\001\002\000\004\043\375\001\002\000\010" +
    "\004\ufff4\005\ufff4\007\ufff4\001\002\000\016\004\uffe7\006" +
    "\uffe7\007\uffe7\010\uffe7\011\uffe7\041\ufff0\001\002\000\004" +
    "\041\u0107\001\002\000\014\004\343\006\341\007\342\010" +
    "\337\011\344\001\002\000\004\041\u0102\001\002\000\004" +
    "\042\u0103\001\002\000\046\003\044\004\025\005\060\006" +
    "\033\007\021\010\063\012\050\013\017\016\036\021\031" +
    "\023\056\027\042\032\054\033\066\034\023\040\024\072" +
    "\032\077\037\001\002\000\004\043\uffe6\001\002\000\004" +
    "\043\u0106\001\002\000\010\004\uffe5\005\uffe5\007\uffe5\001" +
    "\002\000\004\042\u0108\001\002\000\046\003\044\004\025" +
    "\005\060\006\033\007\021\010\063\012\050\013\017\016" +
    "\036\021\031\023\056\027\042\032\054\033\066\034\023" +
    "\040\024\072\032\077\037\001\002\000\004\043\uffef\001" +
    "\002\000\004\043\u010b\001\002\000\010\004\uffee\005\uffee" +
    "\007\uffee\001\002\000\016\004\uffea\006\uffea\007\uffea\010" +
    "\uffea\011\uffea\041\ufff3\001\002\000\014\004\343\006\341" +
    "\007\342\010\337\011\344\001\002\000\004\041\u010f\001" +
    "\002\000\004\042\u0110\001\002\000\046\003\044\004\025" +
    "\005\060\006\033\007\021\010\063\012\050\013\017\016" +
    "\036\021\031\023\056\027\042\032\054\033\066\034\023" +
    "\040\024\072\032\077\037\001\002\000\004\043\ufff2\001" +
    "\002\000\004\043\u0113\001\002\000\010\004\ufff1\005\ufff1" +
    "\007\ufff1\001\002\000\004\041\u0115\001\002\000\004\042" +
    "\u0116\001\002\000\046\003\044\004\025\005\060\006\033" +
    "\007\021\010\063\012\050\013\017\016\036\021\031\023" +
    "\056\027\042\032\054\033\066\034\023\040\024\072\032" +
    "\077\037\001\002\000\004\043\uffe9\001\002\000\004\043" +
    "\u0119\001\002\000\010\004\uffe8\005\uffe8\007\uffe8\001\002" +
    "\000\004\002\001\001\002\000\004\002\000\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\u0119\000\010\002\005\003\004\004\003\001\001\000" +
    "\010\002\u011a\003\004\004\003\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\006\071\334\077\335\001\001\000\004" +
    "\067\013\001\001\000\002\001\001\000\060\006\027\007" +
    "\060\010\044\011\056\012\037\013\050\022\017\024\033" +
    "\025\026\026\052\032\046\033\045\034\054\041\015\042" +
    "\063\043\051\050\064\051\021\052\042\053\025\054\061" +
    "\055\040\064\034\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\060\006\320\007\060\010\044\011\056\012\037\013" +
    "\050\022\017\024\033\025\026\026\052\032\046\033\045" +
    "\034\054\041\015\042\063\043\051\050\064\051\021\052" +
    "\042\053\025\054\061\055\040\064\034\001\001\000\010" +
    "\024\316\026\052\055\040\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\031\301\001\001\000\004\070\277" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\060\006\221\007\060\010\044\011" +
    "\056\012\037\013\050\022\017\024\033\025\026\026\052" +
    "\032\046\033\045\034\054\041\015\042\063\043\051\050" +
    "\064\051\021\052\042\053\025\054\061\055\040\064\034" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\030\201\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\014\005\116\046\110\060\112\061" +
    "\115\065\111\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\010\005\132\016\140\057\131\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\010\005\116\060\126\065\111\001\001" +
    "\000\010\005\116\060\125\065\111\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\010\005" +
    "\132\016\143\057\131\001\001\000\002\001\001\000\002" +
    "\001\001\000\010\005\132\016\146\057\131\001\001\000" +
    "\002\001\001\000\010\005\132\016\150\057\131\001\001" +
    "\000\002\001\001\000\010\005\132\016\152\057\131\001" +
    "\001\000\002\001\001\000\010\005\132\016\154\057\131" +
    "\001\001\000\002\001\001\000\010\005\132\016\156\057" +
    "\131\001\001\000\002\001\001\000\010\005\132\016\160" +
    "\057\131\001\001\000\002\001\001\000\012\005\116\060" +
    "\112\061\164\065\111\001\001\000\012\005\116\060\112" +
    "\061\163\065\111\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\016\013\167\022\017\024\033" +
    "\025\026\026\052\055\040\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\060\006\173\007\060" +
    "\010\044\011\056\012\037\013\050\022\017\024\033\025" +
    "\026\026\052\032\046\033\045\034\054\041\015\042\063" +
    "\043\051\050\064\051\021\052\042\053\025\054\061\055" +
    "\040\064\034\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\010\024\202\026\052\055\040\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\016\005\116\046\224\057\225\060\112" +
    "\061\115\065\111\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\020\005\116\044" +
    "\236\046\234\047\235\060\112\061\115\065\111\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\020\005\116\044\241\046\234\047\235" +
    "\060\112\061\115\065\111\001\001\000\002\001\001\000" +
    "\016\013\243\022\017\024\033\025\026\026\052\055\040" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\060\006\247\007\060\010\044\011\056\012\037" +
    "\013\050\022\017\024\033\025\026\026\052\032\046\033" +
    "\045\034\054\041\015\042\063\043\051\050\064\051\021" +
    "\052\042\053\025\054\061\055\040\064\034\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\060" +
    "\006\253\007\060\010\044\011\056\012\037\013\050\022" +
    "\017\024\033\025\026\026\052\032\046\033\045\034\054" +
    "\041\015\042\063\043\051\050\064\051\021\052\042\053" +
    "\025\054\061\055\040\064\034\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\010\022\260\025" +
    "\026\057\257\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\037\266\001\001\000\002\001\001\000\002\001\001" +
    "\000\016\013\270\022\017\024\033\025\026\026\052\055" +
    "\040\001\001\000\002\001\001\000\004\014\272\001\001" +
    "\000\002\001\001\000\002\001\001\000\060\006\275\007" +
    "\060\010\044\011\056\012\037\013\050\022\017\024\033" +
    "\025\026\026\052\032\046\033\045\034\054\041\015\042" +
    "\063\043\051\050\064\051\021\052\042\053\025\054\061" +
    "\055\040\064\034\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\006\023\307" +
    "\025\306\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\031\310\001\001" +
    "\000\002\001\001\000\006\023\311\025\306\001\001\000" +
    "\002\001\001\000\002\001\001\000\016\005\116\046\314" +
    "\047\315\060\112\061\115\065\111\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\005\323\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\015\337\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\015" +
    "\346\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\015\351\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\015\354\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\015\357\001\001\000\002\001\001\000\002\001" +
    "\001\000\060\006\362\007\060\010\044\011\056\012\037" +
    "\013\050\022\017\024\033\025\026\026\052\032\046\033" +
    "\045\034\054\041\015\042\063\043\051\050\064\051\021" +
    "\052\042\053\025\054\061\055\040\064\034\001\001\000" +
    "\004\100\363\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\015\367\001\001\000\002\001" +
    "\001\000\002\001\001\000\060\006\372\007\060\010\044" +
    "\011\056\012\037\013\050\022\017\024\033\025\026\026" +
    "\052\032\046\033\045\034\054\041\015\042\063\043\051" +
    "\050\064\051\021\052\042\053\025\054\061\055\040\064" +
    "\034\001\001\000\004\072\373\001\001\000\002\001\001" +
    "\000\002\001\001\000\006\075\376\103\377\001\001\000" +
    "\002\001\001\000\004\015\u0100\001\001\000\002\001\001" +
    "\000\002\001\001\000\060\006\u0103\007\060\010\044\011" +
    "\056\012\037\013\050\022\017\024\033\025\026\026\052" +
    "\032\046\033\045\034\054\041\015\042\063\043\051\050" +
    "\064\051\021\052\042\053\025\054\061\055\040\064\034" +
    "\001\001\000\004\104\u0104\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\060\006\u0108\007\060" +
    "\010\044\011\056\012\037\013\050\022\017\024\033\025" +
    "\026\026\052\032\046\033\045\034\054\041\015\042\063" +
    "\043\051\050\064\051\021\052\042\053\025\054\061\055" +
    "\040\064\034\001\001\000\004\076\u0109\001\001\000\002" +
    "\001\001\000\002\001\001\000\006\073\u010d\101\u010c\001" +
    "\001\000\004\015\u0113\001\001\000\002\001\001\000\002" +
    "\001\001\000\060\006\u0110\007\060\010\044\011\056\012" +
    "\037\013\050\022\017\024\033\025\026\026\052\032\046" +
    "\033\045\034\054\041\015\042\063\043\051\050\064\051" +
    "\021\052\042\053\025\054\061\055\040\064\034\001\001" +
    "\000\004\074\u0111\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\060\006\u0116" +
    "\007\060\010\044\011\056\012\037\013\050\022\017\024" +
    "\033\025\026\026\052\032\046\033\045\034\054\041\015" +
    "\042\063\043\051\050\064\051\021\052\042\053\025\054" +
    "\061\055\040\064\034\001\001\000\004\102\u0117\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}


  /** Scan to get the next Symbol. */
  public java_cup.runtime.Symbol scan()
    throws java.lang.Exception
    {
 return s.next_token(); 
    }


    Scanner s;
    public parser(int t, Scanner s, SymbolTableManager manager, Lexer lexer){ 
      this.s=s; 
      this.stManager = manager;
      this.lexer = lexer;
      }
    public boolean syntaxErrors;
    public int syntaxErrs = 0;
    public SymbolTableManager stManager;
    public SymbolTable currentSymbolTable = null;
    public String currentFunction;
    public Lexer lexer;
    public String currentTemp = "t0";
    public int currentTempCount = 0;
    public Stack<String> mathExprTempsStack = new Stack<>();
    public ArrayList<String> ids = new ArrayList<>();
    public ArrayList<String> idsTemps = new ArrayList<>();



    @Override
    public void syntax_error(Symbol current_token) {
      String errInfo = "SYNTAX ERROR AT LINE " + (current_token.left) + " COLUMN " 
        + (current_token.right) + " VALUE: " + current_token.value;
      System.out.println(errInfo); 
      reportErrToFile(errInfo);
      this.syntaxErrs += 1;
    }    

    public void printArrays() {
      int i = 0;
      int arraySize = ids.size();
      while(i < ids.size()) { 
        System.out.println("ID: " + ids.get(i) + " TEMP: " + idsTemps.get(i));
        System.out.println("hmmmmmmmmmmmmmmmmmmm"); 
        i++;
      }
      System.out.println(ids);
      System.out.println(idsTemps);
}

    private void addIdsnTemps(String id, String temp) {
      int i = 0;
      int arraySize = this.ids.size();
      if (arraySize == 0) {
        this.ids.add(id);
        this.idsTemps.add(temp);
      } else {
        while(i < arraySize) {
          if(id.equals(this.ids.get(i))) {
            this.ids.remove(i);
            this.idsTemps.remove(i);
            i = arraySize; 
          }
          i++;
        }
        this.ids.add(id);
        this.idsTemps.add(temp);
      }
      System.out.println(this.ids);
      System.out.println(this.idsTemps);
    }
    private void reportErrToFile(String info){
      FileManager fileManager = new FileManager("C:/Users/chris/Documents/NetBeansProjects/CeI-PYI/src/main/java/symbolTable/Tokens.txt");
      fileManager.writeToFile(info);
    }

    private void generateICode(String info){
      FileManager fileManager = new FileManager("C:/Users/chris/Documents/NetBeansProjects/CeI-PYI/src/main/java/symbolTable/iCode.txt");
      fileManager.writeToFile(info);
    }

    // Converts String to Integer.
    private Integer convertToInteger(Object val){
      //System.out.println("**********************VALUE CONVERTING TO INT: " + val);
      return Integer.parseInt(val.toString());
    }
    // Converts String to Float.
    private Float convertToFloat(Object val){
      //System.out.println("**********************VALUE CONVERTING TO FLOAT: " + val);
      return Float.parseFloat(val.toString());
    }
    public void initParser(Lexer lexer){
        //Object result;
        try {
            //BufferedReader br = new BufferedReader(new FileReader(file));
            parser codeParser = new parser(0,
                    s, lexer.getSymbolTableManager(), lexer);
            Object result = codeParser.parse().value;
            //result = codeParser.parse().value;
            System.out.println("THE PARSER RESULT IS: " + result);
            String res = this.syntaxErrs > 0? "THERE WERE " + syntaxErrs + 
              "ERRORS. THE CODE CANNOT BE GENERATED." : "THE CODE CAN BE GENERATED.";
            System.out.println(res);
        } catch (Exception ex) {
            //System.err.println("AT THIS TIME RESULT IS: " + result);
            System.err.println("AN ERROR HAS BEEN FOUND. PROCEEDING WITH THE REST OF THE FILE.");
            ex.printStackTrace();
        }
    }
    
  public void printSymbolTable() {
    int index = 0;
    int size = stManager.getSymbolTables().size();
    for(int i = 0; i < size; i++) {
      System.out.println();
      String funcName = stManager.getSymbolTables().get(i).getFuncName();
      String funcType = stManager.getSymbolTables().get(i).getFuncType();
      String funcReturn = stManager.getSymbolTables().get(i).getReturnVal();
      ArrayList<String> funcParams = stManager.getSymbolTables().get(i).getFuncParams();
      int funcScope = stManager.getSymbolTables().get(i).getTableScope();
      Map<String,ArrayList<String>> current = stManager.getSymbolTables().get(i).getSymbolTable();
      System.out.println("FUNCTION \t SCOPE \t\t VARIABLES \t ATTRIBUTES \t\t FUNC RETURN TYPE \t\t FUNC RETURN VAL \t\t FUNC PARAMS");
      current.forEach(
        (k, v) -> System.out.println(funcName + "\t\t " + funcScope +" \t\t " + k + " \t\t " + v
          + "\t\t\t " + funcType + "\t\t\t " + funcReturn + "\t\t\t\t " + funcParams 
          + "\n_________________________________________________________________________________________________________________________________________________________")
      );
    } 
  }

  public boolean checkVarExistance(String id) {
    ArrayList<SymbolTable> sTables = this.stManager.getSymbolTables();
    int limit = sTables.size() - 1;
    SymbolTable st;
    for (int i = 0; i <= limit; i++) {
      st = sTables.get(i);
      if(st.getFuncName().equals(this.currentFunction)) {
        if(st.getSymbolTable().containsKey(id)) {
          return true;
        }
      }
    }
    return false;
  }
  // Updates the symbol table entries for type and value for the given id.
  public void updateIntegerSymbolTable(Object id, Object type, Integer val) {
    ArrayList<SymbolTable> sTables = this.stManager.getSymbolTables();
    int limit = sTables.size() - 1;
    SymbolTable st;
    ArrayList<String> attributes = new ArrayList<>();
    attributes.add(type.toString());
    attributes.add(val != null? Integer.toString(val) : null);
    for (int i = 0; i <= limit; i++) {
      st = sTables.get(i);
      if(st.getFuncName().equals(this.currentFunction)) {
        st.getSymbolTable().
          computeIfPresent(id.toString(), (key, value) -> value = attributes);
      }
    }
  }

  // Updates the symbol table entries for type and value for the given id.
  public void updateFloatSymbolTable(Object id, Object type, Float val) {
    ArrayList<SymbolTable> sTables = this.stManager.getSymbolTables();
    int limit = sTables.size() - 1;
    SymbolTable st;
    ArrayList<String> attributes = new ArrayList<>();
    attributes.add(type.toString());
    attributes.add(val != null? Float.toString(val) : null);
    for (int i = 0; i <= limit; i++) {
      st = sTables.get(i);
      if(st.getFuncName().equals(this.currentFunction)) {
        st.getSymbolTable().
          computeIfPresent(id.toString(), (key, value) -> value = attributes);
      }
    }
  }

  // Updates the symbol table entries for type and value for the given id.
  public void updateCharacterSymbolTable(Object id, Object type, Character val) {
    ArrayList<SymbolTable> sTables = this.stManager.getSymbolTables();
    int limit = sTables.size() - 1;
    SymbolTable st;
    ArrayList<String> attributes = new ArrayList<>();
    attributes.add(type.toString());
    attributes.add(val != null? String.valueOf(val) : null);
    for (int i = 0; i <= limit; i++) {
      st = sTables.get(i);
      if(st.getFuncName().equals(this.currentFunction)) {
        st.getSymbolTable().
          computeIfPresent(id.toString(), (key, value) -> value = attributes);
      }
    }
  }

  // Updates the symbol table entries for type and value for the given id.
  public void updateStringSymbolTable(Object id, Object type, String val) {
    ArrayList<SymbolTable> sTables = this.stManager.getSymbolTables();
    int limit = sTables.size() - 1;
    SymbolTable st;
    ArrayList<String> attributes = new ArrayList<>();
    attributes.add(type.toString());
    attributes.add(val != null? val : null);
    for (int i = 0; i <= limit; i++) {
      st = sTables.get(i);
      if(st.getFuncName().equals(this.currentFunction)) {
        st.getSymbolTable().
          computeIfPresent(id.toString(), (key, value) -> value = attributes);
      }
    }
  }

  // Updates the symbol table entries for type and value for the given id.
  public void updateBooleanSymbolTable(Object id, Object type, String val) {
    ArrayList<SymbolTable> sTables = this.stManager.getSymbolTables();
    int limit = sTables.size() - 1;
    SymbolTable st;
    ArrayList<String> attributes = new ArrayList<>();
    attributes.add(type.toString());
    attributes.add(val != null? val : null);
    for (int i = 0; i <= limit; i++) {
      st = sTables.get(i);
      if(st.getFuncName().equals(this.currentFunction)) {
        st.getSymbolTable().
          computeIfPresent(id.toString(), (key, value) -> value = attributes);
      }
    }
  }

  // To manage variable scope and presence.
  public void updateCurrentFunction(Object name) {
    //System.out.println("CURRENT FUNCTION IS: " + name.toString());
    this.currentFunction = name.toString();
  }

    public String getIdValue(String id) {
    ArrayList<SymbolTable> sTables = this.stManager.getSymbolTables();
    int limit = sTables.size() - 1;
    SymbolTable st;
    String res = "";
    for (int i = 0; i <= limit; i++) {
      st = sTables.get(i);
      if(st.getFuncName().equals(this.currentFunction)) {
        //System.out.println("CURRENT FUNCTION IS: " + this.currentFunction + "ST FUNCTION IS: " + st.getFuncName());
        if(st.getTableScope() != 0){
          res = st.getSymbolTable().get(id).get(1);
          return res;
        }
      }
    }
    return res;
  }

  public String getIdType(String id) {
    ArrayList<SymbolTable> sTables = this.stManager.getSymbolTables();
    int limit = sTables.size() - 1;
    SymbolTable st;
    String res = "";
    for (int i = 0; i <= limit; i++) {
      st = sTables.get(i);
      if(st.getFuncName().equals(this.currentFunction)) {
        //System.out.println("CURRENT FUNCTION IS: " + this.currentFunction + "ST FUNCTION IS: " + st.getFuncName());
        if(st.getTableScope() != 0){
          if(st.getSymbolTable().containsKey(id)) {
            res = st.getSymbolTable().get(id).get(0);
          } else {
            res = "-e2";
          }
          return res;
        }
      }
    }
    return res;
  }

  public String getFuncType(String id) {
    ArrayList<SymbolTable> sTables = this.stManager.getSymbolTables();
    int limit = sTables.size() - 1;
    SymbolTable st;
    String res = "";
    for (int i = 0; i <= limit; i++) {
      st = sTables.get(i);
      System.out.println("COMPARING: " + id + "ST FUNCTION IS: " + st.getFuncName());
      if(st.getTableScope() == 0){
        if(st.getFuncName().equals(id)) {
          res = st.getSymbolTable().get(id).get(0);
          } else {
            res = "-e4";
          }
        }
      } 
    return res;
    }

  // id means refers to variale id and type refers to either variable or function.
  // dataType refers to the required data type for the id to be valid in any operation.
  // Validates the existance of the given id, the scope and value type.
  
public String validateId(String id, String type , String dataType) {    
    // First, validates the existance and scope.
    String result;
    if(validateScope(id)) {
      result = getIdValue(id);
      //System.out.println("RESULT OF ID VALIDATION IS: " + result);
    } else {
      result = "-e1";
    }
    return result;
}

  public String validateFunc(String func, String funcType) {
    
    // First, validates the existance and scope.
    String result = "";
    String res = "";
    ArrayList<SymbolTable> sTables = this.stManager.getSymbolTables();
    SymbolTable st;
    int limit = sTables.size() - 1;
    for (int i = 0; i <= limit; i++) {
      st = sTables.get(i); 
      if(st.getTableScope() == 1) {
        //System.out.println("COMPARING " + st.getFuncName() + " TO " + func);
        if(st.getFuncName().equals(func)) {
          //System.out.println("COMPARING TYPES " + st.getFuncType() + " TO " + funcType);
          if(st.getFuncType().equals(funcType)) {
            res = st.getReturnVal();
            if(!NumberUtils.isParsable(res)) {
                result = getValueFromFunc(func, res);
                return result;
              } else {
                result = st.getReturnVal();
                }
          } else {
            result = "-e2";
            return result;
          }
        }
        result = "-e4";
      }
    }
    return result;
}

  public String getValueFromFunc(String func, String id) {
    ArrayList<SymbolTable> sTables = this.stManager.getSymbolTables();
    int limit = sTables.size() - 1;
    SymbolTable st;
    String result = "";
    for (int i = 0; i <= limit; i++) {
      st = sTables.get(i);
      if(st.getTableScope() != 0 && st.getFuncName().equals(func)) {        
        result = st.getSymbolTable().get(id).get(1);
        return result;
      }
    }

    return result;
  } 
  public boolean validateScope(String id) {
    boolean result = false;
    ArrayList<SymbolTable> sTables = this.stManager.getSymbolTables();
    SymbolTable st;
    int limit = sTables.size() - 1;
    for (int i = 0; i <= limit; i++) {
      st = sTables.get(i);
      if(st.getFuncName().equals(this.currentFunction)) {
        if (st.getSymbolTable().containsKey(id)) {
          int currentScope = lexer.scope;
          // Checks for current scope.
          if (st.getTableScope() < currentScope) {
            //System.out.println("LA VARIABLE EXISTE EN SCOPE ARRIBA");
            result = true;
          } // Checks if it exists on higher scopes. 
          else if (st.getTableScope() == currentScope) {
            //System.out.println("LA VARIABLE EXISTE EN SCOPE PRESENTE");
            result = true;
          } else {
            result = false;
          }
        }
      }
    }
    //System.out.println("VER SI VARIABLE EXISTE: " + id + " - " + result);
    return result;
  }

  // Reports semantic err according to the number received.
  // -e1 means no such id or no such id in the current scope.
  // -e2 means type conflict.
  // -e3 means id has null value.
  // -e4 means no such function. 
 public String reportSemanticErr(String lexeme, String errType) {
    String err = "";
    if(errType == null) {
      err = "--------------- UNKNOW ERR FOR " + lexeme + ". ---------------";
    } else if(errType.equals("-e1")) {
      err = "--------------- SEMANTIC ERR: NO SUCH VARIABLE " + lexeme + " CREATED OR IN SCOPE. ---------------";
    } else if(errType.equals("-e2")) {
      err = "--------------- SEMANTIC ERR: OPERAND, FUNCTION OR VARIABLE " + lexeme + " DATA TYPE CONFLICT FOR VARIBLE " + lexer.idExamination + ". ---------------";
    } else if(errType.equals("-e4")) {
      err = "--------------- SEMANTIC ERR: NO SUCH FUNCTION " + lexeme + " EXISTS. ---------------";
      } else if(errType.equals("-e5")) {
      err = "--------------- SEMANTIC ERR: UNDECLARED VARIABLE " + lexeme + ".---------------";
      } 
    reportErrToFile(err);
    return err;
}



/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$parser$actions {
  private final parser parser;

  /** Constructor */
  CUP$parser$actions(parser parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$parser$do_action_part00000000(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$parser$result;

      /* select the action based on the action number */
      switch (CUP$parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= ini EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = start_val;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$parser$parser.done_parsing();
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // ini ::= function ini 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("ini",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // ini ::= main 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("ini",0, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // NT$0 ::= 
            {
              Object RESULT =null;
		int nameleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object name = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
 
              updateCurrentFunction(name);
              TDCGenerator.codeGenerator("FUNCB", name.toString(), null, null, null);
              //System.out.println("CURRENT FUNC IS: " + currentFunction); 
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$0",53, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // NT$1 ::= 
            {
              Object RESULT =(Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int nameleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Object name = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
 TDCGenerator.codeGenerator("FUNCE", name.toString(), null, null, null); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$1",54, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // main ::= INT MAIN NT$0 LCURLY codeBlock NT$1 RCURLY 
            {
              Object RESULT =null;
              // propagate RESULT from NT$1
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int nameleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		Object name = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("main",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // return ::= RETURN ID 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
              TDCGenerator.codeGenerator("RETURN", id.toString(), null, null, null);
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("return",32, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // return ::= RETURN INTLIT 
            {
              Object RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object val = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
              TDCGenerator.codeGenerator("RETURN", val.toString(), null, null, null);
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("return",32, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // return ::= RETURN FLOATLIT 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("return",32, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // return ::= RETURN CHARLIT 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("return",32, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // return ::= RETURN STRING 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("return",32, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // NT$2 ::= 
            {
              Object RESULT =null;
		int nameleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object name = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
 updateCurrentFunction(name); TDCGenerator.codeGenerator("FUNCB", name.toString(), null, null, null); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$2",55, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // NT$3 ::= 
            {
              Object RESULT =(Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int nameleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Object name = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
TDCGenerator.codeGenerator("FUNCE", name.toString(), null, null, null); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$3",56, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // function ::= INT FUNC NT$2 RPAREN LCURLY codeBlock NT$3 RCURLY 
            {
              Object RESULT =null;
              // propagate RESULT from NT$3
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int nameleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		Object name = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("function",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // NT$4 ::= 
            {
              Object RESULT =null;
		int nameleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object name = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
 updateCurrentFunction(name); TDCGenerator.codeGenerator("FUNCB", name.toString(), null, null, null); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$4",57, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // NT$5 ::= 
            {
              Object RESULT =(Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int nameleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Object name = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
TDCGenerator.codeGenerator("FUNCE", name.toString(), null, null, null); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$5",58, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // function ::= CHAR FUNC NT$4 RPAREN LCURLY codeBlock NT$5 RCURLY 
            {
              Object RESULT =null;
              // propagate RESULT from NT$5
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int nameleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		Object name = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("function",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // NT$6 ::= 
            {
              Object RESULT =null;
		int nameleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object name = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
 updateCurrentFunction(name); TDCGenerator.codeGenerator("FUNCB", name.toString(), null, null, null); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$6",59, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // NT$7 ::= 
            {
              Object RESULT =(Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int nameleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Object name = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
TDCGenerator.codeGenerator("FUNCE", name.toString(), null, null, null); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$7",60, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // function ::= FLOAT FUNC NT$6 RPAREN LCURLY codeBlock NT$7 RCURLY 
            {
              Object RESULT =null;
              // propagate RESULT from NT$7
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int nameleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		Object name = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("function",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // NT$8 ::= 
            {
              Object RESULT =null;
		int nameleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object name = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
 updateCurrentFunction(name); TDCGenerator.codeGenerator("FUNCB", name.toString(), null, null, null); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$8",61, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // NT$9 ::= 
            {
              Object RESULT =(Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int nameleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		Object name = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
TDCGenerator.codeGenerator("FUNCE", name.toString(), null, null, null); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$9",62, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // function ::= INT FUNC NT$8 parameters RPAREN LCURLY codeBlock NT$9 RCURLY 
            {
              Object RESULT =null;
              // propagate RESULT from NT$9
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int nameleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).right;
		Object name = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-7)).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("function",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // NT$10 ::= 
            {
              Object RESULT =null;
		int nameleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object name = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
 updateCurrentFunction(name); TDCGenerator.codeGenerator("FUNCB", name.toString(), null, null, null); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$10",63, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // NT$11 ::= 
            {
              Object RESULT =(Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int nameleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		Object name = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
TDCGenerator.codeGenerator("FUNCE", name.toString(), null, null, null); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$11",64, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // function ::= CHAR FUNC NT$10 parameters RPAREN LCURLY codeBlock NT$11 RCURLY 
            {
              Object RESULT =null;
              // propagate RESULT from NT$11
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int nameleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).right;
		Object name = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-7)).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("function",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // NT$12 ::= 
            {
              Object RESULT =null;
		int nameleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object name = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
 updateCurrentFunction(name); TDCGenerator.codeGenerator("FUNCB", name.toString(), null, null, null); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$12",65, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // NT$13 ::= 
            {
              Object RESULT =(Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int nameleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		Object name = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
TDCGenerator.codeGenerator("FUNCE", name.toString(), null, null, null); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$13",66, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // function ::= FLOAT FUNC NT$12 parameters RPAREN LCURLY codeBlock NT$13 RCURLY 
            {
              Object RESULT =null;
              // propagate RESULT from NT$13
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int nameleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).right;
		Object name = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-7)).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("function",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // functionInv ::= FUNC RPAREN 
            {
              Object RESULT =null;
		int nameleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object name = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
              RESULT = name;
              //String temp = TDCGenerator.newTemporal();
              //TDCGenerator.codeGenerator("CALL", null, name.toString(), null, null);
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("functionInv",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // functionInv ::= FUNC parametersInv RPAREN 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("functionInv",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // parameters ::= INT ID 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 System.out.println("PARAM ES: " + id); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("parameters",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // parameters ::= CHAR ID 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("parameters",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // parameters ::= BOOL ID 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("parameters",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // parameters ::= ARRAY ID 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("parameters",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // parameters ::= STRING ID 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("parameters",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // parameters ::= INT ID COMMA parameters 
            {
              Object RESULT =null;
		int paramleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int paramright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object param = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("parameters",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // parameters ::= CHAR ID COMMA parameters 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("parameters",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // parameters ::= BOOL ID COMMA parameters 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("parameters",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // parameters ::= ARRAY ID COMMA parameters 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("parameters",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // parameters ::= STRING ID COMMA parameters 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("parameters",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // parametersInv ::= INTLIT 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("parametersInv",12, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // parametersInv ::= FLOATLIT 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("parametersInv",12, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // parametersInv ::= CHARLIT 
            {
              Object RESULT =null;
		 System.out.println("PARAM ES: "); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("parametersInv",12, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // parametersInv ::= STRINGLIT 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("parametersInv",12, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // parametersInv ::= boolLit 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("parametersInv",12, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // parametersInv ::= ID 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("parametersInv",12, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // parametersInv ::= functionInv 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("parametersInv",12, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // parametersInv ::= INTLIT COMMA parametersInv 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("parametersInv",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // parametersInv ::= FLOATLIT COMMA parametersInv 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("parametersInv",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // parametersInv ::= CHARLIT COMMA parametersInv 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("parametersInv",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // parametersInv ::= STRINGLIT COMMA parametersInv 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("parametersInv",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // parametersInv ::= boolLit COMMA parametersInv 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("parametersInv",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // parametersInv ::= ID COMMA parametersInv 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("parametersInv",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // parametersInv ::= functionInv COMMA parametersInv 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("parametersInv",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // codeBlock ::= expression 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("codeBlock",4, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // codeBlock ::= COMMENT 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("codeBlock",4, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // codeBlock ::= expression codeBlock 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("codeBlock",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // codeBlock ::= COMMENT codeBlock 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("codeBlock",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // varCreationAsign ::= intCreationAssign 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("varCreationAsign",33, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // varCreationAsign ::= floatCreationAssign 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("varCreationAsign",33, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // varCreationAsign ::= charCreationAssign 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("varCreationAsign",33, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // varCreationAsign ::= stringCreationAssign 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("varCreationAsign",33, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // varCreationAsign ::= boolCreationAssign 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("varCreationAsign",33, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // varCreationAsign ::= INTARR INTLIT RSQUARE ID 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("varCreationAsign",33, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // varCreationAsign ::= INTARR INTLIT RSQUARE ID EQ ARRAYLIT 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("varCreationAsign",33, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // varCreationAsign ::= CHARARR INTLIT RSQUARE ID 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("varCreationAsign",33, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // varCreationAsign ::= CHARARR INTLIT RSQUARE ID EQ ARRAYLIT 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("varCreationAsign",33, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // intCreationAssign ::= INT ID 
            {
              Object RESULT =null;
		int dTypeleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int dTyperight = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object dType = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
              RESULT = null;
              //System.out.println("EL ID DE INT ES: " + id);
              //System.out.println(" --> EL VALOR DE " + id + " ES: " + RESULT);
              updateIntegerSymbolTable(id, dType, null);
              addIdsnTemps(id.toString(), currentTemp);
              TDCGenerator.codeGenerator("ASSIGN", id.toString(), currentTemp, null, "dataChar");
              currentTemp = TDCGenerator.newTemporal();
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("intCreationAssign",39, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // intCreationAssign ::= INT ID EQ intMathExpression 
            {
              Object RESULT =null;
		int dTypeleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int dTyperight = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Object dType = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object val = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
            //System.out.println("ENTRO A INT:dType ID:id EQ intMathExpression:val");
              if(val.getClass().toString().equals("class java.lang.Integer")) {
                RESULT = val;
                //System.out.println("EL ID DE INT ES: " + id);
                //System.out.println(" --> EL VALOR DE " + id + " ES: " + val);
                updateIntegerSymbolTable(id, dType, convertToInteger(RESULT));
              } else {
              System.out.println("*** SEMANTIC ERR *** ID: " + id + " ES INT ES Y ASIGNO FLOAT.");
              }
              //generateICode("\tdataInt " + id + " = " + val.toString());
              //String temp = TDCGenerator.newTemporal();
              //String tempFunc = TDCGenerator.codeGenerator("CALL", temp, val.toString(), null, null);
              String temp = mathExprTempsStack.pop();
              addIdsnTemps(id.toString(), temp);
              TDCGenerator.codeGenerator("ASSIGN", id.toString(), temp, null, "dataInt");
              currentTemp = TDCGenerator.newTemporal();
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("intCreationAssign",39, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // intCreationAssign ::= INT ID EQ floatMathExpression 
            {
              Object RESULT =null;
		int dTypeleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int dTyperight = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Object dType = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Float val = (Float)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
              RESULT = null;
              System.out.println("*** SEMANTIC ERR *** ID ES INT Y ASIGNO FLOAT.");
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("intCreationAssign",39, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // floatCreationAssign ::= FLOAT ID 
            {
              Object RESULT =null;
		int dTypeleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int dTyperight = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object dType = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
              RESULT = null;
              //System.out.println("EL ID DE FLOAT ES: " + id);
              //System.out.println(" --> EL VALOR DE " + id + " ES: " + RESULT);
              updateFloatSymbolTable(id, dType, null);
              addIdsnTemps(id.toString(), currentTemp);
              TDCGenerator.codeGenerator("ASSIGN", id.toString(), currentTemp, null, "dataChar");
              currentTemp = TDCGenerator.newTemporal();
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("floatCreationAssign",40, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // floatCreationAssign ::= FLOAT ID EQ intMathExpression 
            {
              Object RESULT =null;
		int dTypeleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int dTyperight = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Object dType = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object val = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
              RESULT = val;
              //System.out.println("EL ID DE FLOAT ES: " + id);
              //System.out.println(" --> EL VALOR DE " + id + " ES: " + val);
              updateFloatSymbolTable(id, dType, convertToFloat(RESULT));
              //generateICode("\tdataFloat " + id + " = " + val.toString());
              String temp = mathExprTempsStack.pop();
              addIdsnTemps(id.toString(), temp);
              TDCGenerator.codeGenerator("ASSIGN", id.toString(), temp, null, "dataInt");
              currentTemp = TDCGenerator.newTemporal();
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("floatCreationAssign",40, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // charCreationAssign ::= CHAR ID 
            {
              Character RESULT =null;
		int dTypeleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int dTyperight = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object dType = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
              RESULT = null;
              //System.out.println("EL ID DE CHARLIT ES: " + id);
              //System.out.println(" --> EL VALOR DE " + id + " ES: " + RESULT);
              updateCharacterSymbolTable(id, dType, RESULT);
              addIdsnTemps(id.toString(), currentTemp);
              TDCGenerator.codeGenerator("ASSIGN", id.toString(), currentTemp, null, "dataChar");
              currentTemp = TDCGenerator.newTemporal();
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("charCreationAssign",38, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // charCreationAssign ::= CHAR ID EQ CHARLIT 
            {
              Character RESULT =null;
		int dTypeleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int dTyperight = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Object dType = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object val = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
              RESULT = Character.valueOf(val.toString().charAt(1));
              //System.out.println("EL ID DE CHARLIT ES: " + id);
              //System.out.println(" --> EL VALOR DE " + id + " ES: " + RESULT);
              updateCharacterSymbolTable(id, dType, RESULT); 
              //generateICode("\tdataChar " + id + " = " + val.toString());
              addIdsnTemps(id.toString(), currentTemp);
              String tempVal = TDCGenerator.codeGenerator("ASSIGN", currentTemp, val.toString(), null, null);
              currentTemp = TDCGenerator.newTemporal();
              TDCGenerator.codeGenerator("ASSIGN", id.toString(), tempVal, null, "dataChar");
              currentTemp = TDCGenerator.newTemporal();
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("charCreationAssign",38, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // charCreationAssign ::= CHAR ID EQ functionInv 
            {
              Character RESULT =null;
		int dTypeleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int dTyperight = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Object dType = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object val = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
              String res = validateFunc(val.toString(), "char");
              if (!res.contains("-e")) {
                //System.out.println("ENTRO A PARSABLE");
                RESULT = res.charAt(0);
                updateCharacterSymbolTable(id, dType, RESULT);  
              } else {
                System.out.println(reportSemanticErr(val.toString(), res));
                RESULT = null;
              }
              //generateICode("\tdataChar " + id + " = " + "CALL " + val);
              addIdsnTemps(id.toString(), currentTemp);
              String tempFunc = TDCGenerator.codeGenerator("CALL", currentTemp, val.toString(), null, null);
              TDCGenerator.codeGenerator("ASSIGN", id.toString(), currentTemp, null, "dataChar");
              currentTemp = TDCGenerator.newTemporal();
           
              CUP$parser$result = parser.getSymbolFactory().newSymbol("charCreationAssign",38, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // charCreationAssign ::= CHAR ID EQ ID 
            {
              Character RESULT =null;
		int dTypeleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int dTyperight = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Object dType = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object val = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
              //System.out.println("ENTRO A functionInv PARA CHAR = " + val.toString());
              String res = validateId(val.toString(), "char", "id");
              if (!res.contains("-e")) {
                //System.out.println("ENTRO A PARSABLE");
                RESULT = res.charAt(0);
                updateCharacterSymbolTable(id, dType, RESULT);  
              } else {
                System.out.println(reportSemanticErr(val.toString(), res));
                RESULT = null;
              }
              //generateICode("\tdataChar " + id + " = " + val);
              addIdsnTemps(id.toString(), currentTemp);
              //String valTemp = TDCGenerator.codeGenerator("ASSIGN", currentTemp, val.toString(), null, null);
              //currentTemp = TDCGenerator.newTemporal();
              String idTemp = idsTemps.get(ids.indexOf(val.toString()));
              //System.out.println("ID TEMPS IS: " + idTemp);
              //mathExprTempsStack.push(idTemp);
              TDCGenerator.codeGenerator("ASSIGN", id.toString(), idTemp, null, "dataChar");
              currentTemp = TDCGenerator.newTemporal();
           
              CUP$parser$result = parser.getSymbolFactory().newSymbol("charCreationAssign",38, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // charCreationAssign ::= ID EQ CHARLIT 
            {
              Character RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object val = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
              String idType = getIdType(id.toString());
              if(idType.equals("char")) {
              RESULT = Character.valueOf(val.toString().charAt(1));
              updateCharacterSymbolTable(id, "char", RESULT); 
              } else {
                System.out.println(reportSemanticErr(id.toString(),"-e2"));
              }
              //generateICode("\tid " + " = " + val); 
              String valTemp = TDCGenerator.codeGenerator("ASSIGN", currentTemp, val.toString(), null, null);
              currentTemp = TDCGenerator.newTemporal();
              TDCGenerator.codeGenerator("ASSIGN", id.toString(), valTemp, null, null);  
              currentTemp = TDCGenerator.newTemporal();    
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("charCreationAssign",38, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // stringCreationAssign ::= STRING ID 
            {
              String RESULT =null;
		int dTypeleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int dTyperight = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object dType = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
              RESULT = null;
              //System.out.println("EL ID DE STRING ES: " + id);
              //System.out.println(" --> EL VALOR DE " + id + " ES: " + RESULT);
              updateStringSymbolTable(id, dType, RESULT); 
              TDCGenerator.codeGenerator("CREATE", id.toString(), null, null, "dataString");
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("stringCreationAssign",41, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // stringCreationAssign ::= STRING ID EQ STRINGLIT 
            {
              String RESULT =null;
		int dTypeleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int dTyperight = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Object dType = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String val = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
              RESULT = val;
              //System.out.println("EL ID DE STRING ES: " + id);
              //System.out.println(" --> EL VALOR DE " + id + " ES: " + val);
              updateStringSymbolTable(id, dType, RESULT); 
              //generateICode("\tdataString " + id + " = " + val);
              TDCGenerator.codeGenerator("ASSIGN", id.toString(), val.toString(), null, "dataString");
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("stringCreationAssign",41, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // stringCreationAssign ::= ID EQ STRINGLIT 
            {
              String RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String val = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
              String idType = getIdType(id.toString());
              if(idType.equals("string")) {
              RESULT = val;
              updateStringSymbolTable(id, "string", RESULT.toString()); 
              } else {
                System.out.println(reportSemanticErr(id.toString(),"-e2"));
              }
              //generateICode("\tid " + " = " + val);
              TDCGenerator.codeGenerator("ASSIGN", id.toString(), val.toString(), null, "dataString");
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("stringCreationAssign",41, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // boolCreationAssign ::= BOOL ID 
            {
              Boolean RESULT =null;
		int dTypeleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int dTyperight = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object dType = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
              RESULT = null;
              //System.out.println("EL ID DE BOOL ES: " + id);
              //System.out.println(" --> EL VALOR DE " + id + " ES: " + RESULT);
              //updateBooleanSymbolTable(id, dType, null.toString());
              updateBooleanSymbolTable(id, dType, "null"); 
              addIdsnTemps(id.toString(), currentTemp);
              TDCGenerator.codeGenerator("ASSIGN", id.toString(), currentTemp, null, "dataBoolean");
              currentTemp = TDCGenerator.newTemporal();
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("boolCreationAssign",42, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // boolCreationAssign ::= BOOL ID EQ boolLit 
            {
              Boolean RESULT =null;
		int dTypeleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int dTyperight = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Object dType = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Boolean val = (Boolean)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
              RESULT = val;
              //System.out.println("EL ID DE BOOL ES: " + id);
              //System.out.println(" --> EL VALOR DE " + id + " ES: " + val);
              updateBooleanSymbolTable(id, dType, RESULT.toString()); 
              //generateICode("\tdataBoolean " + id + " = " + val);
              addIdsnTemps(id.toString(), currentTemp);
              String valTemp = TDCGenerator.codeGenerator("ASSIGN", currentTemp, val.toString(), null, null);
              currentTemp = TDCGenerator.newTemporal();
              TDCGenerator.codeGenerator("ASSIGN", id.toString(), valTemp, null, "dataBoolean");
              currentTemp = TDCGenerator.newTemporal();
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("boolCreationAssign",42, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // boolCreationAssign ::= BOOL ID EQ logicalExpression 
            {
              Boolean RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("boolCreationAssign",42, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // boolCreationAssign ::= ID EQ boolLit 
            {
              Boolean RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Boolean val = (Boolean)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
              String idType = getIdType(id.toString());
              if(idType.equals("boolean")) {
              RESULT = val;
              updateBooleanSymbolTable(id, "boolean", RESULT.toString()); 
              } else {
                System.out.println(reportSemanticErr(id.toString(),"-e2"));
              }
              //generateICode("\tid " + " = " + val);
              addIdsnTemps(id.toString(), currentTemp);
              String valTemp = TDCGenerator.codeGenerator("ASSIGN", currentTemp, val.toString(), null, null);
              currentTemp = TDCGenerator.newTemporal();
              TDCGenerator.codeGenerator("ASSIGN", id.toString(), valTemp, null, null);
              currentTemp = TDCGenerator.newTemporal();
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("boolCreationAssign",42, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // varAsign ::= intVarAsign 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("varAsign",5, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // intVarAsign ::= ID EQ intMathExpression 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object val = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
              RESULT = val;
              //System.out.println("ENTRO A intVarAsign");
              //System.out.println("EL ID ES: " + id);
              //System.out.println(" --> LA NUEVA ASIGNACION DE " + id + " ES: " + RESULT);
              if(lexer.idTypeExamination.equals("int")) {
                updateIntegerSymbolTable(id, "int", convertToInteger(val.toString()));
              }else if(lexer.idTypeExamination.equals("float")) {
                updateFloatSymbolTable(id, "float", convertToFloat(val.toString()));
              }
              TDCGenerator.codeGenerator("ASSIGN", id.toString(), val.toString(), null, null);
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("intVarAsign",50, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // arrayAccess ::= ID LSQUARE INTLIT RSQUARE 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("arrayAccess",30, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // arrayAccess ::= ID LSQUARE ID RSQUARE 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("arrayAccess",30, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // arrayValModification ::= ID LSQUARE INTLIT RSQUARE EQ mathExpression 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("arrayValModification",31, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // arrayValModification ::= ID LSQUARE ID RSQUARE EQ mathExpression 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("arrayValModification",31, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // printFunction ::= PRINT LPAREN INTLIT RPAREN 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("printFunction",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // printFunction ::= PRINT LPAREN FLOATLIT RPAREN 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("printFunction",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // printFunction ::= PRINT LPAREN CHARLIT RPAREN 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("printFunction",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // printFunction ::= PRINT LPAREN STRINGLIT RPAREN 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("printFunction",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // printFunction ::= PRINT LPAREN ID RPAREN 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("printFunction",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 96: // readFunction ::= READ 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("readFunction",7, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 97: // expression ::= logRelExpression HASH 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("expression",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 98: // expression ::= varCreationAsign HASH 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("expression",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 99: // expression ::= varAsign HASH 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("expression",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 100: // expression ::= printFunction HASH 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("expression",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 101: // expression ::= readFunction HASH 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("expression",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 102: // expression ::= arrayValModification HASH 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("expression",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 103: // expression ::= if 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("expression",8, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 104: // expression ::= while 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("expression",8, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 105: // expression ::= for 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("expression",8, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 106: // expression ::= return HASH 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("expression",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 107: // expression ::= error HASH 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("expression",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 108: // boolLit ::= TRUE 
            {
              Boolean RESULT =null;
		 RESULT = true; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("boolLit",45, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 109: // boolLit ::= FALSE 
            {
              Boolean RESULT =null;
		 RESULT = false; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("boolLit",45, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 110: // intUnaryExpression ::= ID PADD 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
              String res;
              Object eval;
              if(lexer.idTypeExamination.equals("int")) { 
                res = validateId(id.toString(), "int", "id");
              } else {
                res = validateId(id.toString(), "float", "id");
              }
              if (NumberUtils.isParsable(res)) {
                if(lexer.idTypeExamination.equals("int")) { 
                  res = validateId(id.toString(), "int", "id");
                  eval = convertToInteger(res) + 1;
                  RESULT = eval;
                } else {
                  res = validateId(id.toString(), "float", "id");
                  eval = convertToFloat(res) + 1.0;       
                  RESULT = eval;          
                }              
              } else {
                System.out.println(reportSemanticErr(id.toString(), res));
              }
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("intUnaryExpression",51, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 111: // intUnaryExpression ::= ID PSUBS 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
              String res;
              Object eval;
              if(lexer.idTypeExamination.equals("int")) { 
                res = validateId(id.toString(), "int", "id");
              } else {
                res = validateId(id.toString(), "float", "id");
              }
              if (NumberUtils.isParsable(res)) {
                if(lexer.idTypeExamination.equals("int")) { 
                  res = validateId(id.toString(), "int", "id");
                  eval = convertToInteger(res) - 1;
                  RESULT = eval;
                } else {
                  res = validateId(id.toString(), "float", "id");
                  eval = convertToFloat(res) - 1.0;       
                  RESULT = eval;          
                }              
              } else {
                System.out.println(reportSemanticErr(id.toString(), res));
              }
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("intUnaryExpression",51, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 112: // floatUnaryExpression ::= INTLIT PADD 
            {
              Float RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("floatUnaryExpression",52, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 113: // floatUnaryExpression ::= INTLIT PSUBS 
            {
              Float RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("floatUnaryExpression",52, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 114: // floatUnaryExpression ::= FLOATLIT PADD 
            {
              Float RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("floatUnaryExpression",52, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 115: // floatUnaryExpression ::= FLOATLIT PSUBS 
            {
              Float RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("floatUnaryExpression",52, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 116: // mathExpression ::= intMathExpression 
            {
              Object RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object val = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
              System.out.println("EL RESULTADO FINAL ES: " + val);
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("mathExpression",34, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 117: // mathExpression ::= floatMathExpression 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("mathExpression",34, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 118: // intMathExpression ::= intMathExpression ADD intFactor 
            {
              Object RESULT =null;
		int op1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int op1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object op1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int op2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int op2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object op2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
              //System.out.println("HAY OPERACION: " + op1 + " + " + op2 + " = " + (op1 + op2));
              if(lexer.idTypeExamination.equals("int")) {
                RESULT = convertToInteger(op1) + convertToInteger(op2);
              } else if(lexer.idTypeExamination.equals("float")) {
                RESULT = convertToFloat(op1) + convertToFloat(op2);
              }
              String arg2 = mathExprTempsStack.pop();
              TDCGenerator.codeGenerator("ADD", currentTemp, mathExprTempsStack.pop(), arg2, "");
              mathExprTempsStack.push(currentTemp);
              currentTemp = TDCGenerator.newTemporal();
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("intMathExpression",36, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 119: // intMathExpression ::= intMathExpression SUBS intFactor 
            {
              Object RESULT =null;
		int op1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int op1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object op1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int op2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int op2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object op2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
              if(lexer.idTypeExamination.equals("int")) {
                RESULT = convertToInteger(op1) - convertToInteger(op2);
              } else if(lexer.idTypeExamination.equals("float")) {
                RESULT = convertToFloat(op1) - convertToFloat(op2);
              }
              String arg2 = mathExprTempsStack.pop();
              TDCGenerator.codeGenerator("SUBS", currentTemp, mathExprTempsStack.pop(), arg2, "");
              mathExprTempsStack.push(currentTemp);
              currentTemp = TDCGenerator.newTemporal();
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("intMathExpression",36, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 120: // intMathExpression ::= intFactor 
            {
              Object RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object val = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
              //System.out.println("ENTRO A intFactor:val = " + val);
              if(lexer.idTypeExamination.equals("int")) {
                RESULT = convertToInteger(val.toString());
              } else if(lexer.idTypeExamination.equals("float")) {
                RESULT = convertToFloat(val.toString()); 
              }            
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("intMathExpression",36, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 121: // intFactor ::= intFactor MULT intTerm 
            {
              Object RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int fright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object f = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 
              Float fRes;
              Integer iRes;
              Object val;
              //System.out.println("ENTRO A intTerm:t = " + t);
              if(lexer.idTypeExamination.equals("int")) {
                iRes = convertToInteger(f.toString()) * convertToInteger(t.toString());
                val = iRes;
                RESULT = val;
              } else if(lexer.idTypeExamination.equals("float")) {
                fRes = convertToFloat(f.toString()) * convertToFloat(t.toString()); 
                val = fRes;
                RESULT = val;
              }
              String op2 = mathExprTempsStack.pop();
              TDCGenerator.codeGenerator("MULT", currentTemp, mathExprTempsStack.pop(), op2, "");
              mathExprTempsStack.push(currentTemp);
              currentTemp = TDCGenerator.newTemporal();
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("intFactor",47, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 122: // intFactor ::= intFactor DIV intTerm 
            {
              Object RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int fright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object f = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 
              Float fRes;
              Integer iRes;
              Object val;
              //System.out.println("ENTRO A intTerm:t = " + t);
              if(lexer.idTypeExamination.equals("int")) {
                iRes = convertToInteger(f.toString()) / convertToInteger(t.toString());
                val = iRes;
                RESULT = val; 
              } else if(lexer.idTypeExamination.equals("float")) {
                fRes = convertToFloat(f.toString()) / convertToFloat(t.toString());
                val = fRes;
                RESULT = val;
              }
              String op2 = mathExprTempsStack.pop();
              TDCGenerator.codeGenerator("DIV", currentTemp, mathExprTempsStack.pop(), op2, "");
              mathExprTempsStack.push(currentTemp);
              currentTemp = TDCGenerator.newTemporal();
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("intFactor",47, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 123: // intFactor ::= intTerm 
            {
              Object RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 
              Float fRes;
              Integer iRes;
              Object val;
              RESULT = 0;
              //System.out.println("ENTRO A intTerm:t = " + t);
              if(lexer.idTypeExamination.equals("int")) {
                iRes = convertToInteger(t.toString()); 
                val = iRes;
                RESULT = val;
              } else if(lexer.idTypeExamination.equals("float")) {
                fRes = convertToFloat(t.toString()); 
                val = fRes;
                RESULT = val;
              }
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("intFactor",47, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 124: // intTerm ::= INTLIT 
            {
              Object RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object n = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
              if(checkVarExistance(lexer.idExamination)) {
                //System.out.println("LA VARIABLE " + lexer.idExamination + " EXISTE");
                if(validateScope(lexer.idExamination)) {
                  //System.out.println("LA VARIABLE " + lexer.idExamination + " TIENE SCOPE VALIDO");
                  //System.out.println("DICE QUE SI EXISTE.");
                  String idType = getIdType(lexer.idExamination);
                  //System.out.println("LA VARIABLE " + lexer.idExamination + " ES DE TIPO " + idType);
                  if(lexer.idTypeExamination.equals("int")) {
                    //System.out.println("LA VARIABLE " + lexer.idExamination + " ES ENTERA");
                    RESULT = n;
                    TDCGenerator.codeGenerator("ASSIGN", currentTemp, n.toString(), null, null);
                    mathExprTempsStack.push(currentTemp);
                    currentTemp = TDCGenerator.newTemporal();                    
                  } else {
                      System.out.println(reportSemanticErr(n.toString(), "-e2"));
                      RESULT = 0;
                    }
                  } else {
                    System.out.println(reportSemanticErr(lexer.idExamination, "-e1"));
                    RESULT = 0;
                  }
              } else {
                System.out.println(reportSemanticErr(lexer.idExamination, "-e5"));
                RESULT = 0;
              }

            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("intTerm",46, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 125: // intTerm ::= FLOATLIT 
            {
              Object RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object n = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
              if(checkVarExistance(lexer.idExamination)) {
                if(validateScope(lexer.idExamination)) {
                  String idType = getIdType(lexer.idExamination);
                  if(lexer.idTypeExamination.equals("float")) {
                    RESULT = n;
                    TDCGenerator.codeGenerator("ASSIGN", currentTemp, n.toString(), null, null);
                    mathExprTempsStack.push(currentTemp);
                    currentTemp = TDCGenerator.newTemporal(); 
                  } else {
                    System.out.println(reportSemanticErr(n.toString(), "-e2"));
                    RESULT = 0;
                    }
                } else {
                  System.out.println(reportSemanticErr(lexer.idExamination, "-e1"));
                  RESULT = 0;
                  }
              } else {
                System.out.println(reportSemanticErr(lexer.idExamination, "-e5"));
                RESULT = 0;
                }

            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("intTerm",46, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 126: // intTerm ::= ID 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
              //System.out.println("ENTRO A ID = " + id);
              Object val = 0;
              String idType = getIdType(lexer.idExamination);
              String res = "";
              if(lexer.idTypeExamination.equals("int") && idType.equals("int")) { 
                res = validateId(id.toString(), "int", "id");
              } else if(lexer.idTypeExamination.equals("float") && idType.equals("float")) {
                res = validateId(id.toString(), "float", "id");
              } else {
                  res = "-e1";
                }
              if (NumberUtils.isParsable(res)) {
                val = res;
                RESULT = val;
                //TDCGenerator.codeGenerator("ASSIGN", currentTemp, n.toString(), null, null);
                String idTemp = idsTemps.get(ids.indexOf(id.toString()));
                //System.out.println("ID TEMPS IS: " + idTemp);
                mathExprTempsStack.push(idTemp);
              } else {
                  System.out.println(reportSemanticErr(id.toString(), res));
                  RESULT = 0;
              }
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("intTerm",46, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 127: // intTerm ::= functionInv 
            {
              Object RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object n = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 
              Object val = 0;
              String res;
              if(lexer.idTypeExamination.equals("int")) { 
                res = validateFunc(n.toString(), "int");
              } else {
                res = validateFunc(n.toString(), "float");
              }
              if (NumberUtils.isParsable(res)) {
                val = res;
                RESULT = val;
                String tempFunc = TDCGenerator.codeGenerator("CALL", currentTemp, n.toString(), "", "");
                currentTemp = TDCGenerator.newTemporal();
              } else {
                System.out.println(reportSemanticErr(n.toString(), res));
                RESULT = val;
              }
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("intTerm",46, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 128: // intTerm ::= intUnaryExpression 
            {
              Object RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object val = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                RESULT = val;
                  TDCGenerator.codeGenerator("UEXP", currentTemp, val.toString(), "", "");
                  currentTemp = TDCGenerator.newTemporal();
              
              CUP$parser$result = parser.getSymbolFactory().newSymbol("intTerm",46, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 129: // logRelExpression ::= logicalExpression 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("logRelExpression",9, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 130: // logRelExpression ::= relationalExpression 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("logRelExpression",9, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 131: // relationalExpression ::= relationalOperand relationalOperator relationalExpression 
            {
              Object RESULT =null;
		int v1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int v1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object v1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int opleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object op = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int v2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int v2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object v2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
              if(op.toString().equals(">=")) {
                RESULT = convertToInteger(v1) >= convertToInteger(v2);
              } else if(op.toString().equals(">")) {
                RESULT = convertToInteger(v1) > convertToInteger(v2);
              } else if(op.toString().equals("<")) {
                RESULT = convertToInteger(v1) < convertToInteger(v2);
              } else if(op.toString().equals("<=")) {
                RESULT = convertToInteger(v1) <= convertToInteger(v2);
              }
              System.out.println("EL RESULTADO DE RELATIONAL EXPRESSION WITH: " + v1 + " " + op + " " + v2 + " IS " + RESULT);
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("relationalExpression",18, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 132: // relationalExpression ::= relationalOperand 
            {
              Object RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object val = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
              RESULT = val;
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("relationalExpression",18, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 133: // logicalExpression ::= logicalOperand logicalOperator logicalExpr 
            {
              Boolean RESULT =null;
		int v1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int v1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Boolean v1 = (Boolean)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int opleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object op = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int v2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int v2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Boolean v2 = (Boolean)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
              if(op.toString().equals("&&")) {
                RESULT = v1 && v2;
              } else if(op.toString().equals("||")) {
                RESULT = v1 || v2;
              } else if(op.toString().equals("==")) {
                RESULT = v1 == v2;
              }
              System.out.println("EL RESULTADO DE LOGICAL EXPRESSION WITH: " + v1 + " " + op + " " + v2 + " IS " + RESULT);
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("logicalExpression",16, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 134: // logicalExpression ::= logicalOperand 
            {
              Boolean RESULT =null;
		int v1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int v1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Boolean v1 = (Boolean)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
              RESULT = v1;
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("logicalExpression",16, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 135: // logicalExpr ::= logicalOperand 
            {
              Boolean RESULT =null;
		int v1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int v1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Boolean v1 = (Boolean)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
              RESULT = v1;
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("logicalExpr",17, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 136: // logicalExpr ::= logicalOperand logicalOperator logicalExpr 
            {
              Boolean RESULT =null;
		int v1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int v1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Boolean v1 = (Boolean)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int opleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object op = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int v2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int v2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Boolean v2 = (Boolean)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
              if(op.toString().equals("&&")) {
                RESULT = v1 && v2;
              } else if(op.toString().equals("||")) {
                RESULT = v1 || v2;
              } else if(op.toString().equals("==")) {
                RESULT = v1 == v2;
              }
              System.out.println("EL RESULTADO DE LOGICAL EXPR WITH: " + v1 + " " + op + " " + v2 + " IS " + RESULT);
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("logicalExpr",17, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 137: // mathOperand ::= intMathOperand 
            {
              Object RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Integer val = (Integer)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = val; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("mathOperand",35, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 138: // mathOperand ::= floatMathOperand 
            {
              Object RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Float val = (Float)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = val; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("mathOperand",35, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 139: // intMathOperand ::= INTLIT 
            {
              Integer RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object val = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = convertToInteger(val); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("intMathOperand",43, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 140: // floatMathOperand ::= FLOATLIT 
            {
              Float RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object val = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = convertToFloat(val); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("floatMathOperand",44, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 141: // relationalOperand ::= intMathOperand 
            {
              Object RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Integer val = (Integer)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = val; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("relationalOperand",20, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 142: // logicalOperand ::= ID 
            {
              Boolean RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
              Boolean res = Boolean.parseBoolean(getIdValue(id.toString()));
              System.out.println("LOGICAL OPERAND IS: " + res );
              RESULT = res;
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("logicalOperand",19, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 143: // logicalOperand ::= LPAREN relationalExpression RPAREN 
            {
              Boolean RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int valright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object val = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = Boolean.parseBoolean(val.toString()); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("logicalOperand",19, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 144: // mathOperator ::= ADD 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("mathOperator",21, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 145: // mathOperator ::= SUBS 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("mathOperator",21, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 146: // mathOperator ::= DIV 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("mathOperator",21, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 147: // mathOperator ::= MULT 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("mathOperator",21, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 148: // mathOperator ::= EXP 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("mathOperator",21, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 149: // mathOperator ::= MOD 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("mathOperator",21, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 150: // relationalOperator ::= GTE 
            {
              Object RESULT =null;
		 RESULT = (Object) ">="; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("relationalOperator",22, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 151: // relationalOperator ::= GT 
            {
              Object RESULT =null;
		 RESULT = (Object) ">"; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("relationalOperator",22, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 152: // relationalOperator ::= LTE 
            {
              Object RESULT =null;
		 RESULT = (Object) "<="; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("relationalOperator",22, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 153: // relationalOperator ::= LT 
            {
              Object RESULT =null;
		 RESULT = (Object) "<"; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("relationalOperator",22, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 154: // logicalOperator ::= AND 
            {
              Object RESULT =null;
		 RESULT = (Object) "&&"; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("logicalOperator",23, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 155: // logicalOperator ::= OR 
            {
              Object RESULT =null;
		 RESULT = (Object) "||"; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("logicalOperator",23, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 156: // logicalOperator ::= EQEQ 
            {
              Object RESULT =null;
		 RESULT = (Object) "=="; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("logicalOperator",23, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 157: // logicalOperator ::= NOT 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("logicalOperator",23, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 158: // if ::= IF LPAREN logRelExpression RPAREN THEN LCURLY codeBlock RCURLY 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("if",24, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 159: // if ::= IF LPAREN logRelExpression RPAREN THEN LCURLY codeBlock RCURLY ELSE LCURLY codeBlock RCURLY 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("if",24, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-11)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 160: // while ::= WHILE LPAREN logRelExpression RPAREN LCURLY codeBlock RCURLY 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("while",25, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 161: // for ::= FOR LPAREN INT ID EQ zero COMMA logRelExpression COMMA unaryExpression RPAREN LCURLY codeBlock RCURLY 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("for",26, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-13)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 162: // zero ::= INTLIT 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("zero",29, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$parser$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$parser$do_action(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
              return CUP$parser$do_action_part00000000(
                               CUP$parser$act_num,
                               CUP$parser$parser,
                               CUP$parser$stack,
                               CUP$parser$top);
    }
}

}
