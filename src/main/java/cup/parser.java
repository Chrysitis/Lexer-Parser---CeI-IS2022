
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

package cup;

import java_cup.runtime.*;
import jflex.*;
import java.io.FileReader;
import java.io.BufferedReader;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class parser extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return sym.class;
}

  /** Default constructor. */
  @Deprecated
  public parser() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\161\000\002\002\004\000\002\002\003\000\002\002" +
    "\003\000\002\002\004\000\002\002\004\000\002\003\006" +
    "\000\002\003\007\000\002\004\010\000\002\004\010\000" +
    "\002\004\010\000\002\004\011\000\002\004\011\000\002" +
    "\004\011\000\002\005\004\000\002\005\005\000\002\016" +
    "\004\000\002\016\004\000\002\016\004\000\002\016\004" +
    "\000\002\016\004\000\002\016\006\000\002\016\006\000" +
    "\002\016\006\000\002\016\006\000\002\016\006\000\002" +
    "\017\003\000\002\017\003\000\002\017\003\000\002\017" +
    "\003\000\002\017\003\000\002\017\003\000\002\017\005" +
    "\000\002\017\005\000\002\017\005\000\002\017\005\000" +
    "\002\017\005\000\002\017\005\000\002\006\003\000\002" +
    "\006\004\000\002\007\004\000\002\007\006\000\002\007" +
    "\006\000\002\007\004\000\002\007\006\000\002\007\004" +
    "\000\002\007\006\000\002\007\006\000\002\007\004\000" +
    "\002\007\006\000\002\007\002\000\002\007\004\000\002" +
    "\007\006\000\002\010\006\000\002\010\006\000\002\010" +
    "\006\000\002\010\006\000\002\010\006\000\002\011\003" +
    "\000\002\012\003\000\002\012\004\000\002\012\004\000" +
    "\002\012\004\000\002\012\004\000\002\012\004\000\002" +
    "\012\003\000\002\020\003\000\002\020\003\000\002\020" +
    "\003\000\002\021\003\000\002\021\003\000\002\022\003" +
    "\000\002\022\003\000\002\023\003\000\002\023\003\000" +
    "\002\015\004\000\002\015\004\000\002\015\004\000\002" +
    "\015\004\000\002\015\004\000\002\015\004\000\002\013" +
    "\003\000\002\013\005\000\002\014\003\000\002\014\003" +
    "\000\002\026\005\000\002\024\005\000\002\025\003\000" +
    "\002\025\005\000\002\027\003\000\002\027\003\000\002" +
    "\027\003\000\002\030\003\000\002\030\005\000\002\031" +
    "\003\000\002\031\003\000\002\031\003\000\002\031\005" +
    "\000\002\032\003\000\002\032\003\000\002\032\003\000" +
    "\002\032\003\000\002\032\003\000\002\032\003\000\002" +
    "\033\003\000\002\033\003\000\002\033\003\000\002\033" +
    "\003\000\002\034\003\000\002\034\003\000\002\034\003" +
    "\000\002\034\003\000\002\035\012\000\002\035\016" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\324\000\010\004\011\006\007\007\010\001\002\000" +
    "\012\002\000\004\011\006\007\007\010\001\002\000\012" +
    "\002\uffff\004\011\006\007\007\010\001\002\000\004\002" +
    "\324\001\002\000\004\030\312\001\002\000\004\030\300" +
    "\001\002\000\006\027\013\030\012\001\002\000\016\004" +
    "\251\006\246\007\247\010\244\011\250\041\243\001\002" +
    "\000\004\042\014\001\002\000\050\004\023\005\055\006" +
    "\033\007\016\010\056\016\037\030\052\031\053\032\061" +
    "\033\042\034\060\035\uffd0\040\021\043\045\067\032\070" +
    "\044\071\050\072\017\073\040\001\002\000\006\035\uffaf" +
    "\041\uffaf\001\002\000\004\073\237\001\002\000\076\004" +
    "\uffba\005\uffba\006\uffba\007\uffba\010\uffba\016\uffba\030\uffba" +
    "\031\uffba\032\uffba\033\uffba\034\uffba\035\uffba\040\uffba\041" +
    "\uffba\043\uffba\050\uffba\051\uffba\052\uffba\053\uffba\054\uffba" +
    "\055\uffba\060\uffba\061\uffba\062\uffba\063\uffba\067\uffba\070" +
    "\uffba\071\uffba\072\uffba\073\uffba\001\002\000\104\004\uffa8" +
    "\005\uffa8\006\uffa8\007\uffa8\010\uffa8\016\uffa8\030\uffa8\031" +
    "\uffa8\032\uffa8\033\uffa8\034\uffa8\035\uffa8\037\uffa2\040\uffa8" +
    "\043\uffa8\050\uffa8\051\uffa8\052\uffa8\053\uffa8\054\uffa8\055" +
    "\uffa8\060\uffa8\061\uffa8\062\uffa8\063\uffa8\064\uffa2\065\uffa2" +
    "\066\uffa2\067\uffa8\070\uffa8\071\uffa8\072\uffa8\073\uffa8\001" +
    "\002\000\024\030\052\033\042\034\060\040\145\067\137" +
    "\070\144\071\050\072\017\073\143\001\002\000\076\004" +
    "\uffa9\005\uffa9\006\uffa9\007\uffa9\010\uffa9\016\uffa9\030\uffa9" +
    "\031\uffa9\032\uffa9\033\uffa9\034\uffa9\035\uffa9\040\uffa9\041" +
    "\uffa9\043\uffa9\050\uffa9\051\uffa9\052\uffa9\053\uffa9\054\uffa9" +
    "\055\uffa9\060\uffa9\061\uffa9\062\uffa9\063\uffa9\067\uffa9\070" +
    "\uffa9\071\uffa9\072\uffa9\073\uffa9\001\002\000\004\073\233" +
    "\001\002\000\104\004\uffbe\005\uffbe\006\uffbe\007\uffbe\010" +
    "\uffbe\016\uffbe\030\uffbe\031\uffbe\032\uffbe\033\uffbe\034\uffbe" +
    "\035\uffbe\037\uffa3\040\uffbe\043\uffbe\050\uffbe\051\uffbe\052" +
    "\uffbe\053\uffbe\054\uffbe\055\uffbe\060\uffbe\061\uffbe\062\uffbe" +
    "\063\uffbe\064\uffa3\065\uffa3\066\uffa3\067\uffbe\070\uffbe\071" +
    "\uffbe\072\uffbe\073\uffbe\001\002\000\012\037\220\064\216" +
    "\065\217\066\215\001\002\000\004\043\213\001\002\000" +
    "\050\004\uffc7\005\uffc7\006\uffc7\007\uffc7\010\uffc7\016\uffc7" +
    "\030\uffc7\031\uffc7\032\uffc7\033\uffc7\034\uffc7\035\uffc7\040" +
    "\uffc7\043\uffc7\067\uffc7\070\uffc7\071\uffc7\072\uffc7\073\uffc7" +
    "\001\002\000\076\004\uffb1\005\uffb1\006\uffb1\007\uffb1\010" +
    "\uffb1\016\uffb1\030\uffb1\031\uffb1\032\uffb1\033\uffb1\034\uffb1" +
    "\035\uffb1\040\uffb1\041\uffb1\043\uffb1\050\153\051\157\052" +
    "\152\053\155\054\151\055\154\060\uffa6\061\uffa6\062\uffa6" +
    "\063\uffa6\067\uffb1\070\uffb1\071\uffb1\072\uffb1\073\uffb1\001" +
    "\002\000\076\004\uffc0\005\uffc0\006\uffc0\007\uffc0\010\uffc0" +
    "\016\uffc0\030\uffc0\031\uffc0\032\uffc0\033\uffc0\034\uffc0\035" +
    "\uffc0\040\uffc0\041\uffc0\043\uffc0\050\uffc0\051\uffc0\052\uffc0" +
    "\053\uffc0\054\uffc0\055\uffc0\060\uffc0\061\uffc0\062\uffc0\063" +
    "\uffc0\067\uffc0\070\uffc0\071\uffc0\072\uffc0\073\uffc0\001\002" +
    "\000\100\004\uffbd\005\uffbd\006\uffbd\007\uffbd\010\uffbd\016" +
    "\uffbd\030\uffbd\031\uffbd\032\uffbd\033\uffbd\034\uffbd\035\uffbd" +
    "\040\uffbd\043\uffbd\050\uffbd\051\uffbd\052\uffbd\053\uffbd\054" +
    "\uffbd\055\uffbd\056\212\057\211\060\uffbd\061\uffbd\062\uffbd" +
    "\063\uffbd\067\uffbd\070\uffbd\071\uffbd\072\uffbd\073\uffbd\001" +
    "\002\000\004\073\206\001\002\000\076\004\uffbf\005\uffbf" +
    "\006\uffbf\007\uffbf\010\uffbf\016\uffbf\030\uffbf\031\uffbf\032" +
    "\uffbf\033\uffbf\034\uffbf\035\uffbf\040\uffbf\041\uffbf\043\uffbf" +
    "\050\uffbf\051\uffbf\052\uffbf\053\uffbf\054\uffbf\055\uffbf\060" +
    "\uffbf\061\uffbf\062\uffbf\063\uffbf\067\uffbf\070\uffbf\071\uffbf" +
    "\072\uffbf\073\uffbf\001\002\000\006\035\uffae\041\uffae\001" +
    "\002\000\004\035\205\001\002\000\004\040\171\001\002" +
    "\000\110\004\uffa7\005\uffa7\006\uffa7\007\uffa7\010\uffa7\016" +
    "\uffa7\030\uffa7\031\uffa7\032\uffa7\033\uffa7\034\uffa7\035\uffa7" +
    "\037\uffa4\040\uffa7\043\uffa7\050\uffa7\051\uffa7\052\uffa7\053" +
    "\uffa7\054\uffa7\055\uffa7\056\170\057\167\060\uffa7\061\uffa7" +
    "\062\uffa7\063\uffa7\064\uffa4\065\uffa4\066\uffa4\067\uffa7\070" +
    "\uffa7\071\uffa7\072\uffa7\073\uffa7\001\002\000\050\004\023" +
    "\005\055\006\033\007\016\010\056\016\037\030\052\031" +
    "\053\032\061\033\042\034\060\035\uffd0\040\021\043\uffdc" +
    "\067\032\070\044\071\050\072\017\073\040\001\002\000" +
    "\110\004\uffb9\005\uffb9\006\uffb9\007\uffb9\010\uffb9\016\uffb9" +
    "\030\uffb9\031\uffb9\032\uffb9\033\uffb9\034\uffb9\035\uffb9\037" +
    "\uffb9\040\uffb9\041\uffb9\043\uffb9\047\uffb9\050\uffb9\051\uffb9" +
    "\052\uffb9\053\uffb9\054\uffb9\055\uffb9\060\uffb9\061\uffb9\062" +
    "\uffb9\063\uffb9\064\uffb9\065\uffb9\066\uffb9\067\uffb9\070\uffb9" +
    "\071\uffb9\072\uffb9\073\uffb9\001\002\000\004\035\165\001" +
    "\002\000\100\004\uffbc\005\uffbc\006\uffbc\007\uffbc\010\uffbc" +
    "\016\uffbc\030\uffbc\031\uffbc\032\uffbc\033\uffbc\034\uffbc\035" +
    "\uffbc\040\uffbc\043\uffbc\050\uffbc\051\uffbc\052\uffbc\053\uffbc" +
    "\054\uffbc\055\uffbc\056\164\057\163\060\uffbc\061\uffbc\062" +
    "\uffbc\063\uffbc\067\uffbc\070\uffbc\071\uffbc\072\uffbc\073\uffbc" +
    "\001\002\000\012\002\ufffc\004\ufffc\006\ufffc\007\ufffc\001" +
    "\002\000\050\004\uffc1\005\uffc1\006\uffc1\007\uffc1\010\uffc1" +
    "\016\uffc1\030\uffc1\031\uffc1\032\uffc1\033\uffc1\034\uffc1\035" +
    "\uffc1\040\uffc1\043\uffc1\067\uffc1\070\uffc1\071\uffc1\072\uffc1" +
    "\073\uffc1\001\002\000\004\035\162\001\002\000\076\004" +
    "\uffbb\005\uffbb\006\uffbb\007\uffbb\010\uffbb\016\uffbb\030\uffbb" +
    "\031\uffbb\032\uffbb\033\uffbb\034\uffbb\035\uffbb\040\uffbb\041" +
    "\uffbb\043\uffbb\050\uffbb\051\uffbb\052\uffbb\053\uffbb\054\uffbb" +
    "\055\uffbb\060\uffbb\061\uffbb\062\uffbb\063\uffbb\067\uffbb\070" +
    "\uffbb\071\uffbb\072\uffbb\073\uffbb\001\002\000\012\060\132" +
    "\061\134\062\135\063\133\001\002\000\022\033\042\034" +
    "\060\041\110\067\105\070\112\071\111\072\114\073\107" +
    "\001\002\000\004\035\uffc8\001\002\000\004\035\104\001" +
    "\002\000\004\073\101\001\002\000\004\073\076\001\002" +
    "\000\004\035\075\001\002\000\110\004\uffb8\005\uffb8\006" +
    "\uffb8\007\uffb8\010\uffb8\016\uffb8\030\uffb8\031\uffb8\032\uffb8" +
    "\033\uffb8\034\uffb8\035\uffb8\037\uffb8\040\uffb8\041\uffb8\043" +
    "\uffb8\047\uffb8\050\uffb8\051\uffb8\052\uffb8\053\uffb8\054\uffb8" +
    "\055\uffb8\060\uffb8\061\uffb8\062\uffb8\063\uffb8\064\uffb8\065" +
    "\uffb8\066\uffb8\067\uffb8\070\uffb8\071\uffb8\072\uffb8\073\uffb8" +
    "\001\002\000\004\040\062\001\002\000\014\067\064\070" +
    "\065\071\067\072\066\073\063\001\002\000\004\041\074" +
    "\001\002\000\004\041\073\001\002\000\004\041\072\001" +
    "\002\000\004\041\071\001\002\000\004\041\070\001\002" +
    "\000\004\035\uffcb\001\002\000\004\035\uffca\001\002\000" +
    "\004\035\uffcc\001\002\000\004\035\uffcd\001\002\000\004" +
    "\035\uffc9\001\002\000\050\004\uffc6\005\uffc6\006\uffc6\007" +
    "\uffc6\010\uffc6\016\uffc6\030\uffc6\031\uffc6\032\uffc6\033\uffc6" +
    "\034\uffc6\035\uffc6\040\uffc6\043\uffc6\067\uffc6\070\uffc6\071" +
    "\uffc6\072\uffc6\073\uffc6\001\002\000\006\035\uffcf\036\077" +
    "\001\002\000\004\072\100\001\002\000\004\035\uffce\001" +
    "\002\000\006\035\uffd7\036\102\001\002\000\004\070\103" +
    "\001\002\000\004\035\uffd6\001\002\000\050\004\uffc2\005" +
    "\uffc2\006\uffc2\007\uffc2\010\uffc2\016\uffc2\030\uffc2\031\uffc2" +
    "\032\uffc2\033\uffc2\034\uffc2\035\uffc2\040\uffc2\043\uffc2\067" +
    "\uffc2\070\uffc2\071\uffc2\072\uffc2\073\uffc2\001\002\000\006" +
    "\041\uffe8\047\130\001\002\000\006\041\uffe4\047\126\001" +
    "\002\000\006\041\uffe3\047\124\001\002\000\106\004\ufff4" +
    "\005\ufff4\006\ufff4\007\ufff4\010\ufff4\016\ufff4\030\ufff4\031" +
    "\ufff4\032\ufff4\033\ufff4\034\ufff4\035\ufff4\037\ufff4\040\ufff4" +
    "\041\ufff4\043\ufff4\050\ufff4\051\ufff4\052\ufff4\053\ufff4\054" +
    "\ufff4\055\ufff4\060\ufff4\061\ufff4\062\ufff4\063\ufff4\064\ufff4" +
    "\065\ufff4\066\ufff4\067\ufff4\070\ufff4\071\ufff4\072\ufff4\073" +
    "\ufff4\001\002\000\006\041\uffe6\047\122\001\002\000\006" +
    "\041\uffe7\047\120\001\002\000\004\041\117\001\002\000" +
    "\006\041\uffe5\047\115\001\002\000\020\033\042\034\060" +
    "\067\105\070\112\071\111\072\114\073\107\001\002\000" +
    "\004\041\uffdf\001\002\000\106\004\ufff3\005\ufff3\006\ufff3" +
    "\007\ufff3\010\ufff3\016\ufff3\030\ufff3\031\ufff3\032\ufff3\033" +
    "\ufff3\034\ufff3\035\ufff3\037\ufff3\040\ufff3\041\ufff3\043\ufff3" +
    "\050\ufff3\051\ufff3\052\ufff3\053\ufff3\054\ufff3\055\ufff3\060" +
    "\ufff3\061\ufff3\062\ufff3\063\ufff3\064\ufff3\065\ufff3\066\ufff3" +
    "\067\ufff3\070\ufff3\071\ufff3\072\ufff3\073\ufff3\001\002\000" +
    "\020\033\042\034\060\067\105\070\112\071\111\072\114" +
    "\073\107\001\002\000\004\041\uffe1\001\002\000\020\033" +
    "\042\034\060\067\105\070\112\071\111\072\114\073\107" +
    "\001\002\000\004\041\uffe0\001\002\000\020\033\042\034" +
    "\060\067\105\070\112\071\111\072\114\073\107\001\002" +
    "\000\004\041\uffdd\001\002\000\020\033\042\034\060\067" +
    "\105\070\112\071\111\072\114\073\107\001\002\000\004" +
    "\041\uffde\001\002\000\020\033\042\034\060\067\105\070" +
    "\112\071\111\072\114\073\107\001\002\000\004\041\uffe2" +
    "\001\002\000\024\030\uff9a\033\uff9a\034\uff9a\040\uff9a\067" +
    "\uff9a\070\uff9a\071\uff9a\072\uff9a\073\uff9a\001\002\000\024" +
    "\030\uff97\033\uff97\034\uff97\040\uff97\067\uff97\070\uff97\071" +
    "\uff97\072\uff97\073\uff97\001\002\000\024\030\uff99\033\uff99" +
    "\034\uff99\040\uff99\067\uff99\070\uff99\071\uff99\072\uff99\073" +
    "\uff99\001\002\000\024\030\uff98\033\uff98\034\uff98\040\uff98" +
    "\067\uff98\070\uff98\071\uff98\072\uff98\073\uff98\001\002\000" +
    "\024\030\052\033\042\034\060\040\145\067\137\070\144" +
    "\071\050\072\017\073\143\001\002\000\076\004\uffbd\005" +
    "\uffbd\006\uffbd\007\uffbd\010\uffbd\016\uffbd\030\uffbd\031\uffbd" +
    "\032\uffbd\033\uffbd\034\uffbd\035\uffbd\040\uffbd\041\uffbd\043" +
    "\uffbd\050\uffbd\051\uffbd\052\uffbd\053\uffbd\054\uffbd\055\uffbd" +
    "\060\uffbd\061\uffbd\062\uffbd\063\uffbd\067\uffbd\070\uffbd\071" +
    "\uffbd\072\uffbd\073\uffbd\001\002\000\006\035\uffad\041\uffad" +
    "\001\002\000\076\004\uffbe\005\uffbe\006\uffbe\007\uffbe\010" +
    "\uffbe\016\uffbe\030\uffbe\031\uffbe\032\uffbe\033\uffbe\034\uffbe" +
    "\035\uffbe\040\uffbe\041\uffbe\043\uffbe\050\uffbe\051\uffbe\052" +
    "\uffbe\053\uffbe\054\uffbe\055\uffbe\060\uffbe\061\uffbe\062\uffbe" +
    "\063\uffbe\067\uffbe\070\uffbe\071\uffbe\072\uffbe\073\uffbe\001" +
    "\002\000\076\004\uffa8\005\uffa8\006\uffa8\007\uffa8\010\uffa8" +
    "\016\uffa8\030\uffa8\031\uffa8\032\uffa8\033\uffa8\034\uffa8\035" +
    "\uffa8\040\uffa8\041\uffa8\043\uffa8\050\uffa8\051\uffa8\052\uffa8" +
    "\053\uffa8\054\uffa8\055\uffa8\060\uffa8\061\uffa8\062\uffa8\063" +
    "\uffa8\067\uffa8\070\uffa8\071\uffa8\072\uffa8\073\uffa8\001\002" +
    "\000\076\004\uffa7\005\uffa7\006\uffa7\007\uffa7\010\uffa7\016" +
    "\uffa7\030\uffa7\031\uffa7\032\uffa7\033\uffa7\034\uffa7\035\uffa7" +
    "\040\uffa7\041\uffa7\043\uffa7\050\uffa7\051\uffa7\052\uffa7\053" +
    "\uffa7\054\uffa7\055\uffa7\060\uffa7\061\uffa7\062\uffa7\063\uffa7" +
    "\067\uffa7\070\uffa7\071\uffa7\072\uffa7\073\uffa7\001\002\000" +
    "\076\004\uffbc\005\uffbc\006\uffbc\007\uffbc\010\uffbc\016\uffbc" +
    "\030\uffbc\031\uffbc\032\uffbc\033\uffbc\034\uffbc\035\uffbc\040" +
    "\uffbc\041\uffbc\043\uffbc\050\uffbc\051\uffbc\052\uffbc\053\uffbc" +
    "\054\uffbc\055\uffbc\060\uffbc\061\uffbc\062\uffbc\063\uffbc\067" +
    "\uffbc\070\uffbc\071\uffbc\072\uffbc\073\uffbc\001\002\000\022" +
    "\030\052\033\042\034\060\067\137\070\144\071\050\072" +
    "\017\073\143\001\002\000\016\035\uffa6\041\uffa6\060\uffa6" +
    "\061\uffa6\062\uffa6\063\uffa6\001\002\000\004\041\161\001" +
    "\002\000\066\004\uffb1\005\uffb1\006\uffb1\007\uffb1\010\uffb1" +
    "\016\uffb1\030\uffb1\031\uffb1\032\uffb1\033\uffb1\034\uffb1\035" +
    "\uffb1\040\uffb1\041\uffb1\043\uffb1\050\153\051\157\052\152" +
    "\053\155\054\151\055\154\067\uffb1\070\uffb1\071\uffb1\072" +
    "\uffb1\073\uffb1\001\002\000\022\030\uff9b\033\uff9b\034\uff9b" +
    "\067\uff9b\070\uff9b\071\uff9b\072\uff9b\073\uff9b\001\002\000" +
    "\022\030\uff9d\033\uff9d\034\uff9d\067\uff9d\070\uff9d\071\uff9d" +
    "\072\uff9d\073\uff9d\001\002\000\022\030\uffa0\033\uffa0\034" +
    "\uffa0\067\uffa0\070\uffa0\071\uffa0\072\uffa0\073\uffa0\001\002" +
    "\000\022\030\uff9c\033\uff9c\034\uff9c\067\uff9c\070\uff9c\071" +
    "\uff9c\072\uff9c\073\uff9c\001\002\000\022\030\uff9e\033\uff9e" +
    "\034\uff9e\067\uff9e\070\uff9e\071\uff9e\072\uff9e\073\uff9e\001" +
    "\002\000\022\030\052\033\042\034\060\067\137\070\144" +
    "\071\050\072\017\073\143\001\002\000\022\030\uff9f\033" +
    "\uff9f\034\uff9f\067\uff9f\070\uff9f\071\uff9f\072\uff9f\073\uff9f" +
    "\001\002\000\052\004\uffb0\005\uffb0\006\uffb0\007\uffb0\010" +
    "\uffb0\016\uffb0\030\uffb0\031\uffb0\032\uffb0\033\uffb0\034\uffb0" +
    "\035\uffb0\040\uffb0\041\uffb0\043\uffb0\067\uffb0\070\uffb0\071" +
    "\uffb0\072\uffb0\073\uffb0\001\002\000\016\035\uffa5\041\uffa5" +
    "\060\uffa5\061\uffa5\062\uffa5\063\uffa5\001\002\000\050\004" +
    "\uffc5\005\uffc5\006\uffc5\007\uffc5\010\uffc5\016\uffc5\030\uffc5" +
    "\031\uffc5\032\uffc5\033\uffc5\034\uffc5\035\uffc5\040\uffc5\043" +
    "\uffc5\067\uffc5\070\uffc5\071\uffc5\072\uffc5\073\uffc5\001\002" +
    "\000\004\035\uffb2\001\002\000\004\035\uffb3\001\002\000" +
    "\050\004\uffc3\005\uffc3\006\uffc3\007\uffc3\010\uffc3\016\uffc3" +
    "\030\uffc3\031\uffc3\032\uffc3\033\uffc3\034\uffc3\035\uffc3\040" +
    "\uffc3\043\uffc3\067\uffc3\070\uffc3\071\uffc3\072\uffc3\073\uffc3" +
    "\001\002\000\004\043\uffdb\001\002\000\004\035\uffb6\001" +
    "\002\000\004\035\uffb7\001\002\000\024\030\052\033\042" +
    "\034\060\040\021\067\137\070\144\071\050\072\017\073" +
    "\173\001\002\000\004\041\174\001\002\000\022\037\uffa4" +
    "\060\uffa7\061\uffa7\062\uffa7\063\uffa7\064\uffa4\065\uffa4\066" +
    "\uffa4\001\002\000\004\017\175\001\002\000\004\042\176" +
    "\001\002\000\046\004\023\005\055\006\033\007\016\010" +
    "\056\016\037\030\052\031\053\032\061\033\042\034\060" +
    "\035\uffd0\040\021\067\032\070\044\071\050\072\017\073" +
    "\040\001\002\000\004\043\200\001\002\000\052\004\uff92" +
    "\005\uff92\006\uff92\007\uff92\010\uff92\016\uff92\020\201\030" +
    "\uff92\031\uff92\032\uff92\033\uff92\034\uff92\035\uff92\040\uff92" +
    "\043\uff92\067\uff92\070\uff92\071\uff92\072\uff92\073\uff92\001" +
    "\002\000\004\042\202\001\002\000\046\004\023\005\055" +
    "\006\033\007\016\010\056\016\037\030\052\031\053\032" +
    "\061\033\042\034\060\035\uffd0\040\021\067\032\070\044" +
    "\071\050\072\017\073\040\001\002\000\004\043\204\001" +
    "\002\000\050\004\uff91\005\uff91\006\uff91\007\uff91\010\uff91" +
    "\016\uff91\030\uff91\031\uff91\032\uff91\033\uff91\034\uff91\035" +
    "\uff91\040\uff91\043\uff91\067\uff91\070\uff91\071\uff91\072\uff91" +
    "\073\uff91\001\002\000\050\004\uffc4\005\uffc4\006\uffc4\007" +
    "\uffc4\010\uffc4\016\uffc4\030\uffc4\031\uffc4\032\uffc4\033\uffc4" +
    "\034\uffc4\035\uffc4\040\uffc4\043\uffc4\067\uffc4\070\uffc4\071" +
    "\uffc4\072\uffc4\073\uffc4\001\002\000\006\035\uffd2\036\207" +
    "\001\002\000\006\033\042\034\060\001\002\000\004\035" +
    "\uffd1\001\002\000\004\035\uffb4\001\002\000\004\035\uffb5" +
    "\001\002\000\012\002\ufffb\004\ufffb\006\ufffb\007\ufffb\001" +
    "\002\000\014\030\052\033\042\034\060\040\226\073\225" +
    "\001\002\000\014\030\uff93\033\uff93\034\uff93\040\uff93\073" +
    "\uff93\001\002\000\014\030\uff96\033\uff96\034\uff96\040\uff96" +
    "\073\uff96\001\002\000\014\030\uff95\033\uff95\034\uff95\040" +
    "\uff95\073\uff95\001\002\000\014\030\uff94\033\uff94\034\uff94" +
    "\040\uff94\073\uff94\001\002\000\016\035\uffab\037\220\041" +
    "\uffab\064\216\065\217\066\215\001\002\000\006\035\uffac" +
    "\041\uffac\001\002\000\016\035\uffa3\037\uffa3\041\uffa3\064" +
    "\uffa3\065\uffa3\066\uffa3\001\002\000\016\035\uffa2\037\uffa2" +
    "\041\uffa2\064\uffa2\065\uffa2\066\uffa2\001\002\000\016\035" +
    "\uffa4\037\uffa4\041\uffa4\064\uffa4\065\uffa4\066\uffa4\001\002" +
    "\000\024\030\052\033\042\034\060\040\145\067\137\070" +
    "\144\071\050\072\017\073\143\001\002\000\004\041\230" +
    "\001\002\000\016\035\uffa1\037\uffa1\041\uffa1\064\uffa1\065" +
    "\uffa1\066\uffa1\001\002\000\014\030\052\033\042\034\060" +
    "\040\226\073\225\001\002\000\006\035\uffaa\041\uffaa\001" +
    "\002\000\006\035\uffda\036\234\001\002\000\006\030\052" +
    "\067\236\001\002\000\004\035\uffd8\001\002\000\004\035" +
    "\uffd9\001\002\000\006\035\uffd5\036\240\001\002\000\006" +
    "\030\052\071\242\001\002\000\004\035\uffd3\001\002\000" +
    "\004\035\uffd4\001\002\000\004\042\275\001\002\000\004" +
    "\073\272\001\002\000\004\041\266\001\002\000\004\073" +
    "\263\001\002\000\004\073\260\001\002\000\004\073\255" +
    "\001\002\000\004\073\252\001\002\000\006\041\ufff2\047" +
    "\253\001\002\000\014\004\251\006\246\007\247\010\244" +
    "\011\250\001\002\000\004\041\uffed\001\002\000\006\041" +
    "\uffef\047\256\001\002\000\014\004\251\006\246\007\247" +
    "\010\244\011\250\001\002\000\004\041\uffea\001\002\000" +
    "\006\041\ufff1\047\261\001\002\000\014\004\251\006\246" +
    "\007\247\010\244\011\250\001\002\000\004\041\uffec\001" +
    "\002\000\006\041\ufff0\047\264\001\002\000\014\004\251" +
    "\006\246\007\247\010\244\011\250\001\002\000\004\041" +
    "\uffeb\001\002\000\004\042\267\001\002\000\046\004\023" +
    "\005\055\006\033\007\016\010\056\016\037\030\052\031" +
    "\053\032\061\033\042\034\060\035\uffd0\040\021\067\032" +
    "\070\044\071\050\072\017\073\040\001\002\000\004\043" +
    "\271\001\002\000\012\002\ufff7\004\ufff7\006\ufff7\007\ufff7" +
    "\001\002\000\006\041\uffee\047\273\001\002\000\014\004" +
    "\251\006\246\007\247\010\244\011\250\001\002\000\004" +
    "\041\uffe9\001\002\000\046\004\023\005\055\006\033\007" +
    "\016\010\056\016\037\030\052\031\053\032\061\033\042" +
    "\034\060\035\uffd0\040\021\067\032\070\044\071\050\072" +
    "\017\073\040\001\002\000\004\043\277\001\002\000\012" +
    "\002\ufffa\004\ufffa\006\ufffa\007\ufffa\001\002\000\016\004" +
    "\251\006\246\007\247\010\244\011\250\041\301\001\002" +
    "\000\004\042\307\001\002\000\004\041\303\001\002\000" +
    "\004\042\304\001\002\000\046\004\023\005\055\006\033" +
    "\007\016\010\056\016\037\030\052\031\053\032\061\033" +
    "\042\034\060\035\uffd0\040\021\067\032\070\044\071\050" +
    "\072\017\073\040\001\002\000\004\043\306\001\002\000" +
    "\012\002\ufff6\004\ufff6\006\ufff6\007\ufff6\001\002\000\046" +
    "\004\023\005\055\006\033\007\016\010\056\016\037\030" +
    "\052\031\053\032\061\033\042\034\060\035\uffd0\040\021" +
    "\067\032\070\044\071\050\072\017\073\040\001\002\000" +
    "\004\043\311\001\002\000\012\002\ufff9\004\ufff9\006\ufff9" +
    "\007\ufff9\001\002\000\016\004\251\006\246\007\247\010" +
    "\244\011\250\041\313\001\002\000\004\042\321\001\002" +
    "\000\004\041\315\001\002\000\004\042\316\001\002\000" +
    "\046\004\023\005\055\006\033\007\016\010\056\016\037" +
    "\030\052\031\053\032\061\033\042\034\060\035\uffd0\040" +
    "\021\067\032\070\044\071\050\072\017\073\040\001\002" +
    "\000\004\043\320\001\002\000\012\002\ufff5\004\ufff5\006" +
    "\ufff5\007\ufff5\001\002\000\046\004\023\005\055\006\033" +
    "\007\016\010\056\016\037\030\052\031\053\032\061\033" +
    "\042\034\060\035\uffd0\040\021\067\032\070\044\071\050" +
    "\072\017\073\040\001\002\000\004\043\323\001\002\000" +
    "\012\002\ufff8\004\ufff8\006\ufff8\007\ufff8\001\002\000\004" +
    "\002\001\001\002\000\004\002\ufffd\001\002\000\004\002" +
    "\ufffe\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\324\000\010\002\005\003\003\004\004\001\001\000" +
    "\010\002\325\003\003\004\004\001\001\000\010\002\324" +
    "\003\003\004\004\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\016\244" +
    "\001\001\000\002\001\001\000\050\005\017\006\025\007" +
    "\035\010\042\011\053\012\040\013\026\014\046\015\056" +
    "\020\021\021\030\022\033\023\023\024\014\026\034\027" +
    "\027\030\050\031\024\035\045\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\024\005\141\013\146\020\021\021\030\022\033\023\140" +
    "\026\226\027\027\030\050\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\034\213\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\032\155\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\050\005\017\006\165" +
    "\007\035\010\042\011\053\012\040\013\026\014\046\015" +
    "\056\020\021\021\030\022\033\023\023\024\014\026\034" +
    "\027\027\030\050\031\024\035\045\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\033\135\001\001\000\006\017\112\023\105\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\006\017\115\023\105\001" +
    "\001\000\002\001\001\000\002\001\001\000\006\017\120" +
    "\023\105\001\001\000\002\001\001\000\006\017\122\023" +
    "\105\001\001\000\002\001\001\000\006\017\124\023\105" +
    "\001\001\000\002\001\001\000\006\017\126\023\105\001" +
    "\001\000\002\001\001\000\006\017\130\023\105\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\020\005\141\020\021" +
    "\021\030\022\033\023\140\027\145\030\137\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\020\005" +
    "\141\013\146\020\021\021\030\022\033\023\140\027\147" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\032" +
    "\155\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\020\005" +
    "\141\013\157\020\021\021\030\022\033\023\140\027\147" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\030\005\017\014\171\020\021\021\030" +
    "\022\033\023\023\024\014\026\034\027\145\030\050\031" +
    "\024\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\050\005\017\006\176\007" +
    "\035\010\042\011\053\012\040\013\026\014\046\015\056" +
    "\020\021\021\030\022\033\023\023\024\014\026\034\027" +
    "\027\030\050\031\024\035\045\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\050\005\017\006" +
    "\202\007\035\010\042\011\053\012\040\013\026\014\046" +
    "\015\056\020\021\021\030\022\033\023\023\024\014\026" +
    "\034\027\027\030\050\031\024\035\045\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\023\207\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\012\005" +
    "\223\023\222\025\221\031\220\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\034\230\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\022\005\141\020" +
    "\021\021\030\022\033\023\140\026\226\027\145\030\050" +
    "\001\001\000\002\001\001\000\002\001\001\000\012\005" +
    "\223\023\222\025\231\031\220\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\005\234\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\005\240" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\016\253\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\016\256\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\016\261\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\016\264\001\001\000" +
    "\002\001\001\000\002\001\001\000\050\005\017\006\267" +
    "\007\035\010\042\011\053\012\040\013\026\014\046\015" +
    "\056\020\021\021\030\022\033\023\023\024\014\026\034" +
    "\027\027\030\050\031\024\035\045\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\016\273" +
    "\001\001\000\002\001\001\000\050\005\017\006\275\007" +
    "\035\010\042\011\053\012\040\013\026\014\046\015\056" +
    "\020\021\021\030\022\033\023\023\024\014\026\034\027" +
    "\027\030\050\031\024\035\045\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\016\301\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\050\005\017" +
    "\006\304\007\035\010\042\011\053\012\040\013\026\014" +
    "\046\015\056\020\021\021\030\022\033\023\023\024\014" +
    "\026\034\027\027\030\050\031\024\035\045\001\001\000" +
    "\002\001\001\000\002\001\001\000\050\005\017\006\307" +
    "\007\035\010\042\011\053\012\040\013\026\014\046\015" +
    "\056\020\021\021\030\022\033\023\023\024\014\026\034" +
    "\027\027\030\050\031\024\035\045\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\016\313\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\050\005" +
    "\017\006\316\007\035\010\042\011\053\012\040\013\026" +
    "\014\046\015\056\020\021\021\030\022\033\023\023\024" +
    "\014\026\034\027\027\030\050\031\024\035\045\001\001" +
    "\000\002\001\001\000\002\001\001\000\050\005\017\006" +
    "\321\007\035\010\042\011\053\012\040\013\026\014\046" +
    "\015\056\020\021\021\030\022\033\023\023\024\014\026" +
    "\034\027\027\030\050\031\024\035\045\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}


  /** Scan to get the next Symbol. */
  public java_cup.runtime.Symbol scan()
    throws java.lang.Exception
    {
 return s.next_token(); 
    }


    Scanner s;
    public parser(int t, Scanner s){ this.s=s; }
    public boolean syntaxErrors;
    public int syntaxErrs = 0;
    
    @Override
    public void syntax_error(Symbol current_token) {
      syntaxErrs += 1;
      System.out.println(
        "SYNTAX ERROR AT LINE " + (current_token.left+1) + " COLUMN " + current_token.right +
          " VALUE: " + current_token.value + " - ");
    }

    public void initParser(String file){
        try {
            BufferedReader br = new BufferedReader(new FileReader(file));
            parser codeParser = new parser(0,
                    new Lexer(br));
            Object result = codeParser.parse().value;
            String res = this.syntaxErrs > 0? "THERE WERE " + syntaxErrs + 
              "ERRORS. THE CODE CANNOT BE GENERATED." : "THE CODE CAN BE GENERATED.";
            System.out.println(res);
        } catch (Exception ex) {
            System.err.println("AN ERROR HAS BEEN FOUND. PROCEEDING WITH THE REST OF THE FILE.");
            //ex.printStackTrace();
        }
    }



/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$parser$actions {
  private final parser parser;

  /** Constructor */
  CUP$parser$actions(parser parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$parser$do_action_part00000000(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$parser$result;

      /* select the action based on the action number */
      switch (CUP$parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= ini EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = start_val;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$parser$parser.done_parsing();
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // ini ::= main 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("ini",0, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // ini ::= function 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("ini",0, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // ini ::= main ini 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("ini",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // ini ::= function ini 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("ini",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // main ::= INT MAIN LCURLY RCURLY 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("main",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // main ::= INT MAIN LCURLY codeBlock RCURLY 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("main",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // function ::= INT FUNC RPAREN LCURLY codeBlock RCURLY 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("function",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // function ::= CHAR FUNC RPAREN LCURLY codeBlock RCURLY 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("function",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // function ::= BOOL FUNC RPAREN LCURLY codeBlock RCURLY 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("function",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // function ::= INT FUNC parameters RPAREN LCURLY codeBlock RCURLY 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("function",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // function ::= CHAR FUNC parameters RPAREN LCURLY codeBlock RCURLY 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("function",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // function ::= BOOL FUNC parameters RPAREN LCURLY codeBlock RCURLY 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("function",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // functionInv ::= FUNC RPAREN 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("functionInv",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // functionInv ::= FUNC parametersInv RPAREN 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("functionInv",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // parameters ::= INT ID 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("parameters",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // parameters ::= CHAR ID 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("parameters",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // parameters ::= BOOL ID 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("parameters",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // parameters ::= ARRAY ID 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("parameters",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // parameters ::= STRING ID 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("parameters",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // parameters ::= INT ID COMMA parameters 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("parameters",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // parameters ::= CHAR ID COMMA parameters 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("parameters",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // parameters ::= BOOL ID COMMA parameters 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("parameters",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // parameters ::= ARRAY ID COMMA parameters 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("parameters",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // parameters ::= STRING ID COMMA parameters 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("parameters",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // parametersInv ::= INTLIT 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("parametersInv",13, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // parametersInv ::= FLOATLIT 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("parametersInv",13, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // parametersInv ::= CHARLIT 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("parametersInv",13, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // parametersInv ::= STRINGLIT 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("parametersInv",13, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // parametersInv ::= boolLit 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("parametersInv",13, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // parametersInv ::= ID 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("parametersInv",13, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // parametersInv ::= INTLIT COMMA parametersInv 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("parametersInv",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // parametersInv ::= FLOATLIT COMMA parametersInv 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("parametersInv",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // parametersInv ::= CHARLIT COMMA parametersInv 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("parametersInv",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // parametersInv ::= STRINGLIT COMMA parametersInv 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("parametersInv",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // parametersInv ::= boolLit COMMA parametersInv 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("parametersInv",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // parametersInv ::= ID COMMA parametersInv 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("parametersInv",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // codeBlock ::= expression 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("codeBlock",4, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // codeBlock ::= expression codeBlock 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("codeBlock",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // varCreation ::= INT ID 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("varCreation",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // varCreation ::= INT ID EQ INTLIT 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("varCreation",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // varCreation ::= INT ID EQ functionInv 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("varCreation",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // varCreation ::= FLOAT ID 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("varCreation",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // varCreation ::= FLOAT ID EQ FLOATLIT 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("varCreation",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // varCreation ::= CHAR ID 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("varCreation",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // varCreation ::= CHAR ID EQ CHARLIT 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("varCreation",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // varCreation ::= CHAR ID EQ functionInv 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("varCreation",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // varCreation ::= BOOL ID 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("varCreation",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // varCreation ::= BOOL ID EQ boolLit 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("varCreation",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // varCreation ::= 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("varCreation",5, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // varCreation ::= STRING ID 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("varCreation",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // varCreation ::= STRING ID EQ STRINGLIT 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("varCreation",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // printFunction ::= PRINT LPAREN INTLIT RPAREN 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("printFunction",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // printFunction ::= PRINT LPAREN FLOATLIT RPAREN 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("printFunction",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // printFunction ::= PRINT LPAREN CHARLIT RPAREN 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("printFunction",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // printFunction ::= PRINT LPAREN STRINGLIT RPAREN 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("printFunction",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // printFunction ::= PRINT LPAREN ID RPAREN 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("printFunction",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // readFunction ::= READ 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("readFunction",7, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // expression ::= mathExpression 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("expression",8, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // expression ::= unaryExpression HASH 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("expression",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // expression ::= logRelExpression HASH 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("expression",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // expression ::= varCreation HASH 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("expression",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // expression ::= printFunction HASH 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("expression",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // expression ::= readFunction HASH 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("expression",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // expression ::= if 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("expression",8, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // literal ::= numLiteral 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("literal",14, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // literal ::= lettersLiteral 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("literal",14, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // literal ::= boolLit 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("literal",14, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // numLiteral ::= INTLIT 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("numLiteral",15, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // numLiteral ::= FLOATLIT 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("numLiteral",15, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // lettersLiteral ::= CHARLIT 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("lettersLiteral",16, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // lettersLiteral ::= STRINGLIT 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("lettersLiteral",16, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // boolLit ::= TRUE 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("boolLit",17, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // boolLit ::= FALSE 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("boolLit",17, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // unaryExpression ::= ID PADD 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("unaryExpression",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // unaryExpression ::= ID PSUBS 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("unaryExpression",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // unaryExpression ::= INTLIT PADD 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("unaryExpression",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // unaryExpression ::= INTLIT PSUBS 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("unaryExpression",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // unaryExpression ::= FLOATLIT PADD 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("unaryExpression",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // unaryExpression ::= FLOATLIT PSUBS 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("unaryExpression",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // mathExpression ::= mathOperand 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("mathExpression",9, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // mathExpression ::= mathOperand mathOperator mathExpression 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("mathExpression",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // logRelExpression ::= logicalExpression 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("logRelExpression",10, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // logRelExpression ::= relationalExpression 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("logRelExpression",10, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // relationalExpression ::= relationalOperand relationalOperator relationalOperand 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("relationalExpression",20, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // logicalExpression ::= logicalOperand logicalOperator logicalExpr 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("logicalExpression",18, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // logicalExpr ::= logicalOperand 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("logicalExpr",19, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // logicalExpr ::= logicalOperand logicalOperator logicalExpr 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("logicalExpr",19, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // mathOperand ::= literal 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("mathOperand",21, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // mathOperand ::= functionInv 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("mathOperand",21, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // mathOperand ::= ID 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("mathOperand",21, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // relationalOperand ::= mathOperand 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("relationalOperand",22, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // relationalOperand ::= LPAREN mathExpression RPAREN 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("relationalOperand",22, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // logicalOperand ::= ID 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("logicalOperand",23, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // logicalOperand ::= boolLit 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("logicalOperand",23, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // logicalOperand ::= functionInv 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("logicalOperand",23, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 96: // logicalOperand ::= LPAREN relationalExpression RPAREN 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("logicalOperand",23, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 97: // mathOperator ::= ADD 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("mathOperator",24, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 98: // mathOperator ::= SUBS 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("mathOperator",24, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 99: // mathOperator ::= DIV 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("mathOperator",24, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 100: // mathOperator ::= MULT 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("mathOperator",24, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 101: // mathOperator ::= EXP 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("mathOperator",24, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 102: // mathOperator ::= MOD 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("mathOperator",24, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 103: // relationalOperator ::= GTE 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("relationalOperator",25, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 104: // relationalOperator ::= GT 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("relationalOperator",25, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 105: // relationalOperator ::= LTE 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("relationalOperator",25, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 106: // relationalOperator ::= LT 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("relationalOperator",25, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 107: // logicalOperator ::= AND 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("logicalOperator",26, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 108: // logicalOperator ::= OR 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("logicalOperator",26, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 109: // logicalOperator ::= EQEQ 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("logicalOperator",26, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 110: // logicalOperator ::= NOT 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("logicalOperator",26, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 111: // if ::= IF LPAREN logRelExpression RPAREN THEN LCURLY codeBlock RCURLY 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("if",27, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 112: // if ::= IF LPAREN logRelExpression RPAREN THEN LCURLY codeBlock RCURLY ELSE LCURLY codeBlock RCURLY 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("if",27, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-11)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$parser$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$parser$do_action(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
              return CUP$parser$do_action_part00000000(
                               CUP$parser$act_num,
                               CUP$parser$parser,
                               CUP$parser$stack,
                               CUP$parser$top);
    }
}

}
