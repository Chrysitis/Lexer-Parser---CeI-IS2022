[ INT ] int
[ FUNC ] funcOne(
[ RPAREN ] )
[ LCURLY ] {
[ INT ] int
[ ID 0 ] i_x - Found in symbol table: 1
[ HASH ] #
[ INT ] int
[ ID 1 ] i_y - Found in symbol table: 1
[ EQ ] =
[ INTLIT ] 10
[ HASH ] #
[ INT ] int
[ ID 2 ] i_z - Found in symbol table: 1
[ EQ ] =
[ ID 3 ] i_y - Found in symbol table: 1
[ MULT ] *
[ INTLIT ] 5
[ HASH ] #
[ CHAR ] char
[ ID 4 ] c_a - Found in symbol table: 1
[ EQ ] =
[ CHARLIT ] 'z'
[ HASH ] #
[ BOOL ] boolean
[ ID 5 ] b_1 - Found in symbol table: 1
[ EQ ] =
[ TRUE ] true
[ HASH ] #
[ BOOL ] boolean
[ ID 6 ] b_2 - Found in symbol table: 1
[ EQ ] =
[ FALSE ] false
[ HASH ] #
[ BOOL ] boolean
[ ID 7 ] b_3 - Found in symbol table: 1
[ EQ ] =
[ TRUE ] true
[ HASH ] #
[ STRING ] string
[ ID 8 ] str_s - Found in symbol table: 1
[ EQ ] =
[ STRINGLIT ] "Esto es un string"
[ HASH ] #
[ COMMENT ] /* int p = y++# 3DCode does not like it! */
[ COMMENT ] /* y = y++ Even the parser throws err! */
[ COMMENT ] /* y = 99# semantic error! */
[ INT ] int
[ ID 9 ] i_p - Found in symbol table: 1
[ EQ ] =
[ ID 10 ] i_y - Found in symbol table: 1
[ PADD ] ++
[ HASH ] #
[ IF ] if
[ LPAREN ] (
[ ID 11 ] b_2 - Found in symbol table: 1
[ AND ] &&
[ ID 12 ] b_1 - Found in symbol table: 1
[ OR ] ||
[ ID 13 ] b_3 - Found in symbol table: 1
[ RPAREN ] )
[ THEN ] then
[ LCURLY ] {
[ CHAR ] char
[ ID 14 ] c_b - Found in symbol table: 2
[ EQ ] =
[ CHARLIT ] 'u'
[ HASH ] #
[ INT ] int
[ ID 15 ] i_u - Found in symbol table: 2
[ EQ ] =
[ INTLIT ] 99
[ HASH ] #
[ RCURLY ] }
[ IF ] if
[ LPAREN ] (
[ INTLIT ] 10
[ GT ] >
[ INTLIT ] 10
[ RPAREN ] )
[ THEN ] then
[ LCURLY ] {
[ CHAR ] char
[ ID 16 ] c_t - Found in symbol table: 2
[ EQ ] =
[ CHARLIT ] 'p'
[ HASH ] #
[ INT ] int
[ ID 17 ] i_o - Found in symbol table: 2
[ EQ ] =
[ INTLIT ] 99
[ HASH ] #
[ RCURLY ] }
[ RETURN ] return
[ INTLIT ] 0
[ HASH ] #
[ RCURLY ] }
[ INT ] int
[ MAIN ] main()
[ LCURLY ] {
[ INT ] int
[ ID 18 ] i_xi - Found in symbol table: 1
[ EQ ] =
[ INTLIT ] 5
[ HASH ] #
[ INT ] int
[ ID 19 ] i_yi - Found in symbol table: 1
[ EQ ] =
[ INTLIT ] 7
[ HASH ] #
[ INT ] int
[ ID 20 ] i_ai - Found in symbol table: 1
[ EQ ] =
[ INTLIT ] 52
[ HASH ] #
[ INT ] int
[ ID 21 ] i_bi - Found in symbol table: 1
[ EQ ] =
[ INTLIT ] 26
[ HASH ] #
[ INT ] int
[ ID 22 ] i_ci - Found in symbol table: 1
[ EQ ] =
[ INTLIT ] 2
[ HASH ] #
[ INT ] int
[ ID 23 ] i_ji - Found in symbol table: 1
[ EQ ] =
[ ID 24 ] i_xi - Found in symbol table: 1
[ MULT ] *
[ INTLIT ] 5
[ HASH ] #
[ INT ] int
[ ID 25 ] i_zi - Found in symbol table: 1
[ EQ ] =
[ ID 26 ] i_xi - Found in symbol table: 1
[ MULT ] *
[ ID 27 ] i_yi - Found in symbol table: 1
[ HASH ] #
[ INT ] int
[ ID 28 ] i_di - Found in symbol table: 1
[ EQ ] =
[ ID 29 ] i_ai - Found in symbol table: 1
[ DIV ] /
[ ID 30 ] i_bi - Found in symbol table: 1
[ HASH ] #
[ INT ] int
[ ID 31 ] i_ei - Found in symbol table: 1
[ EQ ] =
[ ID 32 ] i_xi - Found in symbol table: 1
[ ADD ] +
[ ID 33 ] i_bi - Found in symbol table: 1
[ HASH ] #
[ INT ] int
[ ID 34 ] i_fi - Found in symbol table: 1
[ EQ ] =
[ ID 35 ] i_yi - Found in symbol table: 1
[ SUBS ] -
[ ID 36 ] i_ci - Found in symbol table: 1
[ HASH ] #
[ INT ] int
[ ID 37 ] i_gi - Found in symbol table: 1
[ EQ ] =
[ INTLIT ] 5
[ MULT ] *
[ INTLIT ] 2
[ ADD ] +
[ INTLIT ] 3
[ SUBS ] -
[ INTLIT ] 2
[ HASH ] #
[ PRINT ] print(
[ STRINGLIT ] "i_zi es: "
[ RPAREN ] )
[ HASH ] #
[ PRINT ] print(
[ ID 38 ] i_zi - Found in symbol table: 1
[ RPAREN ] )
[ HASH ] #
[ PRINT ] print(
[ STRINGLIT ] "Inserte un numero: "
[ RPAREN ] )
[ HASH ] #
[ INT ] int
[ ID 39 ] i_ri - Found in symbol table: 1
[ EQ ] =
[ READ ] read()
[ HASH ] #
[ PRINT ] print(
[ STRINGLIT ] "i_ri es: "
[ RPAREN ] )
[ HASH ] #
[ PRINT ] print(
[ ID 40 ] i_ri - Found in symbol table: 1
[ RPAREN ] )
[ HASH ] #
[ BOOL ] boolean
[ ID 41 ] b_ai - Found in symbol table: 1
[ EQ ] =
[ TRUE ] true
[ HASH ] #
[ IF ] if
[ LPAREN ] (
[ ID 42 ] b_ai - Found in symbol table: 1
[ RPAREN ] )
[ THEN ] then
[ LCURLY ] {
[ INT ] int
[ ID 43 ] i_ti - Found in symbol table: 2
[ EQ ] =
[ ID 44 ] i_xi - Found in symbol table: 2
[ ADD ] +
[ INTLIT ] 1
[ ADD ] +
[ INTLIT ] 6
[ HASH ] #
[ RCURLY ] }
[ RETURN ] return
[ INTLIT ] 0
[ HASH ] #
[ RCURLY ] }
